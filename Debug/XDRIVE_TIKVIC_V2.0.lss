
XDRIVE_TIKVIC_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00007192  00007226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001285  00802008  00802008  0000722e  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  00007230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  0000a824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000b734  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  0000b763  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a50a  00000000  00000000  0000bb23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001280  00000000  00000000  0001602d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e3f  00000000  00000000  000172ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d58  00000000  00000000  0001b0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002ff9  00000000  00000000  0001be44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cff  00000000  00000000  0001ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00021b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__vector_25>
      68:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 03 24 	jmp	0x4806	; 0x4806 <__vector_34>
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ba c3       	rjmp	.+1908   	; 0x84a <__vector_53>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d3 c0       	rjmp	.+422    	; 0x28c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a0 c4       	rjmp	.+2368   	; 0xa2a <__vector_58>
      ea:	00 00       	nop
      ec:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__vector_59>
      f0:	cd c0       	rjmp	.+410    	; 0x28c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_61>
      f8:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__vector_62>
      fc:	c7 c0       	rjmp	.+398    	; 0x28c <__bad_interrupt>
      fe:	00 00       	nop
     100:	c5 c0       	rjmp	.+394    	; 0x28c <__bad_interrupt>
     102:	00 00       	nop
     104:	c3 c0       	rjmp	.+390    	; 0x28c <__bad_interrupt>
     106:	00 00       	nop
     108:	c1 c0       	rjmp	.+386    	; 0x28c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bf c0       	rjmp	.+382    	; 0x28c <__bad_interrupt>
     10e:	00 00       	nop
     110:	bd c0       	rjmp	.+378    	; 0x28c <__bad_interrupt>
     112:	00 00       	nop
     114:	bb c0       	rjmp	.+374    	; 0x28c <__bad_interrupt>
     116:	00 00       	nop
     118:	b9 c0       	rjmp	.+370    	; 0x28c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b7 c0       	rjmp	.+366    	; 0x28c <__bad_interrupt>
     11e:	00 00       	nop
     120:	b5 c0       	rjmp	.+362    	; 0x28c <__bad_interrupt>
     122:	00 00       	nop
     124:	b3 c0       	rjmp	.+358    	; 0x28c <__bad_interrupt>
     126:	00 00       	nop
     128:	b1 c0       	rjmp	.+354    	; 0x28c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	af c0       	rjmp	.+350    	; 0x28c <__bad_interrupt>
     12e:	00 00       	nop
     130:	ad c0       	rjmp	.+346    	; 0x28c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 10 23 	jmp	0x4620	; 0x4620 <__vector_77>
     138:	a9 c0       	rjmp	.+338    	; 0x28c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a7 c0       	rjmp	.+334    	; 0x28c <__bad_interrupt>
     13e:	00 00       	nop
     140:	a5 c0       	rjmp	.+330    	; 0x28c <__bad_interrupt>
     142:	00 00       	nop
     144:	a3 c0       	rjmp	.+326    	; 0x28c <__bad_interrupt>
     146:	00 00       	nop
     148:	a1 c0       	rjmp	.+322    	; 0x28c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <__vector_83>
     150:	9d c0       	rjmp	.+314    	; 0x28c <__bad_interrupt>
     152:	00 00       	nop
     154:	9b c0       	rjmp	.+310    	; 0x28c <__bad_interrupt>
     156:	00 00       	nop
     158:	99 c0       	rjmp	.+306    	; 0x28c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	97 c0       	rjmp	.+302    	; 0x28c <__bad_interrupt>
     15e:	00 00       	nop
     160:	95 c0       	rjmp	.+298    	; 0x28c <__bad_interrupt>
     162:	00 00       	nop
     164:	93 c0       	rjmp	.+294    	; 0x28c <__bad_interrupt>
     166:	00 00       	nop
     168:	91 c0       	rjmp	.+290    	; 0x28c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8f c0       	rjmp	.+286    	; 0x28c <__bad_interrupt>
     16e:	00 00       	nop
     170:	8d c0       	rjmp	.+282    	; 0x28c <__bad_interrupt>
     172:	00 00       	nop
     174:	8b c0       	rjmp	.+278    	; 0x28c <__bad_interrupt>
     176:	00 00       	nop
     178:	89 c0       	rjmp	.+274    	; 0x28c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__bad_interrupt>
     17e:	00 00       	nop
     180:	85 c0       	rjmp	.+266    	; 0x28c <__bad_interrupt>
     182:	00 00       	nop
     184:	83 c0       	rjmp	.+262    	; 0x28c <__bad_interrupt>
     186:	00 00       	nop
     188:	81 c0       	rjmp	.+258    	; 0x28c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7f c0       	rjmp	.+254    	; 0x28c <__bad_interrupt>
     18e:	00 00       	nop
     190:	7d c0       	rjmp	.+250    	; 0x28c <__bad_interrupt>
     192:	00 00       	nop
     194:	7b c0       	rjmp	.+246    	; 0x28c <__bad_interrupt>
     196:	00 00       	nop
     198:	79 c0       	rjmp	.+242    	; 0x28c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	77 c0       	rjmp	.+238    	; 0x28c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	75 c0       	rjmp	.+234    	; 0x28c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	73 c0       	rjmp	.+230    	; 0x28c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	71 c0       	rjmp	.+226    	; 0x28c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6f c0       	rjmp	.+222    	; 0x28c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__vector_108>
     1b4:	6b c0       	rjmp	.+214    	; 0x28c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__vector_110>
     1bc:	67 c0       	rjmp	.+206    	; 0x28c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	65 c0       	rjmp	.+202    	; 0x28c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	63 c0       	rjmp	.+198    	; 0x28c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5f c0       	rjmp	.+190    	; 0x28c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5d c0       	rjmp	.+186    	; 0x28c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5b c0       	rjmp	.+182    	; 0x28c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	59 c0       	rjmp	.+178    	; 0x28c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	57 c0       	rjmp	.+174    	; 0x28c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	53 c0       	rjmp	.+166    	; 0x28c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	51 c0       	rjmp	.+162    	; 0x28c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4f c0       	rjmp	.+158    	; 0x28c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4d c0       	rjmp	.+154    	; 0x28c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 4a       	sbci	r16, 0xA8	; 168
     1f6:	d7 3b       	cpi	r29, 0xB7	; 183
     1f8:	3b ce       	rjmp	.-906    	; 0xfffffe70 <__eeprom_end+0xff7efe70>
     1fa:	01 6e       	ori	r16, 0xE1	; 225
     1fc:	84 bc       	out	0x24, r8	; 36
     1fe:	bf fd       	.word	0xfdbf	; ????
     200:	c1 2f       	mov	r28, r17
     202:	3d 6c       	ori	r19, 0xCD	; 205
     204:	74 31       	cpi	r23, 0x14	; 20
     206:	9a bd       	out	0x2a, r25	; 42
     208:	56 83       	std	Z+6, r21	; 0x06
     20a:	3d da       	rcall	.-2950   	; 0xfffff686 <__eeprom_end+0xff7ef686>
     20c:	3d 00       	.word	0x003d	; ????
     20e:	c7 7f       	andi	r28, 0xF7	; 247
     210:	11 be       	out	0x31, r1	; 49
     212:	d9 e4       	ldi	r29, 0x49	; 73
     214:	bb 4c       	sbci	r27, 0xCB	; 203
     216:	3e 91       	ld	r19, -X
     218:	6b aa       	std	Y+51, r6	; 0x33
     21a:	aa be       	out	0x3a, r10	; 58
     21c:	00 00       	nop
     21e:	00 80       	ld	r0, Z
     220:	3f 05       	cpc	r19, r15
     222:	a8 4c       	sbci	r26, 0xC8	; 200
     224:	cd b2       	in	r12, 0x1d	; 29
     226:	d4 4e       	sbci	r29, 0xE4	; 228
     228:	b9 38       	cpi	r27, 0x89	; 137
     22a:	36 a9       	ldd	r19, Z+54	; 0x36
     22c:	02 0c       	add	r0, r2
     22e:	50 b9       	out	0x00, r21	; 0
     230:	91 86       	std	Z+9, r9	; 0x09
     232:	88 08       	sbc	r8, r8
     234:	3c a6       	std	Y+44, r3	; 0x2c
     236:	aa aa       	std	Y+50, r10	; 0x32
     238:	2a be       	out	0x3a, r2	; 58
     23a:	00 00       	nop
     23c:	00 80       	ld	r0, Z
     23e:	3f 00       	.word	0x003f	; ????

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	df e3       	ldi	r29, 0x3F	; 63
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60
     250:	18 be       	out	0x38, r1	; 56
     252:	19 be       	out	0x39, r1	; 57
     254:	1a be       	out	0x3a, r1	; 58
     256:	1b be       	out	0x3b, r1	; 59

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e2 e9       	ldi	r30, 0x92	; 146
     260:	f1 e7       	ldi	r31, 0x71	; 113
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a8 30       	cpi	r26, 0x08	; 8
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>
     272:	1b be       	out	0x3b, r1	; 59

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a8 e0       	ldi	r26, 0x08	; 8
     278:	b0 e2       	ldi	r27, 0x20	; 32
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	ad 38       	cpi	r26, 0x8D	; 141
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 a8 34 	call	0x6950	; 0x6950 <main>
     288:	0c 94 c7 38 	jmp	0x718e	; 0x718e <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <ADC_ResultCh_GetWord>:

	// Wait 4*COMMEN_MODE_CYCLES for common mode to settle.  
	delay_us(4*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     28e:	46 2f       	mov	r20, r22
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	66 23       	and	r22, r22
     294:	0c f4       	brge	.+2      	; 0x298 <ADC_ResultCh_GetWord+0xa>
     296:	5f 6f       	ori	r21, 0xFF	; 255
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	23 83       	std	Z+3, r18	; 0x03
     29e:	24 81       	ldd	r18, Z+4	; 0x04
     2a0:	35 81       	ldd	r19, Z+5	; 0x05
     2a2:	24 1b       	sub	r18, r20
     2a4:	35 0b       	sbc	r19, r21
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	08 95       	ret

000002ac <ADC_ResultCh_GetLowByte>:
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	23 83       	std	Z+3, r18	; 0x03
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	86 1b       	sub	r24, r22
     2b6:	08 95       	ret

000002b8 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     2b8:	fc 01       	movw	r30, r24
  	// Store old prescaler value.  
  	uint8_t prescaler_val = adc->PRESCALER;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04

	// Set prescaler value to minimum value.  
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	95 e5       	ldi	r25, 0x55	; 85
     2c2:	9a 95       	dec	r25
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <ADC_Wait_32MHz+0xa>
     2c6:	00 00       	nop

	// wait 8*COMMEN_MODE_CYCLES for common mode to settle 
	delay_us(8*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	08 95       	ret

000002cc <ADC_Offset_Get>:
 *  \param adc Pointer to the ADC to calculate offset from.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get(ADC_t * adc)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
	uint8_t offset;

  	// Set up ADC to get offset.  
  	ADC_ConvMode_and_Resolution_Config(adc, true, ADC_RESOLUTION_12BIT_gc);
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	89 7e       	andi	r24, 0xE9	; 233
     2d6:	80 61       	ori	r24, 0x10	; 16
     2d8:	89 83       	std	Y+1, r24	; 0x01

	ADC_Prescaler_Config(adc , ADC_PRESCALER_DIV8_gc);
     2da:	8c 81       	ldd	r24, Y+4	; 0x04
     2dc:	88 7f       	andi	r24, 0xF8	; 248
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	8c 83       	std	Y+4, r24	; 0x04

	ADC_Referance_Config(adc , ADC_REFSEL_INT1V_gc);
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	8f 7c       	andi	r24, 0xCF	; 207
     2e6:	8a 83       	std	Y+2, r24	; 0x02

	ADC_Ch_InputMode_and_Gain_Config(&(adc->CH0),
     2e8:	88 a1       	ldd	r24, Y+32	; 0x20
     2ea:	80 7e       	andi	r24, 0xE0	; 224
     2ec:	82 60       	ori	r24, 0x02	; 2
     2ee:	88 a3       	std	Y+32, r24	; 0x20
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMux_Config(&(adc->CH0), ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     2f0:	19 a2       	std	Y+33, r1	; 0x21

	// Enable ADC.  
	ADC_Enable(adc);
     2f2:	88 81       	ld	r24, Y
     2f4:	81 60       	ori	r24, 0x01	; 1
     2f6:	88 83       	st	Y, r24

	// Wait until ADC is ready.  
	ADC_Wait_32MHz(adc);
     2f8:	ce 01       	movw	r24, r28
     2fa:	de df       	rcall	.-68     	; 0x2b8 <ADC_Wait_32MHz>

	// Do one conversion to find offset.  
	ADC_Ch_Conversion_Start(&(adc->CH0));
     2fc:	88 a1       	ldd	r24, Y+32	; 0x20
     2fe:	80 68       	ori	r24, 0x80	; 128
     300:	88 a3       	std	Y+32, r24	; 0x20

	do{
	}while(!ADC_Ch_Conversion_Complete(&(adc->CH0)));
     302:	8b a1       	ldd	r24, Y+35	; 0x23
     304:	80 ff       	sbrs	r24, 0
     306:	fd cf       	rjmp	.-6      	; 0x302 <ADC_Offset_Get+0x36>
	offset = ADC_ResultCh_GetLowByte(&(adc->CH0), 0x00);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	ce 01       	movw	r24, r28
     30c:	80 96       	adiw	r24, 0x20	; 32
     30e:	ce df       	rcall	.-100    	; 0x2ac <ADC_ResultCh_GetLowByte>

	// Disable ADC.  
	ADC_Disable(adc);
     310:	98 81       	ld	r25, Y
     312:	9e 7f       	andi	r25, 0xFE	; 254
     314:	98 83       	st	Y, r25

	return offset;
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <SP_ReadCalibrationByte>:
		  "M" (NVM_CMD_READ_CALIB_ROW_gc),
		  "M" (NVM_CMD_NO_OPERATION_gc)
		: "r20", "r30", "r31"
		); */

		GPIO30 = index;  // r30 - LSB of Z pointer to EEPROM
     31c:	8e bb       	out	0x1e, r24	; 30
		GPIO31 = 0;
     31e:	1f ba       	out	0x1f, r1	; 31
		NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     320:	ea ec       	ldi	r30, 0xCA	; 202
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 83       	st	Z, r24
		result = GPIO30;
     328:	8e b3       	in	r24, 0x1e	; 30
		NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     32a:	10 82       	st	Z, r1


		return result;

}
     32c:	08 95       	ret

0000032e <ADC_CalibrationValues_Set>:
 *  register. The calibration data reduces the gain error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
 void ADC_CalibrationValues_Set(ADC_t * adc)
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     334:	c1 15       	cp	r28, r1
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	d8 07       	cpc	r29, r24
     33a:	41 f4       	brne	.+16     	; 0x34c <ADC_CalibrationValues_Set+0x1e>
		 // Get ADCCAL0 from byte address 0x20 (Word address 0x10.  
		adc->CAL = SP_ReadCalibrationByte(0x20);
     33c:	80 e2       	ldi	r24, 0x20	; 32
     33e:	ee df       	rcall	.-36     	; 0x31c <SP_ReadCalibrationByte>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	e0 e0       	ldi	r30, 0x00	; 0
     344:	f2 e0       	ldi	r31, 0x02	; 2
     346:	84 87       	std	Z+12, r24	; 0x0c
     348:	95 87       	std	Z+13, r25	; 0x0d
     34a:	05 c0       	rjmp	.+10     	; 0x356 <ADC_CalibrationValues_Set+0x28>
	}else {
		// Get ADCCAL0 from byte address 0x24 (Word address 0x12.  
		adc->CAL = SP_ReadCalibrationByte(0x24);
     34c:	84 e2       	ldi	r24, 0x24	; 36
     34e:	e6 df       	rcall	.-52     	; 0x31c <SP_ReadCalibrationByte>
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	8c 87       	std	Y+12, r24	; 0x0c
     354:	9d 87       	std	Y+13, r25	; 0x0d
	}
} 
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <Podesi_Parametre_Robota>:


void Podesi_Parametre_Robota(void)
{
	//mehanicke karakteristike
	metar = 56250; //75000; //broj inkremenata za 1m - eksperiment!      /39035*2 izracunata vrednost 88,5
     35c:	8a eb       	ldi	r24, 0xBA	; 186
     35e:	9b ed       	ldi	r25, 0xDB	; 219
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	80 93 d3 24 	sts	0x24D3, r24
     368:	90 93 d4 24 	sts	0x24D4, r25
     36c:	a0 93 d5 24 	sts	0x24D5, r26
     370:	b0 93 d6 24 	sts	0x24D6, r27
	krug360 = 54000; //49650 - eksperiment 1;  //66250 - matematika;	//broj inkremenata za jedan krug - eksperiment!		//13653
     374:	80 ef       	ldi	r24, 0xF0	; 240
     376:	92 ed       	ldi	r25, 0xD2	; 210
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	80 93 75 32 	sts	0x3275, r24
     380:	90 93 76 32 	sts	0x3276, r25
     384:	a0 93 77 32 	sts	0x3277, r26
     388:	b0 93 78 32 	sts	0x3278, r27
	
	scale_factor_for_mm = metar / 1000;
     38c:	60 91 d3 24 	lds	r22, 0x24D3
     390:	70 91 d4 24 	lds	r23, 0x24D4
     394:	80 91 d5 24 	lds	r24, 0x24D5
     398:	90 91 d6 24 	lds	r25, 0x24D6
     39c:	28 ee       	ldi	r18, 0xE8	; 232
     39e:	33 e0       	ldi	r19, 0x03	; 3
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     3a8:	20 93 00 2e 	sts	0x2E00, r18
     3ac:	30 93 01 2e 	sts	0x2E01, r19
	krug180 = krug360 >> 1;	
     3b0:	80 91 75 32 	lds	r24, 0x3275
     3b4:	90 91 76 32 	lds	r25, 0x3276
     3b8:	a0 91 77 32 	lds	r26, 0x3277
     3bc:	b0 91 78 32 	lds	r27, 0x3278
     3c0:	b5 95       	asr	r27
     3c2:	a7 95       	ror	r26
     3c4:	97 95       	ror	r25
     3c6:	87 95       	ror	r24
     3c8:	80 93 cf 28 	sts	0x28CF, r24
     3cc:	90 93 d0 28 	sts	0x28D0, r25
     3d0:	a0 93 d1 28 	sts	0x28D1, r26
     3d4:	b0 93 d2 28 	sts	0x28D2, r27
	krug90 =  krug360 >> 2;
     3d8:	80 91 75 32 	lds	r24, 0x3275
     3dc:	90 91 76 32 	lds	r25, 0x3276
     3e0:	a0 91 77 32 	lds	r26, 0x3277
     3e4:	b0 91 78 32 	lds	r27, 0x3278
     3e8:	b5 95       	asr	r27
     3ea:	a7 95       	ror	r26
     3ec:	97 95       	ror	r25
     3ee:	87 95       	ror	r24
     3f0:	b5 95       	asr	r27
     3f2:	a7 95       	ror	r26
     3f4:	97 95       	ror	r25
     3f6:	87 95       	ror	r24
     3f8:	80 93 7e 2e 	sts	0x2E7E, r24
     3fc:	90 93 7f 2e 	sts	0x2E7F, r25
     400:	a0 93 80 2e 	sts	0x2E80, r26
     404:	b0 93 81 2e 	sts	0x2E81, r27
	krug45 =  krug360 >> 3;			
     408:	80 91 75 32 	lds	r24, 0x3275
     40c:	90 91 76 32 	lds	r25, 0x3276
     410:	a0 91 77 32 	lds	r26, 0x3277
     414:	b0 91 78 32 	lds	r27, 0x3278
     418:	68 94       	set
     41a:	12 f8       	bld	r1, 2
     41c:	b5 95       	asr	r27
     41e:	a7 95       	ror	r26
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	16 94       	lsr	r1
     426:	d1 f7       	brne	.-12     	; 0x41c <Podesi_Parametre_Robota+0xc0>
     428:	80 93 c8 24 	sts	0x24C8, r24
     42c:	90 93 c9 24 	sts	0x24C9, r25
     430:	a0 93 ca 24 	sts	0x24CA, r26
     434:	b0 93 cb 24 	sts	0x24CB, r27

	smer_zadati = 1;						//1-napred, 2-nazad, 0-sam bira smer
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 5e 29 	sts	0x295E, r24
	zeljena_pravolinijska_brzina = 800;		//brzina kojom se pravo krece robot
     43e:	20 e2       	ldi	r18, 0x20	; 32
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	20 93 7f 32 	sts	0x327F, r18
     446:	30 93 80 32 	sts	0x3280, r19
	zeljena_brzina_okretanja = 300; //brzina kojom se okrece robot
     44a:	8c e2       	ldi	r24, 0x2C	; 44
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	80 93 61 2e 	sts	0x2E61, r24
     452:	90 93 62 2e 	sts	0x2E62, r25
	max_brzina_motora = 800;				//eksperimentalno utvrdjena max brzina motora [impuls/vreme_odabiranja(3ms)] (max je oko 1000)
     456:	20 93 0f 2e 	sts	0x2E0F, r18
     45a:	30 93 10 2e 	sts	0x2E10, r19
	
	modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
     45e:	80 91 7f 32 	lds	r24, 0x327F
     462:	90 91 80 32 	lds	r25, 0x3280
     466:	80 93 b2 24 	sts	0x24B2, r24
     46a:	90 93 b3 24 	sts	0x24B3, r25
	rezervni_ugao = krug45;		//vrednost ugaone greske preko koje se radi reorijentacija robota  
     46e:	80 91 c8 24 	lds	r24, 0x24C8
     472:	90 91 c9 24 	lds	r25, 0x24C9
     476:	a0 91 ca 24 	lds	r26, 0x24CA
     47a:	b0 91 cb 24 	lds	r27, 0x24CB
     47e:	80 93 2f 2e 	sts	0x2E2F, r24
     482:	90 93 30 2e 	sts	0x2E30, r25
	PWM_perioda = 800;			//PWM tajmer broji do 800 - frekvenicja 20KHz
     486:	20 93 5e 2e 	sts	0x2E5E, r18
     48a:	30 93 5f 2e 	sts	0x2E5F, r19
     48e:	08 95       	ret

00000490 <Podesi_PID_Pojacanja>:

void Podesi_PID_Pojacanja(void)
{
	//PID parametri
	//Regulacija pravolinijskog kretanja
	Kp_pravolinijski = 6;		//1.89625
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	a0 ec       	ldi	r26, 0xC0	; 192
     496:	b0 e4       	ldi	r27, 0x40	; 64
     498:	80 93 6a 29 	sts	0x296A, r24
     49c:	90 93 6b 29 	sts	0x296B, r25
     4a0:	a0 93 6c 29 	sts	0x296C, r26
     4a4:	b0 93 6d 29 	sts	0x296D, r27
	Ki_pravolinijski = 1.3;
     4a8:	86 e6       	ldi	r24, 0x66	; 102
     4aa:	96 e6       	ldi	r25, 0x66	; 102
     4ac:	a6 ea       	ldi	r26, 0xA6	; 166
     4ae:	bf e3       	ldi	r27, 0x3F	; 63
     4b0:	80 93 79 32 	sts	0x3279, r24
     4b4:	90 93 7a 32 	sts	0x327A, r25
     4b8:	a0 93 7b 32 	sts	0x327B, r26
     4bc:	b0 93 7c 32 	sts	0x327C, r27
	Kd_pravolinijski = 125;		//6
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	aa ef       	ldi	r26, 0xFA	; 250
     4c6:	b2 e4       	ldi	r27, 0x42	; 66
     4c8:	80 93 bf 28 	sts	0x28BF, r24
     4cc:	90 93 c0 28 	sts	0x28C0, r25
     4d0:	a0 93 c1 28 	sts	0x28C1, r26
     4d4:	b0 93 c2 28 	sts	0x28C2, r27
	Kp_teta_pravolinijski = 15;	
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e7       	ldi	r26, 0x70	; 112
     4de:	b1 e4       	ldi	r27, 0x41	; 65
     4e0:	80 93 fc 2d 	sts	0x2DFC, r24
     4e4:	90 93 fd 2d 	sts	0x2DFD, r25
     4e8:	a0 93 fe 2d 	sts	0x2DFE, r26
     4ec:	b0 93 ff 2d 	sts	0x2DFF, r27
		
	//Regulacija ugaonog zakretanja
	Kp_teta = 20;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 ea       	ldi	r26, 0xA0	; 160
     4f6:	b1 e4       	ldi	r27, 0x41	; 65
     4f8:	80 93 89 32 	sts	0x3289, r24
     4fc:	90 93 8a 32 	sts	0x328A, r25
     500:	a0 93 8b 32 	sts	0x328B, r26
     504:	b0 93 8c 32 	sts	0x328C, r27
	Ki_teta = 1.2;
     508:	4a e9       	ldi	r20, 0x9A	; 154
     50a:	59 e9       	ldi	r21, 0x99	; 153
     50c:	69 e9       	ldi	r22, 0x99	; 153
     50e:	7f e3       	ldi	r23, 0x3F	; 63
     510:	40 93 a8 24 	sts	0x24A8, r20
     514:	50 93 a9 24 	sts	0x24A9, r21
     518:	60 93 aa 24 	sts	0x24AA, r22
     51c:	70 93 ab 24 	sts	0x24AB, r23
	Kd_teta = 20;
     520:	80 93 a2 24 	sts	0x24A2, r24
     524:	90 93 a3 24 	sts	0x24A3, r25
     528:	a0 93 a4 24 	sts	0x24A4, r26
     52c:	b0 93 a5 24 	sts	0x24A5, r27
	Kp_teta_okretanje = 1.5;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a0 ec       	ldi	r26, 0xC0	; 192
     536:	bf e3       	ldi	r27, 0x3F	; 63
     538:	80 93 65 2e 	sts	0x2E65, r24
     53c:	90 93 66 2e 	sts	0x2E66, r25
     540:	a0 93 67 2e 	sts	0x2E67, r26
     544:	b0 93 68 2e 	sts	0x2E68, r27
		
	//Regulacija brzine
	Kp_brzina = 0.2;	//0.4
     548:	8d ec       	ldi	r24, 0xCD	; 205
     54a:	9c ec       	ldi	r25, 0xCC	; 204
     54c:	ac e4       	ldi	r26, 0x4C	; 76
     54e:	be e3       	ldi	r27, 0x3E	; 62
     550:	80 93 d3 28 	sts	0x28D3, r24
     554:	90 93 d4 28 	sts	0x28D4, r25
     558:	a0 93 d5 28 	sts	0x28D5, r26
     55c:	b0 93 d6 28 	sts	0x28D6, r27
	Ki_brzina = 0;
     560:	10 92 b8 24 	sts	0x24B8, r1
     564:	10 92 b9 24 	sts	0x24B9, r1
     568:	10 92 ba 24 	sts	0x24BA, r1
     56c:	10 92 bb 24 	sts	0x24BB, r1
	Kd_brzina = 0;
     570:	10 92 50 2e 	sts	0x2E50, r1
     574:	10 92 51 2e 	sts	0x2E51, r1
     578:	10 92 52 2e 	sts	0x2E52, r1
     57c:	10 92 53 2e 	sts	0x2E53, r1

	//Ubrzavanje po rampi
	Accel_PID_pos = 2;	//bilo 2
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	80 93 d0 24 	sts	0x24D0, r24
     588:	90 93 d1 24 	sts	0x24D1, r25
     58c:	08 95       	ret

0000058e <Podesi_QDEC>:
}

void Podesi_QDEC(void)
{
     58e:	ef 92       	push	r14
     590:	0f 93       	push	r16
	//enkoderski ulazi
	PORT_ConfigurePins( &PORTD, 0xFF, false, false, PORT_OPC_PULLUP_gc, PORT_ISC_FALLING_gc);
     592:	68 94       	set
     594:	ee 24       	eor	r14, r14
     596:	e1 f8       	bld	r14, 1
     598:	08 e1       	ldi	r16, 0x18	; 24
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	6f ef       	ldi	r22, 0xFF	; 255
     5a0:	80 e6       	ldi	r24, 0x60	; 96
     5a2:	96 e0       	ldi	r25, 0x06	; 6
     5a4:	0e 94 69 32 	call	0x64d2	; 0x64d2 <PORT_ConfigurePins>
	PORT_SetPinsAsInput( &PORTD, 0xFF );
     5a8:	e0 e6       	ldi	r30, 0x60	; 96
     5aa:	f6 e0       	ldi	r31, 0x06	; 6
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	82 83       	std	Z+2, r24	; 0x02
	
	//Levi pasivni PORTD6,7
	PORTD.PIN6CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
     5b0:	86 89       	ldd	r24, Z+22	; 0x16
     5b2:	80 64       	ori	r24, 0x40	; 64
     5b4:	86 8b       	std	Z+22, r24	; 0x16
	EVSYS.CH0MUX = 0b01101110;		// PORTD6 mux input -> MOTOR_QDEC.LEFT
     5b6:	e0 e8       	ldi	r30, 0x80	; 128
     5b8:	f1 e0       	ldi	r31, 0x01	; 1
     5ba:	8e e6       	ldi	r24, 0x6E	; 110
     5bc:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = 0b00001001;		//enable QDEC, filtering 2x
     5be:	99 e0       	ldi	r25, 0x09	; 9
     5c0:	90 87       	std	Z+8, r25	; 0x08
	TCD1.CTRLA = 0b00000001;		//clock source
     5c2:	a0 e4       	ldi	r26, 0x40	; 64
     5c4:	b9 e0       	ldi	r27, 0x09	; 9
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	8c 93       	st	X, r24
	TCD1.CTRLD = 0b01101000;  		//event action=QDEC, event source=ch0 [01101000]
     5ca:	28 e6       	ldi	r18, 0x68	; 104
     5cc:	13 96       	adiw	r26, 0x03	; 3
     5ce:	2c 93       	st	X, r18
     5d0:	13 97       	sbiw	r26, 0x03	; 3
	TCD1.INTCTRLA = ( TCD1.INTCTRLA & ~TC1_OVFINTLVL_gm ) | 1;	//interapt na owerflov
     5d2:	16 96       	adiw	r26, 0x06	; 6
     5d4:	2c 91       	ld	r18, X
     5d6:	16 97       	sbiw	r26, 0x06	; 6
     5d8:	2c 7f       	andi	r18, 0xFC	; 252
     5da:	21 60       	ori	r18, 0x01	; 1
     5dc:	16 96       	adiw	r26, 0x06	; 6
     5de:	2c 93       	st	X, r18

	//Desni pasivni	PORTD4,5
	//PORTD.PIN4CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH2MUX = 0b01101100;			//PORTD4 mux input -> PASIVNI_DESNI
     5e0:	2c e6       	ldi	r18, 0x6C	; 108
     5e2:	22 83       	std	Z+2, r18	; 0x02
	EVSYS.CH2CTRL = 0b00001001;			//enable QDEC, filtering 2x
     5e4:	92 87       	std	Z+10, r25	; 0x0a
	TCD0.CTRLA = 0b00000001;			//clock source
     5e6:	e0 e0       	ldi	r30, 0x00	; 0
     5e8:	f9 e0       	ldi	r31, 0x09	; 9
     5ea:	80 83       	st	Z, r24
	TCD0.CTRLD = 0b01101010;  			//event action=QDEC, event source=ch2
     5ec:	8a e6       	ldi	r24, 0x6A	; 106
     5ee:	83 83       	std	Z+3, r24	; 0x03
	TCD0.INTCTRLA = ( TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
     5f0:	86 81       	ldd	r24, Z+6	; 0x06
     5f2:	8c 7f       	andi	r24, 0xFC	; 252
     5f4:	81 60       	ori	r24, 0x01	; 1
     5f6:	86 83       	std	Z+6, r24	; 0x06
}
     5f8:	0f 91       	pop	r16
     5fa:	ef 90       	pop	r14
     5fc:	08 95       	ret

000005fe <PodesiADC>:

void PodesiADC(void)
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
	//ADCB.REFCTRL = 0b00000010; //bandgap
	//ADCB.EVCTRL = 0b00000000;	//
	

	/* Move stored calibration values to ADC B. */
	ADC_CalibrationValues_Set(&ADCA);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	93 de       	rcall	.-730    	; 0x32e <ADC_CalibrationValues_Set>

	/* Get offset value for ADC A. */
 	offset = ADC_Offset_Get(&ADCA);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	5f de       	rcall	.-834    	; 0x2cc <ADC_Offset_Get>
     60e:	80 93 5a 2e 	sts	0x2E5A, r24

	/* Set up ADC B to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_8BIT_gc);
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d2 e0       	ldi	r29, 0x02	; 2
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	89 7e       	andi	r24, 0xE9	; 233
     61a:	84 60       	ori	r24, 0x04	; 4
     61c:	89 83       	std	Y+1, r24	; 0x01

	/* Sample rate is CPUFREQ/8. Allow time for storing data. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV4_gc);
     61e:	8c 81       	ldd	r24, Y+4	; 0x04
     620:	88 7f       	andi	r24, 0xF8	; 248
     622:	8c 83       	std	Y+4, r24	; 0x04

	/* Set referance voltage on ADC B to be VCC-0.6 V.*/
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	8f 7c       	andi	r24, 0xCF	; 207
     628:	8a 83       	std	Y+2, r24	; 0x02

	/* Setup channel 0 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     62a:	a0 e2       	ldi	r26, 0x20	; 32
     62c:	b2 e0       	ldi	r27, 0x02	; 2
     62e:	8c 91       	ld	r24, X
     630:	80 7e       	andi	r24, 0xE0	; 224
     632:	81 60       	ori	r24, 0x01	; 1
     634:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);
	/* Setup channel 1 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     636:	e8 e2       	ldi	r30, 0x28	; 40
     638:	f2 e0       	ldi	r31, 0x02	; 2
     63a:	80 81       	ld	r24, Z
     63c:	80 7e       	andi	r24, 0xE0	; 224
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	80 83       	st	Z, r24
										ADC_CH_INPUTMODE_SINGLEENDED_gc,
										ADC_CH_GAIN_1X_gc);

	/* Set input to the channel in ADC B to be PIN 1. */	//Levi motor pin0
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	1c 92       	st	X, r1
	/* Set input to the channel in ADC B to be PIN 1. */	//Desni motor pin1
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN0_gc);
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	81 83       	std	Z+1, r24	; 0x01
	
	/* Setup sweep of all four virtual channels. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_01_gc);
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	8f 73       	andi	r24, 0x3F	; 63
     64e:	80 64       	ori	r24, 0x40	; 64
     650:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable ADC B with free running mode, Vcc reference and unsigned conversion.*/
	ADC_Enable(&ADCA);
     652:	88 81       	ld	r24, Y
     654:	81 60       	ori	r24, 0x01	; 1
     656:	88 83       	st	Y, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	2d de       	rcall	.-934    	; 0x2b8 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	88 60       	ori	r24, 0x08	; 8
     662:	89 83       	std	Y+1, r24	; 0x01

}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <Podesi_Interapt>:

void Podesi_Interapt(void)
{
	// Enable high level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     66a:	e0 ea       	ldi	r30, 0xA0	; 160
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	84 60       	ori	r24, 0x04	; 4
     672:	82 83       	std	Z+2, r24	; 0x02
	// Enable medium level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     674:	82 81       	ldd	r24, Z+2	; 0x02
     676:	82 60       	ori	r24, 0x02	; 2
     678:	82 83       	std	Z+2, r24	; 0x02
	// Enable low level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	82 83       	std	Z+2, r24	; 0x02
	//round-robin algoritam EN
	PMIC.CTRL |= PMIC_RREN_bm;
     680:	82 81       	ldd	r24, Z+2	; 0x02
     682:	80 68       	ori	r24, 0x80	; 128
     684:	82 83       	std	Z+2, r24	; 0x02
	
	sei(); // enable all inerrupts
     686:	78 94       	sei
     688:	08 95       	ret

0000068a <Podesi_Oscilator>:
}

void Podesi_Oscilator(void)
{
	//Startovanje internog oscilatora od 32MHz
	OSC.CTRL = OSC_RC32MEN_bm;
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	80 93 50 00 	sts	0x0050, r24

	do {
		//Sacekaj dok se stabilizuje oscilator
	} while ( ( OSC.STATUS & OSC_RC32MRDY_bm ) == 0 );
     690:	e0 e5       	ldi	r30, 0x50	; 80
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	81 ff       	sbrs	r24, 1
     698:	fd cf       	rjmp	.-6      	; 0x694 <Podesi_Oscilator+0xa>
	
	//Ukljuci preskalere B i C
	CCP = CCP_IOREG_gc;
     69a:	88 ed       	ldi	r24, 0xD8	; 216
     69c:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSBCDIV_2_2_gc;
     69e:	e0 e4       	ldi	r30, 0x40	; 64
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	91 83       	std	Z+1, r25	; 0x01

	//Postavi 32MHz kao glavni oscilator
	CCP = CCP_IOREG_gc;
     6a6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <Podesi_USART_Komunikaciju>:
}

void Podesi_USART_Komunikaciju(void)
{
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
	//USART_E1 - BT - 115200
  	//PE7 (TXE1) - izlaz  
	PORTE.DIR |= PIN7_bm;
     6b8:	c0 e8       	ldi	r28, 0x80	; 128
     6ba:	d6 e0       	ldi	r29, 0x06	; 6
     6bc:	88 81       	ld	r24, Y
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	88 83       	st	Y, r24
	//PE6 (RXE1) - ulaz
	PORTE.DIR  &= ~PIN6_bm;
     6c2:	88 81       	ld	r24, Y
     6c4:	8f 7b       	andi	r24, 0xBF	; 191
     6c6:	88 83       	st	Y, r24
	//Koriscenje USARTE1 (definisano u globals.h) i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E1_data, &USARTE1, USART_DREINTLVL_LO_gc);
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	60 eb       	ldi	r22, 0xB0	; 176
     6cc:	7a e0       	ldi	r23, 0x0A	; 10
     6ce:	8b e0       	ldi	r24, 0x0B	; 11
     6d0:	90 e2       	ldi	r25, 0x20	; 32
     6d2:	0e 94 14 34 	call	0x6828	; 0x6828 <USART_InterruptDriver_Initialize>
	//USARTE1, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E1_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     6d6:	e0 91 0b 20 	lds	r30, 0x200B
     6da:	f0 91 0c 20 	lds	r31, 0x200C
     6de:	13 e0       	ldi	r17, 0x03	; 3
     6e0:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E1_data.usart, USART_RXCINTLVL_LO_gc);
     6e2:	83 81       	ldd	r24, Z+3	; 0x03
     6e4:	8f 7c       	andi	r24, 0xCF	; 207
     6e6:	80 61       	ori	r24, 0x10	; 16
     6e8:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	//USART_Baudrate_Set(&USARTE1, 14, -2 );	//115200
	USART_Baudrate_Set(&USARTE1,3269, -6 );	//9600
     6ea:	a0 eb       	ldi	r26, 0xB0	; 176
     6ec:	ba e0       	ldi	r27, 0x0A	; 10
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f5 ec       	ldi	r31, 0xC5	; 197
     6f2:	ff 2e       	mov	r15, r31
     6f4:	f0 2d       	mov	r31, r0
     6f6:	16 96       	adiw	r26, 0x06	; 6
     6f8:	fc 92       	st	X, r15
     6fa:	16 97       	sbiw	r26, 0x06	; 6
     6fc:	0c ea       	ldi	r16, 0xAC	; 172
     6fe:	17 96       	adiw	r26, 0x07	; 7
     700:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E1_data.usart);
     702:	84 81       	ldd	r24, Z+4	; 0x04
     704:	80 61       	ori	r24, 0x10	; 16
     706:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E1_data.usart);
     708:	84 81       	ldd	r24, Z+4	; 0x04
     70a:	88 60       	ori	r24, 0x08	; 8
     70c:	84 83       	std	Z+4, r24	; 0x04
	
	//USART_E0 BT_RS232 - MCU - 19200
	//PE3 (TXE0) - izlaz
	PORTE.DIR |= PIN3_bm;
     70e:	88 81       	ld	r24, Y
     710:	88 60       	ori	r24, 0x08	; 8
     712:	88 83       	st	Y, r24
	//PE2 (RXE0) - ulaz
	PORTE.DIR  &= ~PIN2_bm;
     714:	88 81       	ld	r24, Y
     716:	8b 7f       	andi	r24, 0xFB	; 251
     718:	88 83       	st	Y, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E0_data, &USARTE0, USART_DREINTLVL_LO_gc);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	60 ea       	ldi	r22, 0xA0	; 160
     71e:	7a e0       	ldi	r23, 0x0A	; 10
     720:	89 e1       	ldi	r24, 0x19	; 25
     722:	93 e2       	ldi	r25, 0x23	; 35
     724:	0e 94 14 34 	call	0x6828	; 0x6828 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     728:	e0 91 19 23 	lds	r30, 0x2319
     72c:	f0 91 1a 23 	lds	r31, 0x231A
     730:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E0_data.usart, USART_RXCINTLVL_LO_gc);
     732:	83 81       	ldd	r24, Z+3	; 0x03
     734:	8f 7c       	andi	r24, 0xCF	; 207
     736:	80 61       	ori	r24, 0x10	; 16
     738:	83 83       	std	Z+3, r24	; 0x03
	//19200 @ 32Mhz as calculated from ProtoTalk Calc
	USART_Baudrate_Set(&USARTE0, 3269, -6 ); //9600
     73a:	a0 ea       	ldi	r26, 0xA0	; 160
     73c:	ba e0       	ldi	r27, 0x0A	; 10
     73e:	16 96       	adiw	r26, 0x06	; 6
     740:	fc 92       	st	X, r15
     742:	16 97       	sbiw	r26, 0x06	; 6
     744:	17 96       	adiw	r26, 0x07	; 7
     746:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E0_data.usart);
     748:	84 81       	ldd	r24, Z+4	; 0x04
     74a:	80 61       	ori	r24, 0x10	; 16
     74c:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E0_data.usart);
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	88 60       	ori	r24, 0x08	; 8
     752:	84 83       	std	Z+4, r24	; 0x04
	

	//USART_C0 - Xmega_USB - 115200
	//PE3 (TXE0) - izlaz
	PORTC.DIR &= PIN3_bm;
     754:	e0 e4       	ldi	r30, 0x40	; 64
     756:	f6 e0       	ldi	r31, 0x06	; 6
     758:	80 81       	ld	r24, Z
     75a:	88 70       	andi	r24, 0x08	; 8
     75c:	80 83       	st	Z, r24
	//PE2 (RXE0) - ulaz
	PORTC.DIR  |= ~PIN2_bm;
     75e:	80 81       	ld	r24, Z
     760:	8b 6f       	ori	r24, 0xFB	; 251
     762:	80 83       	st	Z, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_C0_data, &USARTC0, USART_DREINTLVL_LO_gc);
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	60 ea       	ldi	r22, 0xA0	; 160
     768:	78 e0       	ldi	r23, 0x08	; 8
     76a:	82 e9       	ldi	r24, 0x92	; 146
     76c:	91 e2       	ldi	r25, 0x21	; 33
     76e:	0e 94 14 34 	call	0x6828	; 0x6828 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_C0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     772:	e0 91 92 21 	lds	r30, 0x2192
     776:	f0 91 93 21 	lds	r31, 0x2193
     77a:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_C0_data.usart, USART_RXCINTLVL_LO_gc);
     77c:	83 81       	ldd	r24, Z+3	; 0x03
     77e:	8f 7c       	andi	r24, 0xCF	; 207
     780:	80 61       	ori	r24, 0x10	; 16
     782:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	USART_Baudrate_Set(&USARTC0, 107, -5 );	//115200
     784:	a0 ea       	ldi	r26, 0xA0	; 160
     786:	b8 e0       	ldi	r27, 0x08	; 8
     788:	8b e6       	ldi	r24, 0x6B	; 107
     78a:	16 96       	adiw	r26, 0x06	; 6
     78c:	8c 93       	st	X, r24
     78e:	16 97       	sbiw	r26, 0x06	; 6
     790:	80 eb       	ldi	r24, 0xB0	; 176
     792:	17 96       	adiw	r26, 0x07	; 7
     794:	8c 93       	st	X, r24
	//USART_Baudrate_Set(&USARTC0, 14, -2 );	//115200
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_C0_data.usart);
     796:	84 81       	ldd	r24, Z+4	; 0x04
     798:	80 61       	ori	r24, 0x10	; 16
     79a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_C0_data.usart);
     79c:	84 81       	ldd	r24, Z+4	; 0x04
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	84 83       	std	Z+4, r24	; 0x04

}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	08 95       	ret

000007ae <Podesi_Tajmere>:
	//TCF0 - servo signal generator
	//TCF1 - motor PWM (levi, desni)
	
	//System tajmer za uzorkovanje enkodera i PID regulaciju
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCE1, 0x005F ); //0x00BF = 12ms //0x5F = 6ms //0x2F = 3ms <- Mirko //Nasa -> //0x5DC0
     7ae:	8f e5       	ldi	r24, 0x5F	; 95
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	e0 e4       	ldi	r30, 0x40	; 64
     7b4:	fa e0       	ldi	r31, 0x0A	; 10
     7b6:	86 a3       	std	Z+38, r24	; 0x26
     7b8:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable overflow interrupt at low level */
	TC1_SetOverflowIntLevel( &TCE1, TC_OVFINTLVL_MED_gc );
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	9a e0       	ldi	r25, 0x0A	; 10
     7c0:	0e 94 88 32 	call	0x6510	; 0x6510 <TC1_SetOverflowIntLevel>
	/* Start Timer/Counter. */
	TC1_ConfigClockSource( &TCE1, TC_CLKSEL_DIV256_gc );
     7c4:	66 e0       	ldi	r22, 0x06	; 6
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	9a e0       	ldi	r25, 0x0A	; 10
     7ca:	0c 94 82 32 	jmp	0x6504	; 0x6504 <TC1_ConfigClockSource>

000007ce <Podesi_PWM>:
	//TC0_ConfigClockSource( &TCF0, TC_CLKSEL_DIV64_gc );
}

void Podesi_PWM(void)
{	
	HIRESF_CTRLA = 0b00000010; //enable hi-res za TCF1
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	80 93 90 0b 	sts	0x0B90, r24
	// Configure timer 
	TCF1.PER = PWM_perioda;
     7d4:	80 91 5e 2e 	lds	r24, 0x2E5E
     7d8:	90 91 5f 2e 	lds	r25, 0x2E5F
     7dc:	e0 e4       	ldi	r30, 0x40	; 64
     7de:	fb e0       	ldi	r31, 0x0B	; 11
     7e0:	86 a3       	std	Z+38, r24	; 0x26
     7e2:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLB = TC1_CCBEN_bm | TC1_CCAEN_bm | TC_WGMODE_DS_T_gc;
     7e4:	85 e3       	ldi	r24, 0x35	; 53
     7e6:	81 83       	std	Z+1, r24	; 0x01
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 83       	st	Z, r24
	
	PORT_SetPinsAsOutput( &PORTF, 0b00110000 ); //PF5 - PWM_L, PF4 - PWM_D
     7ec:	80 e3       	ldi	r24, 0x30	; 48
     7ee:	e0 ea       	ldi	r30, 0xA0	; 160
     7f0:	f6 e0       	ldi	r31, 0x06	; 6
     7f2:	81 83       	std	Z+1, r24	; 0x01
     7f4:	08 95       	ret

000007f6 <Podesi_Pinove>:
}

void Podesi_Pinove(void)
{
     7f6:	ef 92       	push	r14
     7f8:	0f 93       	push	r16
     7fa:	cf 93       	push	r28
	//PORTB - digitalni ulazi 
	
	PORT_SetPinsAsInput( &PORTB, 0xFF );
     7fc:	cf ef       	ldi	r28, 0xFF	; 255
     7fe:	e0 e2       	ldi	r30, 0x20	; 32
     800:	f6 e0       	ldi	r31, 0x06	; 6
     802:	c2 83       	std	Z+2, r28	; 0x02
	PORT_ConfigurePins( &PORTB,
     804:	68 94       	set
     806:	ee 24       	eor	r14, r14
     808:	e1 f8       	bld	r14, 1
     80a:	08 e1       	ldi	r16, 0x18	; 24
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	6f ef       	ldi	r22, 0xFF	; 255
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	96 e0       	ldi	r25, 0x06	; 6
     816:	0e 94 69 32 	call	0x64d2	; 0x64d2 <PORT_ConfigurePins>
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_FALLING_gc);
	
	//podesavanje interrupt0 za PORTB.0 - ISR(PORTB_INT0_vect)
	PORT_ConfigureInterrupt0( &PORTB, PORT_INT0LVL_LO_gc, 0x01 );
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	80 e2       	ldi	r24, 0x20	; 32
     820:	96 e0       	ldi	r25, 0x06	; 6
     822:	0e 94 62 32 	call	0x64c4	; 0x64c4 <PORT_ConfigureInterrupt0>
	
	//PORTC - FET izlazi 
	PORT_SetPinsAsOutput(&PORTC, 0xFF);
     826:	e0 e4       	ldi	r30, 0x40	; 64
     828:	f6 e0       	ldi	r31, 0x06	; 6
     82a:	c1 83       	std	Z+1, r28	; 0x01
//  	PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTC_gc );	//mapiranje virtualnog porta 0 na PORTC
//  	PORT_SetDirection( &VPORT0, 0xFF );
//		VPORT0.OUT = 0x00;	//clear
	
	//pinovi za upravljanje moorima
	PORT_SetPinsAsOutput(&PORTH, 0xFF); //PH0-IN_A1, PH1-EN_A1, PH2-EN_B1, PH3-IN_B1, PH4-IN_A2, PH5-EN_A2, PH6-EN_B2, PH7-IN_B2
     82c:	e0 ee       	ldi	r30, 0xE0	; 224
     82e:	f6 e0       	ldi	r31, 0x06	; 6
     830:	c1 83       	std	Z+1, r28	; 0x01
	PORT_ClearPins(&PORTH, 0xFF);
     832:	c6 83       	std	Z+6, r28	; 0x06
	PORT_SetPins(&PORTH, 0b01100110); // EN ALL	
     834:	86 e6       	ldi	r24, 0x66	; 102
     836:	85 83       	std	Z+5, r24	; 0x05

	//servo izlazi
	PORT_SetPinsAsOutput(&PORTF, 0x0F);
     838:	e0 ea       	ldi	r30, 0xA0	; 160
     83a:	f6 e0       	ldi	r31, 0x06	; 6
     83c:	8f e0       	ldi	r24, 0x0F	; 15
     83e:	81 83       	std	Z+1, r24	; 0x01
	PORT_ClearPins(&PORTF, 0x0F);
     840:	86 83       	std	Z+6, r24	; 0x06
	
}
     842:	cf 91       	pop	r28
     844:	0f 91       	pop	r16
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <__vector_53>:
#include "Headers/port_driver.h"
#include "math.h"

//Tajmer za rad drajvera
ISR(TCE1_OVF_vect)	//3ms
{	
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	08 b6       	in	r0, 0x38	; 56
     856:	0f 92       	push	r0
     858:	18 be       	out	0x38, r1	; 56
     85a:	09 b6       	in	r0, 0x39	; 57
     85c:	0f 92       	push	r0
     85e:	19 be       	out	0x39, r1	; 57
     860:	0b b6       	in	r0, 0x3b	; 59
     862:	0f 92       	push	r0
     864:	1b be       	out	0x3b, r1	; 59
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	vreme_cekanja_tete++;
     87e:	80 91 64 29 	lds	r24, 0x2964
     882:	90 91 65 29 	lds	r25, 0x2965
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	80 93 64 29 	sts	0x2964, r24
     88c:	90 93 65 29 	sts	0x2965, r25
	vreme_pozicioniranja++;
     890:	80 91 5c 2e 	lds	r24, 0x2E5C
     894:	90 91 5d 2e 	lds	r25, 0x2E5D
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	80 93 5c 2e 	sts	0x2E5C, r24
     89e:	90 93 5d 2e 	sts	0x2E5D, r25
	sys_time++;
     8a2:	80 91 c4 24 	lds	r24, 0x24C4
     8a6:	90 91 c5 24 	lds	r25, 0x24C5
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	80 93 c4 24 	sts	0x24C4, r24
     8b0:	90 93 c5 24 	sts	0x24C5, r25
	
	sample_counter_niz_1++;
     8b4:	80 91 58 2e 	lds	r24, 0x2E58
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 93 58 2e 	sts	0x2E58, r24
	sample_counter_niz_2++;
     8be:	80 91 f9 2d 	lds	r24, 0x2DF9
     8c2:	8f 5f       	subi	r24, 0xFF	; 255
     8c4:	80 93 f9 2d 	sts	0x2DF9, r24
	sample_counter_niz_3++;
     8c8:	80 91 5f 29 	lds	r24, 0x295F
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	80 93 5f 29 	sts	0x295F, r24
	
	//Sample time za PID brzinski
	PID_brzinski();
     8d2:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <PID_brzinski>
	//Sample time za uzimanje trenutnog stanja enkodera i racunaje pozicije
	Rac_tren_poz_sample_counter++;
     8d6:	80 91 08 20 	lds	r24, 0x2008
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	80 93 08 20 	sts	0x2008, r24
	//Sample time za pracenje pravca
	Pracenje_Pravca_sample_counter++;
     8e0:	80 91 04 20 	lds	r24, 0x2004
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	80 93 04 20 	sts	0x2004, r24
	//Sample time za pozicioni PID
	PID_pozicioni_sample_counter++;
     8ea:	80 91 05 20 	lds	r24, 0x2005
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 05 20 	sts	0x2005, r24
	
	if(timeout)
     8f4:	80 91 35 2e 	lds	r24, 0x2E35
     8f8:	90 91 36 2e 	lds	r25, 0x2E36
     8fc:	89 2b       	or	r24, r25
     8fe:	49 f0       	breq	.+18     	; 0x912 <__vector_53+0xc8>
	{
		timeout--;
     900:	80 91 35 2e 	lds	r24, 0x2E35
     904:	90 91 36 2e 	lds	r25, 0x2E36
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	80 93 35 2e 	sts	0x2E35, r24
     90e:	90 93 36 2e 	sts	0x2E36, r25
	}
	
	//provera vreme primanja
	if (proveri_vreme_primanja > 0)
     912:	80 91 fb 2d 	lds	r24, 0x2DFB
     916:	88 23       	and	r24, r24
     918:	89 f0       	breq	.+34     	; 0x93c <__vector_53+0xf2>
	{
		proveri_vreme_primanja++;
     91a:	80 91 fb 2d 	lds	r24, 0x2DFB
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 fb 2d 	sts	0x2DFB, r24
		if (proveri_vreme_primanja > 100)
     924:	80 91 fb 2d 	lds	r24, 0x2DFB
     928:	85 36       	cpi	r24, 0x65	; 101
     92a:	40 f0       	brcs	.+16     	; 0x93c <__vector_53+0xf2>
		{
			RX_i_E0 = 0;
     92c:	10 92 5b 2e 	sts	0x2E5B, r1
			RX_i_E1 = 0;
     930:	10 92 5d 29 	sts	0x295D, r1
			RX_i_C0 = 0;
     934:	10 92 3f 2e 	sts	0x2E3F, r1
			proveri_vreme_primanja = 0;
     938:	10 92 fb 2d 	sts	0x2DFB, r1
		}
	}
	
	//snimanje niz_1
	if ((sample_counter_niz_1 > sample_time_niz_1) && (niz_counter_niz_1 < 127))
     93c:	90 91 58 2e 	lds	r25, 0x2E58
     940:	80 91 72 32 	lds	r24, 0x3272
     944:	89 17       	cp	r24, r25
     946:	08 f0       	brcs	.+2      	; 0x94a <__vector_53+0x100>
     948:	59 c0       	rjmp	.+178    	; 0x9fc <__vector_53+0x1b2>
     94a:	80 91 59 2e 	lds	r24, 0x2E59
     94e:	8f 37       	cpi	r24, 0x7F	; 127
     950:	08 f0       	brcs	.+2      	; 0x954 <__vector_53+0x10a>
     952:	54 c0       	rjmp	.+168    	; 0x9fc <__vector_53+0x1b2>
	{
		if (velicina_niz_1 == 2)
     954:	80 91 82 32 	lds	r24, 0x3282
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	91 f5       	brne	.+100    	; 0x9c0 <__vector_53+0x176>
		{
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1 + 1);
     95c:	e0 91 59 2e 	lds	r30, 0x2E59
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 91 fa 29 	lds	r24, 0x29FA
     966:	90 91 fb 29 	lds	r25, 0x29FB
     96a:	a0 91 fc 29 	lds	r26, 0x29FC
     96e:	b0 91 fd 29 	lds	r27, 0x29FD
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	dc 01       	movw	r26, r24
     97a:	8d 91       	ld	r24, X+
     97c:	9d 91       	ld	r25, X+
     97e:	0d 90       	ld	r0, X+
     980:	bc 91       	ld	r27, X
     982:	a0 2d       	mov	r26, r0
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ea 5f       	subi	r30, 0xFA	; 250
     98a:	f5 4d       	sbci	r31, 0xD5	; 213
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     990:	e0 91 59 2e 	lds	r30, 0x2E59
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 91 fa 29 	lds	r24, 0x29FA
     99a:	90 91 fb 29 	lds	r25, 0x29FB
     99e:	a0 91 fc 29 	lds	r26, 0x29FC
     9a2:	b0 91 fd 29 	lds	r27, 0x29FD
     9a6:	dc 01       	movw	r26, r24
     9a8:	8d 91       	ld	r24, X+
     9aa:	9d 91       	ld	r25, X+
     9ac:	0d 90       	ld	r0, X+
     9ae:	bc 91       	ld	r27, X
     9b0:	a0 2d       	mov	r26, r0
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	ea 5f       	subi	r30, 0xFA	; 250
     9b8:	f5 4d       	sbci	r31, 0xD5	; 213
     9ba:	80 83       	st	Z, r24
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	17 c0       	rjmp	.+46     	; 0x9ee <__vector_53+0x1a4>
		}
		else
		niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     9c0:	e0 91 59 2e 	lds	r30, 0x2E59
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 91 fa 29 	lds	r24, 0x29FA
     9ca:	90 91 fb 29 	lds	r25, 0x29FB
     9ce:	a0 91 fc 29 	lds	r26, 0x29FC
     9d2:	b0 91 fd 29 	lds	r27, 0x29FD
     9d6:	dc 01       	movw	r26, r24
     9d8:	8d 91       	ld	r24, X+
     9da:	9d 91       	ld	r25, X+
     9dc:	0d 90       	ld	r0, X+
     9de:	bc 91       	ld	r27, X
     9e0:	a0 2d       	mov	r26, r0
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	ea 5f       	subi	r30, 0xFA	; 250
     9e8:	f5 4d       	sbci	r31, 0xD5	; 213
     9ea:	80 83       	st	Z, r24
     9ec:	91 83       	std	Z+1, r25	; 0x01
		
		niz_counter_niz_1++;
     9ee:	80 91 59 2e 	lds	r24, 0x2E59
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	80 93 59 2e 	sts	0x2E59, r24
		sample_counter_niz_1 = 0;
     9f8:	10 92 58 2e 	sts	0x2E58, r1
	}
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0b be       	out	0x3b, r0	; 59
     a18:	0f 90       	pop	r0
     a1a:	09 be       	out	0x39, r0	; 57
     a1c:	0f 90       	pop	r0
     a1e:	08 be       	out	0x38, r0	; 56
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_58>:
//Serijska komunikacija - USART_E0 - BT_RS232 - MCU
ISR(USARTE0_RXC_vect)
{
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	08 b6       	in	r0, 0x38	; 56
     a36:	0f 92       	push	r0
     a38:	18 be       	out	0x38, r1	; 56
     a3a:	09 b6       	in	r0, 0x39	; 57
     a3c:	0f 92       	push	r0
     a3e:	19 be       	out	0x39, r1	; 57
     a40:	0a b6       	in	r0, 0x3a	; 58
     a42:	0f 92       	push	r0
     a44:	1a be       	out	0x3a, r1	; 58
     a46:	0b b6       	in	r0, 0x3b	; 59
     a48:	0f 92       	push	r0
     a4a:	1b be       	out	0x3b, r1	; 59
     a4c:	4f 92       	push	r4
     a4e:	5f 92       	push	r5
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	28 97       	sbiw	r28, 0x08	; 8
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E0_data);
     a8e:	89 e1       	ldi	r24, 0x19	; 25
     a90:	93 e2       	ldi	r25, 0x23	; 35
     a92:	0e 94 63 34 	call	0x68c6	; 0x68c6 <USART_RXComplete>
	receiveArray[RX_i_E0] = USART_RXBuffer_GetByte(&USART_E0_data);
     a96:	80 91 5b 2e 	lds	r24, 0x2E5B
     a9a:	08 2f       	mov	r16, r24
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	89 e1       	ldi	r24, 0x19	; 25
     aa0:	93 e2       	ldi	r25, 0x23	; 35
     aa2:	0e 94 55 34 	call	0x68aa	; 0x68aa <USART_RXBuffer_GetByte>
     aa6:	f8 01       	movw	r30, r16
     aa8:	e2 59       	subi	r30, 0x92	; 146
     aaa:	f6 4d       	sbci	r31, 0xD6	; 214
     aac:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E0_data, receiveArray[RX_i_E0]);	//echo
	RX_i_E0++;
     aae:	80 91 5b 2e 	lds	r24, 0x2E5B
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	80 93 5b 2e 	sts	0x2E5B, r24
	
	//vremenska zastita
	if (RX_i_E0 >= 1)
     ab8:	80 91 5b 2e 	lds	r24, 0x2E5B
     abc:	88 23       	and	r24, r24
     abe:	19 f0       	breq	.+6      	; 0xac6 <__vector_58+0x9c>
 		proveri_vreme_primanja = 1;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
     ac6:	80 91 6e 29 	lds	r24, 0x296E
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_58+0xa6>
     ace:	b0 c0       	rjmp	.+352    	; 0xc30 <__vector_58+0x206>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
     ad0:	80 91 5b 2e 	lds	r24, 0x2E5B
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	11 f0       	breq	.+4      	; 0xadc <__vector_58+0xb2>
     ad8:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     adc:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
     ae0:	80 91 6e 29 	lds	r24, 0x296E
     ae4:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
     ae8:	60 91 23 2e 	lds	r22, 0x2E23
     aec:	70 91 24 2e 	lds	r23, 0x2E24
     af0:	80 91 25 2e 	lds	r24, 0x2E25
     af4:	90 91 26 2e 	lds	r25, 0x2E26
     af8:	20 91 00 2e 	lds	r18, 0x2E00
     afc:	30 91 01 2e 	lds	r19, 0x2E01
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     b08:	bb 27       	eor	r27, r27
     b0a:	57 fd       	sbrc	r21, 7
     b0c:	ba 95       	dec	r27
     b0e:	a5 2f       	mov	r26, r21
     b10:	94 2f       	mov	r25, r20
     b12:	83 2f       	mov	r24, r19
     b14:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
     b18:	60 91 23 2e 	lds	r22, 0x2E23
     b1c:	70 91 24 2e 	lds	r23, 0x2E24
     b20:	80 91 25 2e 	lds	r24, 0x2E25
     b24:	90 91 26 2e 	lds	r25, 0x2E26
     b28:	20 91 00 2e 	lds	r18, 0x2E00
     b2c:	30 91 01 2e 	lds	r19, 0x2E01
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     b38:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
     b3c:	60 91 02 2a 	lds	r22, 0x2A02
     b40:	70 91 03 2a 	lds	r23, 0x2A03
     b44:	80 91 04 2a 	lds	r24, 0x2A04
     b48:	90 91 05 2a 	lds	r25, 0x2A05
     b4c:	20 91 00 2e 	lds	r18, 0x2E00
     b50:	30 91 01 2e 	lds	r19, 0x2E01
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     b5c:	bb 27       	eor	r27, r27
     b5e:	57 fd       	sbrc	r21, 7
     b60:	ba 95       	dec	r27
     b62:	a5 2f       	mov	r26, r21
     b64:	94 2f       	mov	r25, r20
     b66:	83 2f       	mov	r24, r19
     b68:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
     b6c:	60 91 02 2a 	lds	r22, 0x2A02
     b70:	70 91 03 2a 	lds	r23, 0x2A03
     b74:	80 91 04 2a 	lds	r24, 0x2A04
     b78:	90 91 05 2a 	lds	r25, 0x2A05
     b7c:	20 91 00 2e 	lds	r18, 0x2E00
     b80:	30 91 01 2e 	lds	r19, 0x2E01
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     b8c:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
     b90:	20 91 83 32 	lds	r18, 0x3283
     b94:	30 91 84 32 	lds	r19, 0x3284
     b98:	40 91 85 32 	lds	r20, 0x3285
     b9c:	50 91 86 32 	lds	r21, 0x3286
     ba0:	c0 90 75 32 	lds	r12, 0x3275
     ba4:	d0 90 76 32 	lds	r13, 0x3276
     ba8:	e0 90 77 32 	lds	r14, 0x3277
     bac:	f0 90 78 32 	lds	r15, 0x3278
     bb0:	a8 e6       	ldi	r26, 0x68	; 104
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     bb8:	a7 01       	movw	r20, r14
     bba:	96 01       	movw	r18, r12
     bbc:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     bc0:	bb 27       	eor	r27, r27
     bc2:	57 fd       	sbrc	r21, 7
     bc4:	ba 95       	dec	r27
     bc6:	a5 2f       	mov	r26, r21
     bc8:	94 2f       	mov	r25, r20
     bca:	83 2f       	mov	r24, r19
     bcc:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
     bd0:	20 91 83 32 	lds	r18, 0x3283
     bd4:	30 91 84 32 	lds	r19, 0x3284
     bd8:	40 91 85 32 	lds	r20, 0x3285
     bdc:	50 91 86 32 	lds	r21, 0x3286
     be0:	c0 90 75 32 	lds	r12, 0x3275
     be4:	d0 90 76 32 	lds	r13, 0x3276
     be8:	e0 90 77 32 	lds	r14, 0x3277
     bec:	f0 90 78 32 	lds	r15, 0x3278
     bf0:	a8 e6       	ldi	r26, 0x68	; 104
     bf2:	b1 e0       	ldi	r27, 0x01	; 1
     bf4:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     bf8:	a7 01       	movw	r20, r14
     bfa:	96 01       	movw	r18, r12
     bfc:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     c00:	20 93 e3 28 	sts	0x28E3, r18
// 				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     c08:	f8 01       	movw	r30, r16
     c0a:	e3 52       	subi	r30, 0x23	; 35
     c0c:	f7 4d       	sbci	r31, 0xD7	; 215
     c0e:	60 81       	ld	r22, Z
     c10:	89 e1       	ldi	r24, 0x19	; 25
     c12:	93 e2       	ldi	r25, 0x23	; 35
     c14:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
     c18:	88 23       	and	r24, r24
     c1a:	11 f0       	breq	.+4      	; 0xc20 <__vector_58+0x1f6>
						i++;
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
     c20:	0f 30       	cpi	r16, 0x0F	; 15
     c22:	11 05       	cpc	r17, r1
     c24:	8c f3       	brlt	.-30     	; 0xc08 <__vector_58+0x1de>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
     c26:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
     c2a:	10 92 5b 2e 	sts	0x2E5B, r1
     c2e:	d4 c7       	rjmp	.+4008   	; 0x1bd8 <__vector_58+0x11ae>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
     c30:	80 91 6e 29 	lds	r24, 0x296E
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	09 f0       	breq	.+2      	; 0xc3a <__vector_58+0x210>
     c38:	bf c0       	rjmp	.+382    	; 0xdb8 <__vector_58+0x38e>
	{
		if(RX_i_E0 >= 5)							//stigla je cela poruka	(5 bajtova)
     c3a:	80 91 5b 2e 	lds	r24, 0x2E5B
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	08 f4       	brcc	.+2      	; 0xc44 <__vector_58+0x21a>
     c42:	ca c7       	rjmp	.+3988   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     c44:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
     c48:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
     c4c:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
     c50:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
     c54:	10 92 ae 24 	sts	0x24AE, r1
     c58:	10 92 af 24 	sts	0x24AF, r1
     c5c:	10 92 b0 24 	sts	0x24B0, r1
     c60:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
     c64:	20 91 6f 29 	lds	r18, 0x296F
     c68:	40 91 ae 24 	lds	r20, 0x24AE
     c6c:	50 91 af 24 	lds	r21, 0x24AF
     c70:	60 91 b0 24 	lds	r22, 0x24B0
     c74:	70 91 b1 24 	lds	r23, 0x24B1
     c78:	92 2f       	mov	r25, r18
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	aa 27       	eor	r26, r26
     c7e:	97 fd       	sbrc	r25, 7
     c80:	a0 95       	com	r26
     c82:	ba 2f       	mov	r27, r26
     c84:	84 2b       	or	r24, r20
     c86:	95 2b       	or	r25, r21
     c88:	a6 2b       	or	r26, r22
     c8a:	b7 2b       	or	r27, r23
     c8c:	80 93 ae 24 	sts	0x24AE, r24
     c90:	90 93 af 24 	sts	0x24AF, r25
     c94:	a0 93 b0 24 	sts	0x24B0, r26
     c98:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
     c9c:	20 91 70 29 	lds	r18, 0x2970
     ca0:	80 91 ae 24 	lds	r24, 0x24AE
     ca4:	90 91 af 24 	lds	r25, 0x24AF
     ca8:	a0 91 b0 24 	lds	r26, 0x24B0
     cac:	b0 91 b1 24 	lds	r27, 0x24B1
     cb0:	82 2b       	or	r24, r18
     cb2:	80 93 ae 24 	sts	0x24AE, r24
     cb6:	90 93 af 24 	sts	0x24AF, r25
     cba:	a0 93 b0 24 	sts	0x24B0, r26
     cbe:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
     cc2:	a0 91 00 2e 	lds	r26, 0x2E00
     cc6:	b0 91 01 2e 	lds	r27, 0x2E01
     cca:	20 91 ae 24 	lds	r18, 0x24AE
     cce:	30 91 af 24 	lds	r19, 0x24AF
     cd2:	40 91 b0 24 	lds	r20, 0x24B0
     cd6:	50 91 b1 24 	lds	r21, 0x24B1
     cda:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     cde:	60 93 ae 24 	sts	0x24AE, r22
     ce2:	70 93 af 24 	sts	0x24AF, r23
     ce6:	80 93 b0 24 	sts	0x24B0, r24
     cea:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
     cee:	10 92 0b 2e 	sts	0x2E0B, r1
     cf2:	10 92 0c 2e 	sts	0x2E0C, r1
     cf6:	10 92 0d 2e 	sts	0x2E0D, r1
     cfa:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
     cfe:	20 91 71 29 	lds	r18, 0x2971
     d02:	40 91 0b 2e 	lds	r20, 0x2E0B
     d06:	50 91 0c 2e 	lds	r21, 0x2E0C
     d0a:	60 91 0d 2e 	lds	r22, 0x2E0D
     d0e:	70 91 0e 2e 	lds	r23, 0x2E0E
     d12:	92 2f       	mov	r25, r18
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	aa 27       	eor	r26, r26
     d18:	97 fd       	sbrc	r25, 7
     d1a:	a0 95       	com	r26
     d1c:	ba 2f       	mov	r27, r26
     d1e:	84 2b       	or	r24, r20
     d20:	95 2b       	or	r25, r21
     d22:	a6 2b       	or	r26, r22
     d24:	b7 2b       	or	r27, r23
     d26:	80 93 0b 2e 	sts	0x2E0B, r24
     d2a:	90 93 0c 2e 	sts	0x2E0C, r25
     d2e:	a0 93 0d 2e 	sts	0x2E0D, r26
     d32:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
     d36:	20 91 72 29 	lds	r18, 0x2972
     d3a:	80 91 0b 2e 	lds	r24, 0x2E0B
     d3e:	90 91 0c 2e 	lds	r25, 0x2E0C
     d42:	a0 91 0d 2e 	lds	r26, 0x2E0D
     d46:	b0 91 0e 2e 	lds	r27, 0x2E0E
     d4a:	82 2b       	or	r24, r18
     d4c:	80 93 0b 2e 	sts	0x2E0B, r24
     d50:	90 93 0c 2e 	sts	0x2E0C, r25
     d54:	a0 93 0d 2e 	sts	0x2E0D, r26
     d58:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
     d5c:	a0 91 00 2e 	lds	r26, 0x2E00
     d60:	b0 91 01 2e 	lds	r27, 0x2E01
     d64:	20 91 0b 2e 	lds	r18, 0x2E0B
     d68:	30 91 0c 2e 	lds	r19, 0x2E0C
     d6c:	40 91 0d 2e 	lds	r20, 0x2E0D
     d70:	50 91 0e 2e 	lds	r21, 0x2E0E
     d74:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     d78:	60 93 0b 2e 	sts	0x2E0B, r22
     d7c:	70 93 0c 2e 	sts	0x2E0C, r23
     d80:	80 93 0d 2e 	sts	0x2E0D, r24
     d84:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
     d88:	80 91 6e 29 	lds	r24, 0x296E
     d8c:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     d94:	f8 01       	movw	r30, r16
     d96:	e3 52       	subi	r30, 0x23	; 35
     d98:	f7 4d       	sbci	r31, 0xD7	; 215
     d9a:	60 81       	ld	r22, Z
     d9c:	89 e1       	ldi	r24, 0x19	; 25
     d9e:	93 e2       	ldi	r25, 0x23	; 35
     da0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
				if(byteToBuffer)
     da4:	88 23       	and	r24, r24
     da6:	11 f0       	breq	.+4      	; 0xdac <__vector_58+0x382>
				{
					i++;
     da8:	0f 5f       	subi	r16, 0xFF	; 255
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
     dac:	10 16       	cp	r1, r16
     dae:	11 06       	cpc	r1, r17
     db0:	8c f7       	brge	.-30     	; 0xd94 <__vector_58+0x36a>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E0 = 0;
     db2:	10 92 5b 2e 	sts	0x2E5B, r1
     db6:	10 c7       	rjmp	.+3616   	; 0x1bd8 <__vector_58+0x11ae>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
     db8:	80 91 6e 29 	lds	r24, 0x296E
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <__vector_58+0x398>
     dc0:	e3 c1       	rjmp	.+966    	; 0x1188 <__vector_58+0x75e>
	{
		if(RX_i_E0 >= 11)							//stigla je cela poruka	(11)
     dc2:	80 91 5b 2e 	lds	r24, 0x2E5B
     dc6:	8b 30       	cpi	r24, 0x0B	; 11
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <__vector_58+0x3a2>
     dca:	06 c7       	rjmp	.+3596   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     dcc:	10 92 fb 2d 	sts	0x2DFB, r1
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     dd0:	80 91 6f 29 	lds	r24, 0x296F
     dd4:	8f 3f       	cpi	r24, 0xFF	; 255
     dd6:	29 f4       	brne	.+10     	; 0xde2 <__vector_58+0x3b8>
     dd8:	80 91 70 29 	lds	r24, 0x2970
     ddc:	8f 3f       	cpi	r24, 0xFF	; 255
     dde:	09 f4       	brne	.+2      	; 0xde2 <__vector_58+0x3b8>
     de0:	53 c0       	rjmp	.+166    	; 0xe88 <__vector_58+0x45e>
				{
					//ENABLE
					stop_PID_desni = 0;
     de2:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
     de6:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
     dea:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
     dee:	10 92 ae 24 	sts	0x24AE, r1
     df2:	10 92 af 24 	sts	0x24AF, r1
     df6:	10 92 b0 24 	sts	0x24B0, r1
     dfa:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
     dfe:	20 91 6f 29 	lds	r18, 0x296F
     e02:	40 91 ae 24 	lds	r20, 0x24AE
     e06:	50 91 af 24 	lds	r21, 0x24AF
     e0a:	60 91 b0 24 	lds	r22, 0x24B0
     e0e:	70 91 b1 24 	lds	r23, 0x24B1
     e12:	92 2f       	mov	r25, r18
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	aa 27       	eor	r26, r26
     e18:	97 fd       	sbrc	r25, 7
     e1a:	a0 95       	com	r26
     e1c:	ba 2f       	mov	r27, r26
     e1e:	84 2b       	or	r24, r20
     e20:	95 2b       	or	r25, r21
     e22:	a6 2b       	or	r26, r22
     e24:	b7 2b       	or	r27, r23
     e26:	80 93 ae 24 	sts	0x24AE, r24
     e2a:	90 93 af 24 	sts	0x24AF, r25
     e2e:	a0 93 b0 24 	sts	0x24B0, r26
     e32:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
     e36:	20 91 70 29 	lds	r18, 0x2970
     e3a:	80 91 ae 24 	lds	r24, 0x24AE
     e3e:	90 91 af 24 	lds	r25, 0x24AF
     e42:	a0 91 b0 24 	lds	r26, 0x24B0
     e46:	b0 91 b1 24 	lds	r27, 0x24B1
     e4a:	82 2b       	or	r24, r18
     e4c:	80 93 ae 24 	sts	0x24AE, r24
     e50:	90 93 af 24 	sts	0x24AF, r25
     e54:	a0 93 b0 24 	sts	0x24B0, r26
     e58:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
     e5c:	a0 91 00 2e 	lds	r26, 0x2E00
     e60:	b0 91 01 2e 	lds	r27, 0x2E01
     e64:	20 91 ae 24 	lds	r18, 0x24AE
     e68:	30 91 af 24 	lds	r19, 0x24AF
     e6c:	40 91 b0 24 	lds	r20, 0x24B0
     e70:	50 91 b1 24 	lds	r21, 0x24B1
     e74:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     e78:	60 93 ae 24 	sts	0x24AE, r22
     e7c:	70 93 af 24 	sts	0x24AF, r23
     e80:	80 93 b0 24 	sts	0x24B0, r24
     e84:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     e88:	80 91 71 29 	lds	r24, 0x2971
     e8c:	8f 3f       	cpi	r24, 0xFF	; 255
     e8e:	29 f4       	brne	.+10     	; 0xe9a <__vector_58+0x470>
     e90:	80 91 72 29 	lds	r24, 0x2972
     e94:	8f 3f       	cpi	r24, 0xFF	; 255
     e96:	09 f4       	brne	.+2      	; 0xe9a <__vector_58+0x470>
     e98:	53 c0       	rjmp	.+166    	; 0xf40 <__vector_58+0x516>
				{		
					stop_PID_desni = 0;
     e9a:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
     e9e:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
     ea2:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
     ea6:	10 92 0b 2e 	sts	0x2E0B, r1
     eaa:	10 92 0c 2e 	sts	0x2E0C, r1
     eae:	10 92 0d 2e 	sts	0x2E0D, r1
     eb2:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
     eb6:	20 91 71 29 	lds	r18, 0x2971
     eba:	40 91 0b 2e 	lds	r20, 0x2E0B
     ebe:	50 91 0c 2e 	lds	r21, 0x2E0C
     ec2:	60 91 0d 2e 	lds	r22, 0x2E0D
     ec6:	70 91 0e 2e 	lds	r23, 0x2E0E
     eca:	92 2f       	mov	r25, r18
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	aa 27       	eor	r26, r26
     ed0:	97 fd       	sbrc	r25, 7
     ed2:	a0 95       	com	r26
     ed4:	ba 2f       	mov	r27, r26
     ed6:	84 2b       	or	r24, r20
     ed8:	95 2b       	or	r25, r21
     eda:	a6 2b       	or	r26, r22
     edc:	b7 2b       	or	r27, r23
     ede:	80 93 0b 2e 	sts	0x2E0B, r24
     ee2:	90 93 0c 2e 	sts	0x2E0C, r25
     ee6:	a0 93 0d 2e 	sts	0x2E0D, r26
     eea:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
     eee:	20 91 72 29 	lds	r18, 0x2972
     ef2:	80 91 0b 2e 	lds	r24, 0x2E0B
     ef6:	90 91 0c 2e 	lds	r25, 0x2E0C
     efa:	a0 91 0d 2e 	lds	r26, 0x2E0D
     efe:	b0 91 0e 2e 	lds	r27, 0x2E0E
     f02:	82 2b       	or	r24, r18
     f04:	80 93 0b 2e 	sts	0x2E0B, r24
     f08:	90 93 0c 2e 	sts	0x2E0C, r25
     f0c:	a0 93 0d 2e 	sts	0x2E0D, r26
     f10:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
     f14:	a0 91 00 2e 	lds	r26, 0x2E00
     f18:	b0 91 01 2e 	lds	r27, 0x2E01
     f1c:	20 91 0b 2e 	lds	r18, 0x2E0B
     f20:	30 91 0c 2e 	lds	r19, 0x2E0C
     f24:	40 91 0d 2e 	lds	r20, 0x2E0D
     f28:	50 91 0e 2e 	lds	r21, 0x2E0E
     f2c:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
     f30:	60 93 0b 2e 	sts	0x2E0B, r22
     f34:	70 93 0c 2e 	sts	0x2E0C, r23
     f38:	80 93 0d 2e 	sts	0x2E0D, r24
     f3c:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     f40:	80 91 73 29 	lds	r24, 0x2973
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	29 f4       	brne	.+10     	; 0xf52 <__vector_58+0x528>
     f48:	80 91 74 29 	lds	r24, 0x2974
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__vector_58+0x528>
     f50:	58 c0       	rjmp	.+176    	; 0x1002 <__vector_58+0x5d8>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
     f52:	10 92 00 20 	sts	0x2000, r1
     f56:	10 92 01 20 	sts	0x2001, r1
     f5a:	10 92 02 20 	sts	0x2002, r1
     f5e:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
     f62:	20 91 73 29 	lds	r18, 0x2973
     f66:	40 91 00 20 	lds	r20, 0x2000
     f6a:	50 91 01 20 	lds	r21, 0x2001
     f6e:	60 91 02 20 	lds	r22, 0x2002
     f72:	70 91 03 20 	lds	r23, 0x2003
     f76:	92 2f       	mov	r25, r18
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	aa 27       	eor	r26, r26
     f7c:	97 fd       	sbrc	r25, 7
     f7e:	a0 95       	com	r26
     f80:	ba 2f       	mov	r27, r26
     f82:	84 2b       	or	r24, r20
     f84:	95 2b       	or	r25, r21
     f86:	a6 2b       	or	r26, r22
     f88:	b7 2b       	or	r27, r23
     f8a:	80 93 00 20 	sts	0x2000, r24
     f8e:	90 93 01 20 	sts	0x2001, r25
     f92:	a0 93 02 20 	sts	0x2002, r26
     f96:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
     f9a:	20 91 74 29 	lds	r18, 0x2974
     f9e:	80 91 00 20 	lds	r24, 0x2000
     fa2:	90 91 01 20 	lds	r25, 0x2001
     fa6:	a0 91 02 20 	lds	r26, 0x2002
     faa:	b0 91 03 20 	lds	r27, 0x2003
     fae:	82 2b       	or	r24, r18
     fb0:	80 93 00 20 	sts	0x2000, r24
     fb4:	90 93 01 20 	sts	0x2001, r25
     fb8:	a0 93 02 20 	sts	0x2002, r26
     fbc:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
     fc0:	20 91 00 20 	lds	r18, 0x2000
     fc4:	30 91 01 20 	lds	r19, 0x2001
     fc8:	40 91 02 20 	lds	r20, 0x2002
     fcc:	50 91 03 20 	lds	r21, 0x2003
     fd0:	60 91 75 32 	lds	r22, 0x3275
     fd4:	70 91 76 32 	lds	r23, 0x3276
     fd8:	80 91 77 32 	lds	r24, 0x3277
     fdc:	90 91 78 32 	lds	r25, 0x3278
     fe0:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
     fe4:	28 e6       	ldi	r18, 0x68	; 104
     fe6:	31 e0       	ldi	r19, 0x01	; 1
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
     ff0:	20 93 00 20 	sts	0x2000, r18
     ff4:	30 93 01 20 	sts	0x2001, r19
     ff8:	40 93 02 20 	sts	0x2002, r20
     ffc:	50 93 03 20 	sts	0x2003, r21
    1000:	78 c0       	rjmp	.+240    	; 0x10f2 <__vector_58+0x6c8>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1002:	80 91 75 29 	lds	r24, 0x2975
    1006:	8f 3f       	cpi	r24, 0xFF	; 255
    1008:	29 f4       	brne	.+10     	; 0x1014 <__vector_58+0x5ea>
    100a:	80 91 76 29 	lds	r24, 0x2976
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	09 f4       	brne	.+2      	; 0x1014 <__vector_58+0x5ea>
    1012:	64 c0       	rjmp	.+200    	; 0x10dc <__vector_58+0x6b2>
				{
					teta_cilj_final = 0;
    1014:	10 92 00 20 	sts	0x2000, r1
    1018:	10 92 01 20 	sts	0x2001, r1
    101c:	10 92 02 20 	sts	0x2002, r1
    1020:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    1024:	20 91 75 29 	lds	r18, 0x2975
    1028:	40 91 00 20 	lds	r20, 0x2000
    102c:	50 91 01 20 	lds	r21, 0x2001
    1030:	60 91 02 20 	lds	r22, 0x2002
    1034:	70 91 03 20 	lds	r23, 0x2003
    1038:	92 2f       	mov	r25, r18
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	aa 27       	eor	r26, r26
    103e:	97 fd       	sbrc	r25, 7
    1040:	a0 95       	com	r26
    1042:	ba 2f       	mov	r27, r26
    1044:	84 2b       	or	r24, r20
    1046:	95 2b       	or	r25, r21
    1048:	a6 2b       	or	r26, r22
    104a:	b7 2b       	or	r27, r23
    104c:	80 93 00 20 	sts	0x2000, r24
    1050:	90 93 01 20 	sts	0x2001, r25
    1054:	a0 93 02 20 	sts	0x2002, r26
    1058:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    105c:	20 91 76 29 	lds	r18, 0x2976
    1060:	80 91 00 20 	lds	r24, 0x2000
    1064:	90 91 01 20 	lds	r25, 0x2001
    1068:	a0 91 02 20 	lds	r26, 0x2002
    106c:	b0 91 03 20 	lds	r27, 0x2003
    1070:	82 2b       	or	r24, r18
    1072:	80 93 00 20 	sts	0x2000, r24
    1076:	90 93 01 20 	sts	0x2001, r25
    107a:	a0 93 02 20 	sts	0x2002, r26
    107e:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    1082:	20 91 00 20 	lds	r18, 0x2000
    1086:	30 91 01 20 	lds	r19, 0x2001
    108a:	40 91 02 20 	lds	r20, 0x2002
    108e:	50 91 03 20 	lds	r21, 0x2003
    1092:	60 91 75 32 	lds	r22, 0x3275
    1096:	70 91 76 32 	lds	r23, 0x3276
    109a:	80 91 77 32 	lds	r24, 0x3277
    109e:	90 91 78 32 	lds	r25, 0x3278
    10a2:	c0 90 83 32 	lds	r12, 0x3283
    10a6:	d0 90 84 32 	lds	r13, 0x3284
    10aa:	e0 90 85 32 	lds	r14, 0x3285
    10ae:	f0 90 86 32 	lds	r15, 0x3286
    10b2:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    10b6:	28 e6       	ldi	r18, 0x68	; 104
    10b8:	31 e0       	ldi	r19, 0x01	; 1
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    10c2:	c2 0e       	add	r12, r18
    10c4:	d3 1e       	adc	r13, r19
    10c6:	e4 1e       	adc	r14, r20
    10c8:	f5 1e       	adc	r15, r21
    10ca:	c0 92 00 20 	sts	0x2000, r12
    10ce:	d0 92 01 20 	sts	0x2001, r13
    10d2:	e0 92 02 20 	sts	0x2002, r14
    10d6:	f0 92 03 20 	sts	0x2003, r15
    10da:	0b c0       	rjmp	.+22     	; 0x10f2 <__vector_58+0x6c8>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	9f ef       	ldi	r25, 0xFF	; 255
    10e0:	dc 01       	movw	r26, r24
    10e2:	80 93 00 20 	sts	0x2000, r24
    10e6:	90 93 01 20 	sts	0x2001, r25
    10ea:	a0 93 02 20 	sts	0x2002, r26
    10ee:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    10f2:	80 91 77 29 	lds	r24, 0x2977
    10f6:	8f 3f       	cpi	r24, 0xFF	; 255
    10f8:	c9 f0       	breq	.+50     	; 0x112c <__vector_58+0x702>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    10fa:	80 91 77 29 	lds	r24, 0x2977
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 01       	movw	r18, r24
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	80 93 7f 32 	sts	0x327F, r24
    110e:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    1112:	80 91 7f 32 	lds	r24, 0x327F
    1116:	90 91 80 32 	lds	r25, 0x3280
    111a:	99 23       	and	r25, r25
    111c:	0c f4       	brge	.+2      	; 0x1120 <__vector_58+0x6f6>
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	80 93 61 2e 	sts	0x2E61, r24
    1128:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    112c:	80 91 78 29 	lds	r24, 0x2978
    1130:	8f 3f       	cpi	r24, 0xFF	; 255
    1132:	21 f0       	breq	.+8      	; 0x113c <__vector_58+0x712>
					smer_zadati = receiveArray[10];	
    1134:	80 91 78 29 	lds	r24, 0x2978
    1138:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    113c:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    1140:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    1144:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    1148:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    114c:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    1150:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    1154:	80 91 6e 29 	lds	r24, 0x296E
    1158:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1160:	f8 01       	movw	r30, r16
    1162:	e3 52       	subi	r30, 0x23	; 35
    1164:	f7 4d       	sbci	r31, 0xD7	; 215
    1166:	60 81       	ld	r22, Z
    1168:	89 e1       	ldi	r24, 0x19	; 25
    116a:	93 e2       	ldi	r25, 0x23	; 35
    116c:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1170:	88 23       	and	r24, r24
    1172:	11 f0       	breq	.+4      	; 0x1178 <__vector_58+0x74e>
					{
						i++;
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    1178:	10 16       	cp	r1, r16
    117a:	11 06       	cpc	r1, r17
    117c:	8c f7       	brge	.-30     	; 0x1160 <__vector_58+0x736>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    117e:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda	
    1182:	10 92 5b 2e 	sts	0x2E5B, r1
    1186:	28 c5       	rjmp	.+2640   	; 0x1bd8 <__vector_58+0x11ae>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    1188:	80 91 6e 29 	lds	r24, 0x296E
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	09 f0       	breq	.+2      	; 0x1192 <__vector_58+0x768>
    1190:	95 c1       	rjmp	.+810    	; 0x14bc <__vector_58+0xa92>
	{
		if(RX_i_E0 >= 5)								//stigla je cela poruka
    1192:	80 91 5b 2e 	lds	r24, 0x2E5B
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	08 f4       	brcc	.+2      	; 0x119c <__vector_58+0x772>
    119a:	1e c5       	rjmp	.+2620   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    119c:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    11a0:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    11a4:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    11a8:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    11ac:	10 92 c5 28 	sts	0x28C5, r1
    11b0:	10 92 c6 28 	sts	0x28C6, r1
    11b4:	10 92 c7 28 	sts	0x28C7, r1
    11b8:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    11bc:	20 91 6f 29 	lds	r18, 0x296F
    11c0:	40 91 c5 28 	lds	r20, 0x28C5
    11c4:	50 91 c6 28 	lds	r21, 0x28C6
    11c8:	60 91 c7 28 	lds	r22, 0x28C7
    11cc:	70 91 c8 28 	lds	r23, 0x28C8
    11d0:	92 2f       	mov	r25, r18
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	aa 27       	eor	r26, r26
    11d6:	97 fd       	sbrc	r25, 7
    11d8:	a0 95       	com	r26
    11da:	ba 2f       	mov	r27, r26
    11dc:	84 2b       	or	r24, r20
    11de:	95 2b       	or	r25, r21
    11e0:	a6 2b       	or	r26, r22
    11e2:	b7 2b       	or	r27, r23
    11e4:	80 93 c5 28 	sts	0x28C5, r24
    11e8:	90 93 c6 28 	sts	0x28C6, r25
    11ec:	a0 93 c7 28 	sts	0x28C7, r26
    11f0:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    11f4:	20 91 70 29 	lds	r18, 0x2970
    11f8:	80 91 c5 28 	lds	r24, 0x28C5
    11fc:	90 91 c6 28 	lds	r25, 0x28C6
    1200:	a0 91 c7 28 	lds	r26, 0x28C7
    1204:	b0 91 c8 28 	lds	r27, 0x28C8
    1208:	82 2b       	or	r24, r18
    120a:	80 93 c5 28 	sts	0x28C5, r24
    120e:	90 93 c6 28 	sts	0x28C6, r25
    1212:	a0 93 c7 28 	sts	0x28C7, r26
    1216:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    121a:	a0 91 00 2e 	lds	r26, 0x2E00
    121e:	b0 91 01 2e 	lds	r27, 0x2E01
    1222:	20 91 c5 28 	lds	r18, 0x28C5
    1226:	30 91 c6 28 	lds	r19, 0x28C6
    122a:	40 91 c7 28 	lds	r20, 0x28C7
    122e:	50 91 c8 28 	lds	r21, 0x28C8
    1232:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1236:	60 93 c5 28 	sts	0x28C5, r22
    123a:	70 93 c6 28 	sts	0x28C6, r23
    123e:	80 93 c7 28 	sts	0x28C7, r24
    1242:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    1246:	10 92 16 2e 	sts	0x2E16, r1
    124a:	10 92 17 2e 	sts	0x2E17, r1
    124e:	10 92 18 2e 	sts	0x2E18, r1
    1252:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    1256:	20 91 71 29 	lds	r18, 0x2971
    125a:	40 91 16 2e 	lds	r20, 0x2E16
    125e:	50 91 17 2e 	lds	r21, 0x2E17
    1262:	60 91 18 2e 	lds	r22, 0x2E18
    1266:	70 91 19 2e 	lds	r23, 0x2E19
    126a:	92 2f       	mov	r25, r18
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	aa 27       	eor	r26, r26
    1270:	97 fd       	sbrc	r25, 7
    1272:	a0 95       	com	r26
    1274:	ba 2f       	mov	r27, r26
    1276:	84 2b       	or	r24, r20
    1278:	95 2b       	or	r25, r21
    127a:	a6 2b       	or	r26, r22
    127c:	b7 2b       	or	r27, r23
    127e:	80 93 16 2e 	sts	0x2E16, r24
    1282:	90 93 17 2e 	sts	0x2E17, r25
    1286:	a0 93 18 2e 	sts	0x2E18, r26
    128a:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    128e:	20 91 72 29 	lds	r18, 0x2972
    1292:	80 91 16 2e 	lds	r24, 0x2E16
    1296:	90 91 17 2e 	lds	r25, 0x2E17
    129a:	a0 91 18 2e 	lds	r26, 0x2E18
    129e:	b0 91 19 2e 	lds	r27, 0x2E19
    12a2:	82 2b       	or	r24, r18
    12a4:	80 93 16 2e 	sts	0x2E16, r24
    12a8:	90 93 17 2e 	sts	0x2E17, r25
    12ac:	a0 93 18 2e 	sts	0x2E18, r26
    12b0:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    12b4:	20 91 16 2e 	lds	r18, 0x2E16
    12b8:	30 91 17 2e 	lds	r19, 0x2E17
    12bc:	40 91 18 2e 	lds	r20, 0x2E18
    12c0:	50 91 19 2e 	lds	r21, 0x2E19
    12c4:	60 91 75 32 	lds	r22, 0x3275
    12c8:	70 91 76 32 	lds	r23, 0x3276
    12cc:	80 91 77 32 	lds	r24, 0x3277
    12d0:	90 91 78 32 	lds	r25, 0x3278
    12d4:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    12d8:	28 e6       	ldi	r18, 0x68	; 104
    12da:	31 e0       	ldi	r19, 0x01	; 1
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    12e4:	20 93 16 2e 	sts	0x2E16, r18
    12e8:	30 93 17 2e 	sts	0x2E17, r19
    12ec:	40 93 18 2e 	sts	0x2E18, r20
    12f0:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    12f4:	40 91 83 32 	lds	r20, 0x3283
    12f8:	50 91 84 32 	lds	r21, 0x3284
    12fc:	60 91 85 32 	lds	r22, 0x3285
    1300:	70 91 86 32 	lds	r23, 0x3286
    1304:	80 91 16 2e 	lds	r24, 0x2E16
    1308:	90 91 17 2e 	lds	r25, 0x2E17
    130c:	a0 91 18 2e 	lds	r26, 0x2E18
    1310:	b0 91 19 2e 	lds	r27, 0x2E19
    1314:	c0 90 cf 28 	lds	r12, 0x28CF
    1318:	d0 90 d0 28 	lds	r13, 0x28D0
    131c:	e0 90 d1 28 	lds	r14, 0x28D1
    1320:	f0 90 d2 28 	lds	r15, 0x28D2
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    1324:	40 90 83 32 	lds	r4, 0x3283
    1328:	50 90 84 32 	lds	r5, 0x3284
    132c:	60 90 85 32 	lds	r6, 0x3285
    1330:	70 90 86 32 	lds	r7, 0x3286
    1334:	00 91 16 2e 	lds	r16, 0x2E16
    1338:	10 91 17 2e 	lds	r17, 0x2E17
    133c:	20 91 18 2e 	lds	r18, 0x2E18
    1340:	30 91 19 2e 	lds	r19, 0x2E19
    1344:	09 83       	std	Y+1, r16	; 0x01
    1346:	1a 83       	std	Y+2, r17	; 0x02
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	80 90 cf 28 	lds	r8, 0x28CF
    1350:	90 90 d0 28 	lds	r9, 0x28D0
    1354:	a0 90 d1 28 	lds	r10, 0x28D1
    1358:	b0 90 d2 28 	lds	r11, 0x28D2
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    135c:	8a 01       	movw	r16, r20
    135e:	9b 01       	movw	r18, r22
    1360:	08 0f       	add	r16, r24
    1362:	19 1f       	adc	r17, r25
    1364:	2a 1f       	adc	r18, r26
    1366:	3b 1f       	adc	r19, r27
    1368:	c9 01       	movw	r24, r18
    136a:	b8 01       	movw	r22, r16
    136c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    1370:	6d 83       	std	Y+5, r22	; 0x05
    1372:	7e 83       	std	Y+6, r23	; 0x06
    1374:	8f 83       	std	Y+7, r24	; 0x07
    1376:	98 87       	std	Y+8, r25	; 0x08
    1378:	c7 01       	movw	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	6d 81       	ldd	r22, Y+5	; 0x05
    1386:	7e 81       	ldd	r23, Y+6	; 0x06
    1388:	8f 81       	ldd	r24, Y+7	; 0x07
    138a:	98 85       	ldd	r25, Y+8	; 0x08
    138c:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    1390:	2b ed       	ldi	r18, 0xDB	; 219
    1392:	3f e0       	ldi	r19, 0x0F	; 15
    1394:	49 e4       	ldi	r20, 0x49	; 73
    1396:	50 e4       	ldi	r21, 0x40	; 64
    1398:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    139c:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <cos>
    13a0:	6b 01       	movw	r12, r22
    13a2:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    13a4:	69 81       	ldd	r22, Y+1	; 0x01
    13a6:	7a 81       	ldd	r23, Y+2	; 0x02
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	64 0d       	add	r22, r4
    13ae:	75 1d       	adc	r23, r5
    13b0:	86 1d       	adc	r24, r6
    13b2:	97 1d       	adc	r25, r7
    13b4:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    13b8:	2b 01       	movw	r4, r22
    13ba:	3c 01       	movw	r6, r24
    13bc:	c5 01       	movw	r24, r10
    13be:	b4 01       	movw	r22, r8
    13c0:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	c3 01       	movw	r24, r6
    13ca:	b2 01       	movw	r22, r4
    13cc:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    13d0:	2b ed       	ldi	r18, 0xDB	; 219
    13d2:	3f e0       	ldi	r19, 0x0F	; 15
    13d4:	49 e4       	ldi	r20, 0x49	; 73
    13d6:	50 e4       	ldi	r21, 0x40	; 64
    13d8:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    13dc:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <sin>
    13e0:	4b 01       	movw	r8, r22
    13e2:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    13e4:	60 91 c5 28 	lds	r22, 0x28C5
    13e8:	70 91 c6 28 	lds	r23, 0x28C6
    13ec:	80 91 c7 28 	lds	r24, 0x28C7
    13f0:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    13f4:	40 90 c5 28 	lds	r4, 0x28C5
    13f8:	50 90 c6 28 	lds	r5, 0x28C6
    13fc:	60 90 c7 28 	lds	r6, 0x28C7
    1400:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    1404:	20 91 23 2e 	lds	r18, 0x2E23
    1408:	30 91 24 2e 	lds	r19, 0x2E24
    140c:	40 91 25 2e 	lds	r20, 0x2E25
    1410:	50 91 26 2e 	lds	r21, 0x2E26
    1414:	29 83       	std	Y+1, r18	; 0x01
    1416:	3a 83       	std	Y+2, r19	; 0x02
    1418:	4b 83       	std	Y+3, r20	; 0x03
    141a:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    141c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    1420:	a7 01       	movw	r20, r14
    1422:	96 01       	movw	r18, r12
    1424:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    1428:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    142c:	09 81       	ldd	r16, Y+1	; 0x01
    142e:	1a 81       	ldd	r17, Y+2	; 0x02
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	06 0f       	add	r16, r22
    1436:	17 1f       	adc	r17, r23
    1438:	28 1f       	adc	r18, r24
    143a:	39 1f       	adc	r19, r25
    143c:	00 93 ae 24 	sts	0x24AE, r16
    1440:	10 93 af 24 	sts	0x24AF, r17
    1444:	20 93 b0 24 	sts	0x24B0, r18
    1448:	30 93 b1 24 	sts	0x24B1, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    144c:	c0 90 02 2a 	lds	r12, 0x2A02
    1450:	d0 90 03 2a 	lds	r13, 0x2A03
    1454:	e0 90 04 2a 	lds	r14, 0x2A04
    1458:	f0 90 05 2a 	lds	r15, 0x2A05
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    145c:	c3 01       	movw	r24, r6
    145e:	b2 01       	movw	r22, r4
    1460:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    1464:	a5 01       	movw	r20, r10
    1466:	94 01       	movw	r18, r8
    1468:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    146c:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    1470:	c6 0e       	add	r12, r22
    1472:	d7 1e       	adc	r13, r23
    1474:	e8 1e       	adc	r14, r24
    1476:	f9 1e       	adc	r15, r25
    1478:	c0 92 0b 2e 	sts	0x2E0B, r12
    147c:	d0 92 0c 2e 	sts	0x2E0C, r13
    1480:	e0 92 0d 2e 	sts	0x2E0D, r14
    1484:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1488:	80 91 6e 29 	lds	r24, 0x296E
    148c:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1494:	f8 01       	movw	r30, r16
    1496:	e3 52       	subi	r30, 0x23	; 35
    1498:	f7 4d       	sbci	r31, 0xD7	; 215
    149a:	60 81       	ld	r22, Z
    149c:	89 e1       	ldi	r24, 0x19	; 25
    149e:	93 e2       	ldi	r25, 0x23	; 35
    14a0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    14a4:	88 23       	and	r24, r24
    14a6:	11 f0       	breq	.+4      	; 0x14ac <__vector_58+0xa82>
					{
						i++;
    14a8:	0f 5f       	subi	r16, 0xFF	; 255
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    14ac:	10 16       	cp	r1, r16
    14ae:	11 06       	cpc	r1, r17
    14b0:	8c f7       	brge	.-30     	; 0x1494 <__vector_58+0xa6a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    14b2:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    14b6:	10 92 5b 2e 	sts	0x2E5B, r1
    14ba:	8e c3       	rjmp	.+1820   	; 0x1bd8 <__vector_58+0x11ae>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    14bc:	80 91 6e 29 	lds	r24, 0x296E
    14c0:	85 30       	cpi	r24, 0x05	; 5
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <__vector_58+0xa9c>
    14c4:	6e c0       	rjmp	.+220    	; 0x15a2 <__vector_58+0xb78>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    14c6:	80 91 5b 2e 	lds	r24, 0x2E5B
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <__vector_58+0xaa6>
    14ce:	84 c3       	rjmp	.+1800   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    14d0:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    14da:	80 91 6f 29 	lds	r24, 0x296F
    14de:	88 23       	and	r24, r24
    14e0:	8c f4       	brge	.+34     	; 0x1504 <__vector_58+0xada>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    14e2:	80 91 6f 29 	lds	r24, 0x296F
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 01       	movw	r18, r24
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	80 58       	subi	r24, 0x80	; 128
    14f8:	92 40       	sbci	r25, 0x02	; 2
    14fa:	80 93 7b 2e 	sts	0x2E7B, r24
    14fe:	90 93 7c 2e 	sts	0x2E7C, r25
    1502:	10 c0       	rjmp	.+32     	; 0x1524 <__vector_58+0xafa>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    1504:	80 91 6f 29 	lds	r24, 0x296F
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 01       	movw	r18, r24
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	80 58       	subi	r24, 0x80	; 128
    151a:	92 40       	sbci	r25, 0x02	; 2
    151c:	80 93 7b 2e 	sts	0x2E7B, r24
    1520:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    1524:	80 91 70 29 	lds	r24, 0x2970
    1528:	88 23       	and	r24, r24
    152a:	8c f4       	brge	.+34     	; 0x154e <__vector_58+0xb24>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    152c:	80 91 70 29 	lds	r24, 0x2970
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c 01       	movw	r18, r24
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	80 58       	subi	r24, 0x80	; 128
    1542:	92 40       	sbci	r25, 0x02	; 2
    1544:	80 93 79 2e 	sts	0x2E79, r24
    1548:	90 93 7a 2e 	sts	0x2E7A, r25
    154c:	10 c0       	rjmp	.+32     	; 0x156e <__vector_58+0xb44>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    154e:	80 91 70 29 	lds	r24, 0x2970
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c 01       	movw	r18, r24
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	80 58       	subi	r24, 0x80	; 128
    1564:	92 40       	sbci	r25, 0x02	; 2
    1566:	80 93 79 2e 	sts	0x2E79, r24
    156a:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    156e:	80 91 6e 29 	lds	r24, 0x296E
    1572:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    1576:	00 e0       	ldi	r16, 0x00	; 0
    1578:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    157a:	f8 01       	movw	r30, r16
    157c:	e3 52       	subi	r30, 0x23	; 35
    157e:	f7 4d       	sbci	r31, 0xD7	; 215
    1580:	60 81       	ld	r22, Z
    1582:	89 e1       	ldi	r24, 0x19	; 25
    1584:	93 e2       	ldi	r25, 0x23	; 35
    1586:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <__vector_58+0xb68>
					{
						i++;
    158e:	0f 5f       	subi	r16, 0xFF	; 255
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1592:	10 16       	cp	r1, r16
    1594:	11 06       	cpc	r1, r17
    1596:	8c f7       	brge	.-30     	; 0x157a <__vector_58+0xb50>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1598:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    159c:	10 92 5b 2e 	sts	0x2E5B, r1
    15a0:	1b c3       	rjmp	.+1590   	; 0x1bd8 <__vector_58+0x11ae>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    15a2:	80 91 6e 29 	lds	r24, 0x296E
    15a6:	86 30       	cpi	r24, 0x06	; 6
    15a8:	09 f0       	breq	.+2      	; 0x15ac <__vector_58+0xb82>
    15aa:	56 c0       	rjmp	.+172    	; 0x1658 <__vector_58+0xc2e>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    15ac:	80 91 5b 2e 	lds	r24, 0x2E5B
    15b0:	87 30       	cpi	r24, 0x07	; 7
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <__vector_58+0xb8c>
    15b4:	11 c3       	rjmp	.+1570   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    15b6:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    15ba:	e0 e4       	ldi	r30, 0x40	; 64
    15bc:	f6 e0       	ldi	r31, 0x06	; 6
    15be:	94 81       	ldd	r25, Z+4	; 0x04
    15c0:	4f e6       	ldi	r20, 0x6F	; 111
    15c2:	59 e2       	ldi	r21, 0x29	; 41
    15c4:	da 01       	movw	r26, r20
    15c6:	8c 91       	ld	r24, X
    15c8:	60 e7       	ldi	r22, 0x70	; 112
    15ca:	79 e2       	ldi	r23, 0x29	; 41
    15cc:	db 01       	movw	r26, r22
    15ce:	2c 91       	ld	r18, X
    15d0:	82 23       	and	r24, r18
    15d2:	89 2b       	or	r24, r25
    15d4:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    15d6:	94 81       	ldd	r25, Z+4	; 0x04
    15d8:	da 01       	movw	r26, r20
    15da:	8c 91       	ld	r24, X
    15dc:	db 01       	movw	r26, r22
    15de:	2c 91       	ld	r18, X
    15e0:	82 27       	eor	r24, r18
    15e2:	80 95       	com	r24
    15e4:	89 23       	and	r24, r25
    15e6:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    15e8:	80 91 71 29 	lds	r24, 0x2971
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	88 58       	subi	r24, 0x88	; 136
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	e0 e0       	ldi	r30, 0x00	; 0
    15f4:	fb e0       	ldi	r31, 0x0B	; 11
    15f6:	80 a7       	std	Z+40, r24	; 0x28
    15f8:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    15fa:	80 91 72 29 	lds	r24, 0x2972
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	88 58       	subi	r24, 0x88	; 136
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	82 a7       	std	Z+42, r24	; 0x2a
    1606:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    1608:	80 91 73 29 	lds	r24, 0x2973
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	88 58       	subi	r24, 0x88	; 136
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	84 a7       	std	Z+44, r24	; 0x2c
    1614:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    1616:	80 91 74 29 	lds	r24, 0x2974
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	88 58       	subi	r24, 0x88	; 136
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	86 a7       	std	Z+46, r24	; 0x2e
    1622:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1624:	80 91 6e 29 	lds	r24, 0x296E
    1628:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    162c:	00 e0       	ldi	r16, 0x00	; 0
    162e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1630:	f8 01       	movw	r30, r16
    1632:	e3 52       	subi	r30, 0x23	; 35
    1634:	f7 4d       	sbci	r31, 0xD7	; 215
    1636:	60 81       	ld	r22, Z
    1638:	89 e1       	ldi	r24, 0x19	; 25
    163a:	93 e2       	ldi	r25, 0x23	; 35
    163c:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1640:	88 23       	and	r24, r24
    1642:	11 f0       	breq	.+4      	; 0x1648 <__vector_58+0xc1e>
					{
						i++;
    1644:	0f 5f       	subi	r16, 0xFF	; 255
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1648:	10 16       	cp	r1, r16
    164a:	11 06       	cpc	r1, r17
    164c:	8c f7       	brge	.-30     	; 0x1630 <__vector_58+0xc06>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    164e:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    1652:	10 92 5b 2e 	sts	0x2E5B, r1
    1656:	c0 c2       	rjmp	.+1408   	; 0x1bd8 <__vector_58+0x11ae>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    1658:	80 91 6e 29 	lds	r24, 0x296E
    165c:	87 30       	cpi	r24, 0x07	; 7
    165e:	09 f0       	breq	.+2      	; 0x1662 <__vector_58+0xc38>
    1660:	7d c1       	rjmp	.+762    	; 0x195c <__vector_58+0xf32>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    1662:	80 91 5b 2e 	lds	r24, 0x2E5B
    1666:	87 30       	cpi	r24, 0x07	; 7
    1668:	08 f4       	brcc	.+2      	; 0x166c <__vector_58+0xc42>
    166a:	b6 c2       	rjmp	.+1388   	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    166c:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1670:	80 91 6f 29 	lds	r24, 0x296F
    1674:	8f 3f       	cpi	r24, 0xFF	; 255
    1676:	29 f4       	brne	.+10     	; 0x1682 <__vector_58+0xc58>
    1678:	80 91 70 29 	lds	r24, 0x2970
    167c:	8f 3f       	cpi	r24, 0xFF	; 255
    167e:	09 f4       	brne	.+2      	; 0x1682 <__vector_58+0xc58>
    1680:	6d c0       	rjmp	.+218    	; 0x175c <__vector_58+0xd32>
				{
					X_pos = 0;
    1682:	10 92 23 2e 	sts	0x2E23, r1
    1686:	10 92 24 2e 	sts	0x2E24, r1
    168a:	10 92 25 2e 	sts	0x2E25, r1
    168e:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    1692:	20 91 6f 29 	lds	r18, 0x296F
    1696:	40 91 23 2e 	lds	r20, 0x2E23
    169a:	50 91 24 2e 	lds	r21, 0x2E24
    169e:	60 91 25 2e 	lds	r22, 0x2E25
    16a2:	70 91 26 2e 	lds	r23, 0x2E26
    16a6:	92 2f       	mov	r25, r18
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	aa 27       	eor	r26, r26
    16ac:	97 fd       	sbrc	r25, 7
    16ae:	a0 95       	com	r26
    16b0:	ba 2f       	mov	r27, r26
    16b2:	84 2b       	or	r24, r20
    16b4:	95 2b       	or	r25, r21
    16b6:	a6 2b       	or	r26, r22
    16b8:	b7 2b       	or	r27, r23
    16ba:	80 93 23 2e 	sts	0x2E23, r24
    16be:	90 93 24 2e 	sts	0x2E24, r25
    16c2:	a0 93 25 2e 	sts	0x2E25, r26
    16c6:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    16ca:	20 91 70 29 	lds	r18, 0x2970
    16ce:	80 91 23 2e 	lds	r24, 0x2E23
    16d2:	90 91 24 2e 	lds	r25, 0x2E24
    16d6:	a0 91 25 2e 	lds	r26, 0x2E25
    16da:	b0 91 26 2e 	lds	r27, 0x2E26
    16de:	82 2b       	or	r24, r18
    16e0:	80 93 23 2e 	sts	0x2E23, r24
    16e4:	90 93 24 2e 	sts	0x2E24, r25
    16e8:	a0 93 25 2e 	sts	0x2E25, r26
    16ec:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    16f0:	a0 91 00 2e 	lds	r26, 0x2E00
    16f4:	b0 91 01 2e 	lds	r27, 0x2E01
    16f8:	20 91 23 2e 	lds	r18, 0x2E23
    16fc:	30 91 24 2e 	lds	r19, 0x2E24
    1700:	40 91 25 2e 	lds	r20, 0x2E25
    1704:	50 91 26 2e 	lds	r21, 0x2E26
    1708:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    170c:	60 93 23 2e 	sts	0x2E23, r22
    1710:	70 93 24 2e 	sts	0x2E24, r23
    1714:	80 93 25 2e 	sts	0x2E25, r24
    1718:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    171c:	80 91 23 2e 	lds	r24, 0x2E23
    1720:	90 91 24 2e 	lds	r25, 0x2E24
    1724:	a0 91 25 2e 	lds	r26, 0x2E25
    1728:	b0 91 26 2e 	lds	r27, 0x2E26
    172c:	80 93 ae 24 	sts	0x24AE, r24
    1730:	90 93 af 24 	sts	0x24AF, r25
    1734:	a0 93 b0 24 	sts	0x24B0, r26
    1738:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    173c:	80 91 23 2e 	lds	r24, 0x2E23
    1740:	90 91 24 2e 	lds	r25, 0x2E24
    1744:	a0 91 25 2e 	lds	r26, 0x2E25
    1748:	b0 91 26 2e 	lds	r27, 0x2E26
    174c:	80 93 31 2e 	sts	0x2E31, r24
    1750:	90 93 32 2e 	sts	0x2E32, r25
    1754:	a0 93 33 2e 	sts	0x2E33, r26
    1758:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    175c:	80 91 71 29 	lds	r24, 0x2971
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	29 f4       	brne	.+10     	; 0x176e <__vector_58+0xd44>
    1764:	80 91 72 29 	lds	r24, 0x2972
    1768:	8f 3f       	cpi	r24, 0xFF	; 255
    176a:	09 f4       	brne	.+2      	; 0x176e <__vector_58+0xd44>
    176c:	6d c0       	rjmp	.+218    	; 0x1848 <__vector_58+0xe1e>
				{
					Y_pos = 0;
    176e:	10 92 02 2a 	sts	0x2A02, r1
    1772:	10 92 03 2a 	sts	0x2A03, r1
    1776:	10 92 04 2a 	sts	0x2A04, r1
    177a:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    177e:	20 91 71 29 	lds	r18, 0x2971
    1782:	40 91 02 2a 	lds	r20, 0x2A02
    1786:	50 91 03 2a 	lds	r21, 0x2A03
    178a:	60 91 04 2a 	lds	r22, 0x2A04
    178e:	70 91 05 2a 	lds	r23, 0x2A05
    1792:	92 2f       	mov	r25, r18
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	aa 27       	eor	r26, r26
    1798:	97 fd       	sbrc	r25, 7
    179a:	a0 95       	com	r26
    179c:	ba 2f       	mov	r27, r26
    179e:	84 2b       	or	r24, r20
    17a0:	95 2b       	or	r25, r21
    17a2:	a6 2b       	or	r26, r22
    17a4:	b7 2b       	or	r27, r23
    17a6:	80 93 02 2a 	sts	0x2A02, r24
    17aa:	90 93 03 2a 	sts	0x2A03, r25
    17ae:	a0 93 04 2a 	sts	0x2A04, r26
    17b2:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    17b6:	20 91 72 29 	lds	r18, 0x2972
    17ba:	80 91 02 2a 	lds	r24, 0x2A02
    17be:	90 91 03 2a 	lds	r25, 0x2A03
    17c2:	a0 91 04 2a 	lds	r26, 0x2A04
    17c6:	b0 91 05 2a 	lds	r27, 0x2A05
    17ca:	82 2b       	or	r24, r18
    17cc:	80 93 02 2a 	sts	0x2A02, r24
    17d0:	90 93 03 2a 	sts	0x2A03, r25
    17d4:	a0 93 04 2a 	sts	0x2A04, r26
    17d8:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_pos * scale_factor_for_mm;
    17dc:	a0 91 00 2e 	lds	r26, 0x2E00
    17e0:	b0 91 01 2e 	lds	r27, 0x2E01
    17e4:	20 91 02 2a 	lds	r18, 0x2A02
    17e8:	30 91 03 2a 	lds	r19, 0x2A03
    17ec:	40 91 04 2a 	lds	r20, 0x2A04
    17f0:	50 91 05 2a 	lds	r21, 0x2A05
    17f4:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    17f8:	60 93 02 2a 	sts	0x2A02, r22
    17fc:	70 93 03 2a 	sts	0x2A03, r23
    1800:	80 93 04 2a 	sts	0x2A04, r24
    1804:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    1808:	80 91 02 2a 	lds	r24, 0x2A02
    180c:	90 91 03 2a 	lds	r25, 0x2A03
    1810:	a0 91 04 2a 	lds	r26, 0x2A04
    1814:	b0 91 05 2a 	lds	r27, 0x2A05
    1818:	80 93 0b 2e 	sts	0x2E0B, r24
    181c:	90 93 0c 2e 	sts	0x2E0C, r25
    1820:	a0 93 0d 2e 	sts	0x2E0D, r26
    1824:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    1828:	80 91 02 2a 	lds	r24, 0x2A02
    182c:	90 91 03 2a 	lds	r25, 0x2A03
    1830:	a0 91 04 2a 	lds	r26, 0x2A04
    1834:	b0 91 05 2a 	lds	r27, 0x2A05
    1838:	80 93 70 2e 	sts	0x2E70, r24
    183c:	90 93 71 2e 	sts	0x2E71, r25
    1840:	a0 93 72 2e 	sts	0x2E72, r26
    1844:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1848:	80 91 73 29 	lds	r24, 0x2973
    184c:	8f 3f       	cpi	r24, 0xFF	; 255
    184e:	29 f4       	brne	.+10     	; 0x185a <__vector_58+0xe30>
    1850:	80 91 74 29 	lds	r24, 0x2974
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	09 f4       	brne	.+2      	; 0x185a <__vector_58+0xe30>
    1858:	67 c0       	rjmp	.+206    	; 0x1928 <__vector_58+0xefe>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    185a:	10 92 83 32 	sts	0x3283, r1
    185e:	10 92 84 32 	sts	0x3284, r1
    1862:	10 92 85 32 	sts	0x3285, r1
    1866:	10 92 86 32 	sts	0x3286, r1
					teta |= ((int)receiveArray[5]) << 8;
    186a:	20 91 73 29 	lds	r18, 0x2973
    186e:	40 91 83 32 	lds	r20, 0x3283
    1872:	50 91 84 32 	lds	r21, 0x3284
    1876:	60 91 85 32 	lds	r22, 0x3285
    187a:	70 91 86 32 	lds	r23, 0x3286
    187e:	92 2f       	mov	r25, r18
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	aa 27       	eor	r26, r26
    1884:	97 fd       	sbrc	r25, 7
    1886:	a0 95       	com	r26
    1888:	ba 2f       	mov	r27, r26
    188a:	84 2b       	or	r24, r20
    188c:	95 2b       	or	r25, r21
    188e:	a6 2b       	or	r26, r22
    1890:	b7 2b       	or	r27, r23
    1892:	80 93 83 32 	sts	0x3283, r24
    1896:	90 93 84 32 	sts	0x3284, r25
    189a:	a0 93 85 32 	sts	0x3285, r26
    189e:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    18a2:	20 91 74 29 	lds	r18, 0x2974
    18a6:	80 91 83 32 	lds	r24, 0x3283
    18aa:	90 91 84 32 	lds	r25, 0x3284
    18ae:	a0 91 85 32 	lds	r26, 0x3285
    18b2:	b0 91 86 32 	lds	r27, 0x3286
    18b6:	82 2b       	or	r24, r18
    18b8:	80 93 83 32 	sts	0x3283, r24
    18bc:	90 93 84 32 	sts	0x3284, r25
    18c0:	a0 93 85 32 	sts	0x3285, r26
    18c4:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    18c8:	20 91 83 32 	lds	r18, 0x3283
    18cc:	30 91 84 32 	lds	r19, 0x3284
    18d0:	40 91 85 32 	lds	r20, 0x3285
    18d4:	50 91 86 32 	lds	r21, 0x3286
    18d8:	60 91 75 32 	lds	r22, 0x3275
    18dc:	70 91 76 32 	lds	r23, 0x3276
    18e0:	80 91 77 32 	lds	r24, 0x3277
    18e4:	90 91 78 32 	lds	r25, 0x3278
    18e8:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    18ec:	28 e6       	ldi	r18, 0x68	; 104
    18ee:	31 e0       	ldi	r19, 0x01	; 1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    18f8:	20 93 83 32 	sts	0x3283, r18
    18fc:	30 93 84 32 	sts	0x3284, r19
    1900:	40 93 85 32 	sts	0x3285, r20
    1904:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    1908:	80 91 83 32 	lds	r24, 0x3283
    190c:	90 91 84 32 	lds	r25, 0x3284
    1910:	a0 91 85 32 	lds	r26, 0x3285
    1914:	b0 91 86 32 	lds	r27, 0x3286
    1918:	80 93 cc 24 	sts	0x24CC, r24
    191c:	90 93 cd 24 	sts	0x24CD, r25
    1920:	a0 93 ce 24 	sts	0x24CE, r26
    1924:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1928:	80 91 6e 29 	lds	r24, 0x296E
    192c:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    1930:	00 e0       	ldi	r16, 0x00	; 0
    1932:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1934:	f8 01       	movw	r30, r16
    1936:	e3 52       	subi	r30, 0x23	; 35
    1938:	f7 4d       	sbci	r31, 0xD7	; 215
    193a:	60 81       	ld	r22, Z
    193c:	89 e1       	ldi	r24, 0x19	; 25
    193e:	93 e2       	ldi	r25, 0x23	; 35
    1940:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1944:	88 23       	and	r24, r24
    1946:	11 f0       	breq	.+4      	; 0x194c <__vector_58+0xf22>
					{
						i++;
    1948:	0f 5f       	subi	r16, 0xFF	; 255
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    194c:	10 16       	cp	r1, r16
    194e:	11 06       	cpc	r1, r17
    1950:	8c f7       	brge	.-30     	; 0x1934 <__vector_58+0xf0a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1952:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    1956:	10 92 5b 2e 	sts	0x2E5B, r1
    195a:	3e c1       	rjmp	.+636    	; 0x1bd8 <__vector_58+0x11ae>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    195c:	80 91 6e 29 	lds	r24, 0x296E
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	d9 f5       	brne	.+118    	; 0x19da <__vector_58+0xfb0>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    1964:	80 91 5b 2e 	lds	r24, 0x2E5B
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	08 f4       	brcc	.+2      	; 0x196e <__vector_58+0xf44>
    196c:	35 c1       	rjmp	.+618    	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    196e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    1972:	80 91 6f 29 	lds	r24, 0x296F
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	39 f4       	brne	.+14     	; 0x1988 <__vector_58+0xf5e>
				{
					stop_PID_levi = 1;
    197a:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    197e:	10 92 7b 2e 	sts	0x2E7B, r1
    1982:	10 92 7c 2e 	sts	0x2E7C, r1
    1986:	02 c0       	rjmp	.+4      	; 0x198c <__vector_58+0xf62>
				}				
				else
					stop_PID_levi = 0;
    1988:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    198c:	80 91 70 29 	lds	r24, 0x2970
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	39 f4       	brne	.+14     	; 0x19a2 <__vector_58+0xf78>
				{
					stop_PID_desni = 1;
    1994:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    1998:	10 92 79 2e 	sts	0x2E79, r1
    199c:	10 92 7a 2e 	sts	0x2E7A, r1
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <__vector_58+0xf7c>
				}					
				else
					stop_PID_desni = 0;
    19a2:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    19a6:	80 91 6e 29 	lds	r24, 0x296E
    19aa:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    19ae:	00 e0       	ldi	r16, 0x00	; 0
    19b0:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    19b2:	f8 01       	movw	r30, r16
    19b4:	e3 52       	subi	r30, 0x23	; 35
    19b6:	f7 4d       	sbci	r31, 0xD7	; 215
    19b8:	60 81       	ld	r22, Z
    19ba:	89 e1       	ldi	r24, 0x19	; 25
    19bc:	93 e2       	ldi	r25, 0x23	; 35
    19be:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    19c2:	88 23       	and	r24, r24
    19c4:	11 f0       	breq	.+4      	; 0x19ca <__vector_58+0xfa0>
					{
						i++;
    19c6:	0f 5f       	subi	r16, 0xFF	; 255
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    19ca:	10 16       	cp	r1, r16
    19cc:	11 06       	cpc	r1, r17
    19ce:	8c f7       	brge	.-30     	; 0x19b2 <__vector_58+0xf88>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    19d0:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    19d4:	10 92 5b 2e 	sts	0x2E5B, r1
    19d8:	ff c0       	rjmp	.+510    	; 0x1bd8 <__vector_58+0x11ae>
		}
	}
	//citanje X koordinate
	else if(receiveArray[0] == 101)						//provera funkcijskog bajta >> 101-citanje X pozicije
    19da:	80 91 6e 29 	lds	r24, 0x296E
    19de:	85 36       	cpi	r24, 0x65	; 101
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <__vector_58+0xfba>
    19e2:	4b c0       	rjmp	.+150    	; 0x1a7a <__vector_58+0x1050>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    19e4:	80 91 5b 2e 	lds	r24, 0x2E5B
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__vector_58+0xfc4>
    19ec:	f5 c0       	rjmp	.+490    	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    19ee:	10 92 fb 2d 	sts	0x2DFB, r1
			
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    19f2:	80 91 6e 29 	lds	r24, 0x296E
    19f6:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    19fa:	60 91 23 2e 	lds	r22, 0x2E23
    19fe:	70 91 24 2e 	lds	r23, 0x2E24
    1a02:	80 91 25 2e 	lds	r24, 0x2E25
    1a06:	90 91 26 2e 	lds	r25, 0x2E26
    1a0a:	20 91 00 2e 	lds	r18, 0x2E00
    1a0e:	30 91 01 2e 	lds	r19, 0x2E01
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	ba 95       	dec	r27
    1a20:	a5 2f       	mov	r26, r21
    1a22:	94 2f       	mov	r25, r20
    1a24:	83 2f       	mov	r24, r19
    1a26:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1a2a:	60 91 23 2e 	lds	r22, 0x2E23
    1a2e:	70 91 24 2e 	lds	r23, 0x2E24
    1a32:	80 91 25 2e 	lds	r24, 0x2E25
    1a36:	90 91 26 2e 	lds	r25, 0x2E26
    1a3a:	20 91 00 2e 	lds	r18, 0x2E00
    1a3e:	30 91 01 2e 	lds	r19, 0x2E01
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1a4a:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1a4e:	00 e0       	ldi	r16, 0x00	; 0
    1a50:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1a52:	f8 01       	movw	r30, r16
    1a54:	e3 52       	subi	r30, 0x23	; 35
    1a56:	f7 4d       	sbci	r31, 0xD7	; 215
    1a58:	60 81       	ld	r22, Z
    1a5a:	89 e1       	ldi	r24, 0x19	; 25
    1a5c:	93 e2       	ldi	r25, 0x23	; 35
    1a5e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1a62:	88 23       	and	r24, r24
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <__vector_58+0x1040>
						i++;
    1a66:	0f 5f       	subi	r16, 0xFF	; 255
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1a6a:	03 30       	cpi	r16, 0x03	; 3
    1a6c:	11 05       	cpc	r17, r1
    1a6e:	8c f3       	brlt	.-30     	; 0x1a52 <__vector_58+0x1028>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1a70:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1a74:	10 92 5b 2e 	sts	0x2E5B, r1
    1a78:	af c0       	rjmp	.+350    	; 0x1bd8 <__vector_58+0x11ae>
		}		
	}
	//citanje Y koordinate
	else if(receiveArray[0] == 102)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1a7a:	80 91 6e 29 	lds	r24, 0x296E
    1a7e:	86 36       	cpi	r24, 0x66	; 102
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <__vector_58+0x105a>
    1a82:	4b c0       	rjmp	.+150    	; 0x1b1a <__vector_58+0x10f0>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1a84:	80 91 5b 2e 	lds	r24, 0x2E5B
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <__vector_58+0x1064>
    1a8c:	a5 c0       	rjmp	.+330    	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1a8e:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1a92:	80 91 6e 29 	lds	r24, 0x296E
    1a96:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1a9a:	60 91 02 2a 	lds	r22, 0x2A02
    1a9e:	70 91 03 2a 	lds	r23, 0x2A03
    1aa2:	80 91 04 2a 	lds	r24, 0x2A04
    1aa6:	90 91 05 2a 	lds	r25, 0x2A05
    1aaa:	20 91 00 2e 	lds	r18, 0x2E00
    1aae:	30 91 01 2e 	lds	r19, 0x2E01
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1aba:	bb 27       	eor	r27, r27
    1abc:	57 fd       	sbrc	r21, 7
    1abe:	ba 95       	dec	r27
    1ac0:	a5 2f       	mov	r26, r21
    1ac2:	94 2f       	mov	r25, r20
    1ac4:	83 2f       	mov	r24, r19
    1ac6:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1aca:	60 91 02 2a 	lds	r22, 0x2A02
    1ace:	70 91 03 2a 	lds	r23, 0x2A03
    1ad2:	80 91 04 2a 	lds	r24, 0x2A04
    1ad6:	90 91 05 2a 	lds	r25, 0x2A05
    1ada:	20 91 00 2e 	lds	r18, 0x2E00
    1ade:	30 91 01 2e 	lds	r19, 0x2E01
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1aea:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1af2:	f8 01       	movw	r30, r16
    1af4:	e3 52       	subi	r30, 0x23	; 35
    1af6:	f7 4d       	sbci	r31, 0xD7	; 215
    1af8:	60 81       	ld	r22, Z
    1afa:	89 e1       	ldi	r24, 0x19	; 25
    1afc:	93 e2       	ldi	r25, 0x23	; 35
    1afe:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <__vector_58+0x10e0>
						i++;
    1b06:	0f 5f       	subi	r16, 0xFF	; 255
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1b0a:	03 30       	cpi	r16, 0x03	; 3
    1b0c:	11 05       	cpc	r17, r1
    1b0e:	8c f3       	brlt	.-30     	; 0x1af2 <__vector_58+0x10c8>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1b10:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1b14:	10 92 5b 2e 	sts	0x2E5B, r1
    1b18:	5f c0       	rjmp	.+190    	; 0x1bd8 <__vector_58+0x11ae>
		}		
	}
	//citanje teta abs
	else if(receiveArray[0] == 103)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1b1a:	80 91 6e 29 	lds	r24, 0x296E
    1b1e:	87 36       	cpi	r24, 0x67	; 103
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <__vector_58+0x10fa>
    1b22:	5a c0       	rjmp	.+180    	; 0x1bd8 <__vector_58+0x11ae>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1b24:	80 91 5b 2e 	lds	r24, 0x2E5B
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <__vector_58+0x1104>
    1b2c:	55 c0       	rjmp	.+170    	; 0x1bd8 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1b2e:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1b32:	80 91 6e 29 	lds	r24, 0x296E
    1b36:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1b3a:	20 91 83 32 	lds	r18, 0x3283
    1b3e:	30 91 84 32 	lds	r19, 0x3284
    1b42:	40 91 85 32 	lds	r20, 0x3285
    1b46:	50 91 86 32 	lds	r21, 0x3286
    1b4a:	c0 90 75 32 	lds	r12, 0x3275
    1b4e:	d0 90 76 32 	lds	r13, 0x3276
    1b52:	e0 90 77 32 	lds	r14, 0x3277
    1b56:	f0 90 78 32 	lds	r15, 0x3278
    1b5a:	a8 e6       	ldi	r26, 0x68	; 104
    1b5c:	b1 e0       	ldi	r27, 0x01	; 1
    1b5e:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1b62:	a7 01       	movw	r20, r14
    1b64:	96 01       	movw	r18, r12
    1b66:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1b6a:	bb 27       	eor	r27, r27
    1b6c:	57 fd       	sbrc	r21, 7
    1b6e:	ba 95       	dec	r27
    1b70:	a5 2f       	mov	r26, r21
    1b72:	94 2f       	mov	r25, r20
    1b74:	83 2f       	mov	r24, r19
    1b76:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
    1b7a:	20 91 83 32 	lds	r18, 0x3283
    1b7e:	30 91 84 32 	lds	r19, 0x3284
    1b82:	40 91 85 32 	lds	r20, 0x3285
    1b86:	50 91 86 32 	lds	r21, 0x3286
    1b8a:	c0 90 75 32 	lds	r12, 0x3275
    1b8e:	d0 90 76 32 	lds	r13, 0x3276
    1b92:	e0 90 77 32 	lds	r14, 0x3277
    1b96:	f0 90 78 32 	lds	r15, 0x3278
    1b9a:	a8 e6       	ldi	r26, 0x68	; 104
    1b9c:	b1 e0       	ldi	r27, 0x01	; 1
    1b9e:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	96 01       	movw	r18, r12
    1ba6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1baa:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1bae:	00 e0       	ldi	r16, 0x00	; 0
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	e3 52       	subi	r30, 0x23	; 35
    1bb6:	f7 4d       	sbci	r31, 0xD7	; 215
    1bb8:	60 81       	ld	r22, Z
    1bba:	89 e1       	ldi	r24, 0x19	; 25
    1bbc:	93 e2       	ldi	r25, 0x23	; 35
    1bbe:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1bc2:	88 23       	and	r24, r24
    1bc4:	11 f0       	breq	.+4      	; 0x1bca <__vector_58+0x11a0>
						i++;
    1bc6:	0f 5f       	subi	r16, 0xFF	; 255
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
				
				i = 0;
				while (i < 3) 
    1bca:	03 30       	cpi	r16, 0x03	; 3
    1bcc:	11 05       	cpc	r17, r1
    1bce:	8c f3       	brlt	.-30     	; 0x1bb2 <__vector_58+0x1188>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1bd0:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1bd4:	10 92 5b 2e 	sts	0x2E5B, r1
		}		
	}
}
    1bd8:	28 96       	adiw	r28, 0x08	; 8
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	9f 90       	pop	r9
    1c0c:	8f 90       	pop	r8
    1c0e:	7f 90       	pop	r7
    1c10:	6f 90       	pop	r6
    1c12:	5f 90       	pop	r5
    1c14:	4f 90       	pop	r4
    1c16:	0f 90       	pop	r0
    1c18:	0b be       	out	0x3b, r0	; 59
    1c1a:	0f 90       	pop	r0
    1c1c:	0a be       	out	0x3a, r0	; 58
    1c1e:	0f 90       	pop	r0
    1c20:	09 be       	out	0x39, r0	; 57
    1c22:	0f 90       	pop	r0
    1c24:	08 be       	out	0x38, r0	; 56
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__vector_61>:
//Serijska komunikacija USART_E1 - BT - bluetooth
ISR(USARTE1_RXC_vect)
{	
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	0f 92       	push	r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	08 b6       	in	r0, 0x38	; 56
    1c3c:	0f 92       	push	r0
    1c3e:	18 be       	out	0x38, r1	; 56
    1c40:	09 b6       	in	r0, 0x39	; 57
    1c42:	0f 92       	push	r0
    1c44:	19 be       	out	0x39, r1	; 57
    1c46:	0a b6       	in	r0, 0x3a	; 58
    1c48:	0f 92       	push	r0
    1c4a:	1a be       	out	0x3a, r1	; 58
    1c4c:	0b b6       	in	r0, 0x3b	; 59
    1c4e:	0f 92       	push	r0
    1c50:	1b be       	out	0x3b, r1	; 59
    1c52:	4f 92       	push	r4
    1c54:	5f 92       	push	r5
    1c56:	6f 92       	push	r6
    1c58:	7f 92       	push	r7
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	28 97       	sbiw	r28, 0x08	; 8
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E1_data);
    1c94:	8b e0       	ldi	r24, 0x0B	; 11
    1c96:	90 e2       	ldi	r25, 0x20	; 32
    1c98:	0e 94 63 34 	call	0x68c6	; 0x68c6 <USART_RXComplete>
	receiveArray[RX_i_E1] = USART_RXBuffer_GetByte(&USART_E1_data);
    1c9c:	80 91 5d 29 	lds	r24, 0x295D
    1ca0:	08 2f       	mov	r16, r24
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
    1ca4:	8b e0       	ldi	r24, 0x0B	; 11
    1ca6:	90 e2       	ldi	r25, 0x20	; 32
    1ca8:	0e 94 55 34 	call	0x68aa	; 0x68aa <USART_RXBuffer_GetByte>
    1cac:	f8 01       	movw	r30, r16
    1cae:	e2 59       	subi	r30, 0x92	; 146
    1cb0:	f6 4d       	sbci	r31, 0xD6	; 214
    1cb2:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E1_data, receiveArray[RX_i_E1]);	//echo
	RX_i_E1++;
    1cb4:	80 91 5d 29 	lds	r24, 0x295D
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	80 93 5d 29 	sts	0x295D, r24
	
	//vremenska zastita
	if (RX_i_E1 >= 1)
    1cbe:	80 91 5d 29 	lds	r24, 0x295D
    1cc2:	88 23       	and	r24, r24
    1cc4:	19 f0       	breq	.+6      	; 0x1ccc <__vector_61+0x9c>
 		proveri_vreme_primanja = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1ccc:	80 91 6e 29 	lds	r24, 0x296E
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <__vector_61+0xa6>
    1cd4:	00 c1       	rjmp	.+512    	; 0x1ed6 <__vector_61+0x2a6>
	{
		if(RX_i_E1 == 1)								//stigla je cela poruka (2)
    1cd6:	80 91 5d 29 	lds	r24, 0x295D
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <__vector_61+0xb2>
    1cde:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1ce2:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1ce6:	80 91 6e 29 	lds	r24, 0x296E
    1cea:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1cee:	60 91 23 2e 	lds	r22, 0x2E23
    1cf2:	70 91 24 2e 	lds	r23, 0x2E24
    1cf6:	80 91 25 2e 	lds	r24, 0x2E25
    1cfa:	90 91 26 2e 	lds	r25, 0x2E26
    1cfe:	20 91 00 2e 	lds	r18, 0x2E00
    1d02:	30 91 01 2e 	lds	r19, 0x2E01
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1d0e:	bb 27       	eor	r27, r27
    1d10:	57 fd       	sbrc	r21, 7
    1d12:	ba 95       	dec	r27
    1d14:	a5 2f       	mov	r26, r21
    1d16:	94 2f       	mov	r25, r20
    1d18:	83 2f       	mov	r24, r19
    1d1a:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1d1e:	60 91 23 2e 	lds	r22, 0x2E23
    1d22:	70 91 24 2e 	lds	r23, 0x2E24
    1d26:	80 91 25 2e 	lds	r24, 0x2E25
    1d2a:	90 91 26 2e 	lds	r25, 0x2E26
    1d2e:	20 91 00 2e 	lds	r18, 0x2E00
    1d32:	30 91 01 2e 	lds	r19, 0x2E01
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1d3e:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    1d42:	60 91 02 2a 	lds	r22, 0x2A02
    1d46:	70 91 03 2a 	lds	r23, 0x2A03
    1d4a:	80 91 04 2a 	lds	r24, 0x2A04
    1d4e:	90 91 05 2a 	lds	r25, 0x2A05
    1d52:	20 91 00 2e 	lds	r18, 0x2E00
    1d56:	30 91 01 2e 	lds	r19, 0x2E01
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1d62:	bb 27       	eor	r27, r27
    1d64:	57 fd       	sbrc	r21, 7
    1d66:	ba 95       	dec	r27
    1d68:	a5 2f       	mov	r26, r21
    1d6a:	94 2f       	mov	r25, r20
    1d6c:	83 2f       	mov	r24, r19
    1d6e:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    1d72:	60 91 02 2a 	lds	r22, 0x2A02
    1d76:	70 91 03 2a 	lds	r23, 0x2A03
    1d7a:	80 91 04 2a 	lds	r24, 0x2A04
    1d7e:	90 91 05 2a 	lds	r25, 0x2A05
    1d82:	20 91 00 2e 	lds	r18, 0x2E00
    1d86:	30 91 01 2e 	lds	r19, 0x2E01
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1d92:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1d96:	20 91 83 32 	lds	r18, 0x3283
    1d9a:	30 91 84 32 	lds	r19, 0x3284
    1d9e:	40 91 85 32 	lds	r20, 0x3285
    1da2:	50 91 86 32 	lds	r21, 0x3286
    1da6:	c0 90 75 32 	lds	r12, 0x3275
    1daa:	d0 90 76 32 	lds	r13, 0x3276
    1dae:	e0 90 77 32 	lds	r14, 0x3277
    1db2:	f0 90 78 32 	lds	r15, 0x3278
    1db6:	a8 e6       	ldi	r26, 0x68	; 104
    1db8:	b1 e0       	ldi	r27, 0x01	; 1
    1dba:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1dbe:	a7 01       	movw	r20, r14
    1dc0:	96 01       	movw	r18, r12
    1dc2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1dc6:	bb 27       	eor	r27, r27
    1dc8:	57 fd       	sbrc	r21, 7
    1dca:	ba 95       	dec	r27
    1dcc:	a5 2f       	mov	r26, r21
    1dce:	94 2f       	mov	r25, r20
    1dd0:	83 2f       	mov	r24, r19
    1dd2:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    1dd6:	20 91 83 32 	lds	r18, 0x3283
    1dda:	30 91 84 32 	lds	r19, 0x3284
    1dde:	40 91 85 32 	lds	r20, 0x3285
    1de2:	50 91 86 32 	lds	r21, 0x3286
    1de6:	c0 90 75 32 	lds	r12, 0x3275
    1dea:	d0 90 76 32 	lds	r13, 0x3276
    1dee:	e0 90 77 32 	lds	r14, 0x3277
    1df2:	f0 90 78 32 	lds	r15, 0x3278
    1df6:	a8 e6       	ldi	r26, 0x68	; 104
    1df8:	b1 e0       	ldi	r27, 0x01	; 1
    1dfa:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1dfe:	a7 01       	movw	r20, r14
    1e00:	96 01       	movw	r18, r12
    1e02:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1e06:	20 93 e3 28 	sts	0x28E3, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    1e0a:	60 91 12 2e 	lds	r22, 0x2E12
    1e0e:	70 91 13 2e 	lds	r23, 0x2E13
    1e12:	80 91 14 2e 	lds	r24, 0x2E14
    1e16:	90 91 15 2e 	lds	r25, 0x2E15
    1e1a:	20 91 00 2e 	lds	r18, 0x2E00
    1e1e:	30 91 01 2e 	lds	r19, 0x2E01
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1e2a:	bb 27       	eor	r27, r27
    1e2c:	57 fd       	sbrc	r21, 7
    1e2e:	ba 95       	dec	r27
    1e30:	a5 2f       	mov	r26, r21
    1e32:	94 2f       	mov	r25, r20
    1e34:	83 2f       	mov	r24, r19
    1e36:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    1e3a:	60 91 12 2e 	lds	r22, 0x2E12
    1e3e:	70 91 13 2e 	lds	r23, 0x2E13
    1e42:	80 91 14 2e 	lds	r24, 0x2E14
    1e46:	90 91 15 2e 	lds	r25, 0x2E15
    1e4a:	20 91 00 2e 	lds	r18, 0x2E00
    1e4e:	30 91 01 2e 	lds	r19, 0x2E01
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    1e5a:	20 93 e5 28 	sts	0x28E5, r18
				sendArray[9] = stigao_flag;											//stigao flag
    1e5e:	80 91 06 20 	lds	r24, 0x2006
    1e62:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    1e66:	80 91 a0 24 	lds	r24, 0x24A0
    1e6a:	90 91 a1 24 	lds	r25, 0x24A1
    1e6e:	80 93 e7 28 	sts	0x28E7, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    1e72:	80 91 c0 24 	lds	r24, 0x24C0
    1e76:	90 91 c1 24 	lds	r25, 0x24C1
    1e7a:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    1e7e:	60 91 5a 2e 	lds	r22, 0x2E5A
    1e82:	80 e2       	ldi	r24, 0x20	; 32
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e8a:	80 93 e9 28 	sts	0x28E9, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    1e8e:	60 91 5a 2e 	lds	r22, 0x2E5A
    1e92:	88 e2       	ldi	r24, 0x28	; 40
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e9a:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    1e9e:	e0 e2       	ldi	r30, 0x20	; 32
    1ea0:	f6 e0       	ldi	r31, 0x06	; 6
    1ea2:	80 85       	ldd	r24, Z+8	; 0x08
    1ea4:	80 93 eb 28 	sts	0x28EB, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    1ea8:	00 e0       	ldi	r16, 0x00	; 0
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    1eac:	f8 01       	movw	r30, r16
    1eae:	e3 52       	subi	r30, 0x23	; 35
    1eb0:	f7 4d       	sbci	r31, 0xD7	; 215
    1eb2:	60 81       	ld	r22, Z
    1eb4:	8b e0       	ldi	r24, 0x0B	; 11
    1eb6:	90 e2       	ldi	r25, 0x20	; 32
    1eb8:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1ebc:	88 23       	and	r24, r24
    1ebe:	11 f0       	breq	.+4      	; 0x1ec4 <__vector_61+0x294>
						i++;
    1ec0:	0f 5f       	subi	r16, 0xFF	; 255
    1ec2:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    1ec4:	0f 30       	cpi	r16, 0x0F	; 15
    1ec6:	11 05       	cpc	r17, r1
    1ec8:	8c f3       	brlt	.-30     	; 0x1eac <__vector_61+0x27c>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E1 = 0;
    1eca:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda				
    1ece:	10 92 5d 29 	sts	0x295D, r1
    1ed2:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    1ed6:	80 91 6e 29 	lds	r24, 0x296E
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <__vector_61+0x2b0>
    1ede:	c1 c0       	rjmp	.+386    	; 0x2062 <__vector_61+0x432>
	{
		if(RX_i_E1 >= 5)							//stigla je cela poruka	(5 bajtova)
    1ee0:	80 91 5d 29 	lds	r24, 0x295D
    1ee4:	85 30       	cpi	r24, 0x05	; 5
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <__vector_61+0x2bc>
    1ee8:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1eec:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
    1ef0:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
    1ef4:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
    1ef8:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
    1efc:	10 92 ae 24 	sts	0x24AE, r1
    1f00:	10 92 af 24 	sts	0x24AF, r1
    1f04:	10 92 b0 24 	sts	0x24B0, r1
    1f08:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= (int)receiveArray[1] << 8;
    1f0c:	20 91 6f 29 	lds	r18, 0x296F
    1f10:	40 91 ae 24 	lds	r20, 0x24AE
    1f14:	50 91 af 24 	lds	r21, 0x24AF
    1f18:	60 91 b0 24 	lds	r22, 0x24B0
    1f1c:	70 91 b1 24 	lds	r23, 0x24B1
    1f20:	92 2f       	mov	r25, r18
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	aa 27       	eor	r26, r26
    1f26:	97 fd       	sbrc	r25, 7
    1f28:	a0 95       	com	r26
    1f2a:	ba 2f       	mov	r27, r26
    1f2c:	84 2b       	or	r24, r20
    1f2e:	95 2b       	or	r25, r21
    1f30:	a6 2b       	or	r26, r22
    1f32:	b7 2b       	or	r27, r23
    1f34:	80 93 ae 24 	sts	0x24AE, r24
    1f38:	90 93 af 24 	sts	0x24AF, r25
    1f3c:	a0 93 b0 24 	sts	0x24B0, r26
    1f40:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
    1f44:	20 91 70 29 	lds	r18, 0x2970
    1f48:	80 91 ae 24 	lds	r24, 0x24AE
    1f4c:	90 91 af 24 	lds	r25, 0x24AF
    1f50:	a0 91 b0 24 	lds	r26, 0x24B0
    1f54:	b0 91 b1 24 	lds	r27, 0x24B1
    1f58:	82 2b       	or	r24, r18
    1f5a:	80 93 ae 24 	sts	0x24AE, r24
    1f5e:	90 93 af 24 	sts	0x24AF, r25
    1f62:	a0 93 b0 24 	sts	0x24B0, r26
    1f66:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    1f6a:	a0 91 00 2e 	lds	r26, 0x2E00
    1f6e:	b0 91 01 2e 	lds	r27, 0x2E01
    1f72:	20 91 ae 24 	lds	r18, 0x24AE
    1f76:	30 91 af 24 	lds	r19, 0x24AF
    1f7a:	40 91 b0 24 	lds	r20, 0x24B0
    1f7e:	50 91 b1 24 	lds	r21, 0x24B1
    1f82:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    1f86:	60 93 ae 24 	sts	0x24AE, r22
    1f8a:	70 93 af 24 	sts	0x24AF, r23
    1f8e:	80 93 b0 24 	sts	0x24B0, r24
    1f92:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
    1f96:	10 92 0b 2e 	sts	0x2E0B, r1
    1f9a:	10 92 0c 2e 	sts	0x2E0C, r1
    1f9e:	10 92 0d 2e 	sts	0x2E0D, r1
    1fa2:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= (int)receiveArray[3] << 8;
    1fa6:	20 91 71 29 	lds	r18, 0x2971
    1faa:	40 91 0b 2e 	lds	r20, 0x2E0B
    1fae:	50 91 0c 2e 	lds	r21, 0x2E0C
    1fb2:	60 91 0d 2e 	lds	r22, 0x2E0D
    1fb6:	70 91 0e 2e 	lds	r23, 0x2E0E
    1fba:	92 2f       	mov	r25, r18
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	97 fd       	sbrc	r25, 7
    1fc2:	a0 95       	com	r26
    1fc4:	ba 2f       	mov	r27, r26
    1fc6:	84 2b       	or	r24, r20
    1fc8:	95 2b       	or	r25, r21
    1fca:	a6 2b       	or	r26, r22
    1fcc:	b7 2b       	or	r27, r23
    1fce:	80 93 0b 2e 	sts	0x2E0B, r24
    1fd2:	90 93 0c 2e 	sts	0x2E0C, r25
    1fd6:	a0 93 0d 2e 	sts	0x2E0D, r26
    1fda:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
    1fde:	20 91 72 29 	lds	r18, 0x2972
    1fe2:	80 91 0b 2e 	lds	r24, 0x2E0B
    1fe6:	90 91 0c 2e 	lds	r25, 0x2E0C
    1fea:	a0 91 0d 2e 	lds	r26, 0x2E0D
    1fee:	b0 91 0e 2e 	lds	r27, 0x2E0E
    1ff2:	82 2b       	or	r24, r18
    1ff4:	80 93 0b 2e 	sts	0x2E0B, r24
    1ff8:	90 93 0c 2e 	sts	0x2E0C, r25
    1ffc:	a0 93 0d 2e 	sts	0x2E0D, r26
    2000:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    2004:	a0 91 00 2e 	lds	r26, 0x2E00
    2008:	b0 91 01 2e 	lds	r27, 0x2E01
    200c:	20 91 0b 2e 	lds	r18, 0x2E0B
    2010:	30 91 0c 2e 	lds	r19, 0x2E0C
    2014:	40 91 0d 2e 	lds	r20, 0x2E0D
    2018:	50 91 0e 2e 	lds	r21, 0x2E0E
    201c:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    2020:	60 93 0b 2e 	sts	0x2E0B, r22
    2024:	70 93 0c 2e 	sts	0x2E0C, r23
    2028:	80 93 0d 2e 	sts	0x2E0D, r24
    202c:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    2030:	80 91 6e 29 	lds	r24, 0x296E
    2034:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    203c:	f8 01       	movw	r30, r16
    203e:	e3 52       	subi	r30, 0x23	; 35
    2040:	f7 4d       	sbci	r31, 0xD7	; 215
    2042:	60 81       	ld	r22, Z
    2044:	8b e0       	ldi	r24, 0x0B	; 11
    2046:	90 e2       	ldi	r25, 0x20	; 32
    2048:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <__vector_61+0x424>
				{
					i++;
    2050:	0f 5f       	subi	r16, 0xFF	; 255
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    2054:	10 16       	cp	r1, r16
    2056:	11 06       	cpc	r1, r17
    2058:	8c f7       	brge	.-30     	; 0x203c <__vector_61+0x40c>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E1 = 0;
    205a:	10 92 5d 29 	sts	0x295D, r1
    205e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    2062:	80 91 6e 29 	lds	r24, 0x296E
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	09 f0       	breq	.+2      	; 0x206c <__vector_61+0x43c>
    206a:	e5 c1       	rjmp	.+970    	; 0x2436 <__vector_61+0x806>
	{
		if(RX_i_E1 >= 11)							//stigla je cela poruka	(11)
    206c:	80 91 5d 29 	lds	r24, 0x295D
    2070:	8b 30       	cpi	r24, 0x0B	; 11
    2072:	10 f4       	brcc	.+4      	; 0x2078 <__vector_61+0x448>
    2074:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2078:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    207c:	80 91 6f 29 	lds	r24, 0x296F
    2080:	8f 3f       	cpi	r24, 0xFF	; 255
    2082:	29 f4       	brne	.+10     	; 0x208e <__vector_61+0x45e>
    2084:	80 91 70 29 	lds	r24, 0x2970
    2088:	8f 3f       	cpi	r24, 0xFF	; 255
    208a:	09 f4       	brne	.+2      	; 0x208e <__vector_61+0x45e>
    208c:	53 c0       	rjmp	.+166    	; 0x2134 <__vector_61+0x504>
				{
					//ENABLE
					stop_PID_desni = 0;
    208e:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
    2092:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    2096:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
    209a:	10 92 ae 24 	sts	0x24AE, r1
    209e:	10 92 af 24 	sts	0x24AF, r1
    20a2:	10 92 b0 24 	sts	0x24B0, r1
    20a6:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= (int)receiveArray[1] << 8;
    20aa:	20 91 6f 29 	lds	r18, 0x296F
    20ae:	40 91 ae 24 	lds	r20, 0x24AE
    20b2:	50 91 af 24 	lds	r21, 0x24AF
    20b6:	60 91 b0 24 	lds	r22, 0x24B0
    20ba:	70 91 b1 24 	lds	r23, 0x24B1
    20be:	92 2f       	mov	r25, r18
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	aa 27       	eor	r26, r26
    20c4:	97 fd       	sbrc	r25, 7
    20c6:	a0 95       	com	r26
    20c8:	ba 2f       	mov	r27, r26
    20ca:	84 2b       	or	r24, r20
    20cc:	95 2b       	or	r25, r21
    20ce:	a6 2b       	or	r26, r22
    20d0:	b7 2b       	or	r27, r23
    20d2:	80 93 ae 24 	sts	0x24AE, r24
    20d6:	90 93 af 24 	sts	0x24AF, r25
    20da:	a0 93 b0 24 	sts	0x24B0, r26
    20de:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
    20e2:	20 91 70 29 	lds	r18, 0x2970
    20e6:	80 91 ae 24 	lds	r24, 0x24AE
    20ea:	90 91 af 24 	lds	r25, 0x24AF
    20ee:	a0 91 b0 24 	lds	r26, 0x24B0
    20f2:	b0 91 b1 24 	lds	r27, 0x24B1
    20f6:	82 2b       	or	r24, r18
    20f8:	80 93 ae 24 	sts	0x24AE, r24
    20fc:	90 93 af 24 	sts	0x24AF, r25
    2100:	a0 93 b0 24 	sts	0x24B0, r26
    2104:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    2108:	a0 91 00 2e 	lds	r26, 0x2E00
    210c:	b0 91 01 2e 	lds	r27, 0x2E01
    2110:	20 91 ae 24 	lds	r18, 0x24AE
    2114:	30 91 af 24 	lds	r19, 0x24AF
    2118:	40 91 b0 24 	lds	r20, 0x24B0
    211c:	50 91 b1 24 	lds	r21, 0x24B1
    2120:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    2124:	60 93 ae 24 	sts	0x24AE, r22
    2128:	70 93 af 24 	sts	0x24AF, r23
    212c:	80 93 b0 24 	sts	0x24B0, r24
    2130:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2134:	80 91 71 29 	lds	r24, 0x2971
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	29 f4       	brne	.+10     	; 0x2146 <__vector_61+0x516>
    213c:	80 91 72 29 	lds	r24, 0x2972
    2140:	8f 3f       	cpi	r24, 0xFF	; 255
    2142:	09 f4       	brne	.+2      	; 0x2146 <__vector_61+0x516>
    2144:	53 c0       	rjmp	.+166    	; 0x21ec <__vector_61+0x5bc>
				{		
					stop_PID_desni = 0;
    2146:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
    214a:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    214e:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
    2152:	10 92 0b 2e 	sts	0x2E0B, r1
    2156:	10 92 0c 2e 	sts	0x2E0C, r1
    215a:	10 92 0d 2e 	sts	0x2E0D, r1
    215e:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= (int)receiveArray[3] << 8;
    2162:	20 91 71 29 	lds	r18, 0x2971
    2166:	40 91 0b 2e 	lds	r20, 0x2E0B
    216a:	50 91 0c 2e 	lds	r21, 0x2E0C
    216e:	60 91 0d 2e 	lds	r22, 0x2E0D
    2172:	70 91 0e 2e 	lds	r23, 0x2E0E
    2176:	92 2f       	mov	r25, r18
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	aa 27       	eor	r26, r26
    217c:	97 fd       	sbrc	r25, 7
    217e:	a0 95       	com	r26
    2180:	ba 2f       	mov	r27, r26
    2182:	84 2b       	or	r24, r20
    2184:	95 2b       	or	r25, r21
    2186:	a6 2b       	or	r26, r22
    2188:	b7 2b       	or	r27, r23
    218a:	80 93 0b 2e 	sts	0x2E0B, r24
    218e:	90 93 0c 2e 	sts	0x2E0C, r25
    2192:	a0 93 0d 2e 	sts	0x2E0D, r26
    2196:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
    219a:	20 91 72 29 	lds	r18, 0x2972
    219e:	80 91 0b 2e 	lds	r24, 0x2E0B
    21a2:	90 91 0c 2e 	lds	r25, 0x2E0C
    21a6:	a0 91 0d 2e 	lds	r26, 0x2E0D
    21aa:	b0 91 0e 2e 	lds	r27, 0x2E0E
    21ae:	82 2b       	or	r24, r18
    21b0:	80 93 0b 2e 	sts	0x2E0B, r24
    21b4:	90 93 0c 2e 	sts	0x2E0C, r25
    21b8:	a0 93 0d 2e 	sts	0x2E0D, r26
    21bc:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    21c0:	a0 91 00 2e 	lds	r26, 0x2E00
    21c4:	b0 91 01 2e 	lds	r27, 0x2E01
    21c8:	20 91 0b 2e 	lds	r18, 0x2E0B
    21cc:	30 91 0c 2e 	lds	r19, 0x2E0C
    21d0:	40 91 0d 2e 	lds	r20, 0x2E0D
    21d4:	50 91 0e 2e 	lds	r21, 0x2E0E
    21d8:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    21dc:	60 93 0b 2e 	sts	0x2E0B, r22
    21e0:	70 93 0c 2e 	sts	0x2E0C, r23
    21e4:	80 93 0d 2e 	sts	0x2E0D, r24
    21e8:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    21ec:	80 91 73 29 	lds	r24, 0x2973
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	29 f4       	brne	.+10     	; 0x21fe <__vector_61+0x5ce>
    21f4:	80 91 74 29 	lds	r24, 0x2974
    21f8:	8f 3f       	cpi	r24, 0xFF	; 255
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_61+0x5ce>
    21fc:	58 c0       	rjmp	.+176    	; 0x22ae <__vector_61+0x67e>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    21fe:	10 92 00 20 	sts	0x2000, r1
    2202:	10 92 01 20 	sts	0x2001, r1
    2206:	10 92 02 20 	sts	0x2002, r1
    220a:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[5] << 8;
    220e:	20 91 73 29 	lds	r18, 0x2973
    2212:	40 91 00 20 	lds	r20, 0x2000
    2216:	50 91 01 20 	lds	r21, 0x2001
    221a:	60 91 02 20 	lds	r22, 0x2002
    221e:	70 91 03 20 	lds	r23, 0x2003
    2222:	92 2f       	mov	r25, r18
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	aa 27       	eor	r26, r26
    2228:	97 fd       	sbrc	r25, 7
    222a:	a0 95       	com	r26
    222c:	ba 2f       	mov	r27, r26
    222e:	84 2b       	or	r24, r20
    2230:	95 2b       	or	r25, r21
    2232:	a6 2b       	or	r26, r22
    2234:	b7 2b       	or	r27, r23
    2236:	80 93 00 20 	sts	0x2000, r24
    223a:	90 93 01 20 	sts	0x2001, r25
    223e:	a0 93 02 20 	sts	0x2002, r26
    2242:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    2246:	20 91 74 29 	lds	r18, 0x2974
    224a:	80 91 00 20 	lds	r24, 0x2000
    224e:	90 91 01 20 	lds	r25, 0x2001
    2252:	a0 91 02 20 	lds	r26, 0x2002
    2256:	b0 91 03 20 	lds	r27, 0x2003
    225a:	82 2b       	or	r24, r18
    225c:	80 93 00 20 	sts	0x2000, r24
    2260:	90 93 01 20 	sts	0x2001, r25
    2264:	a0 93 02 20 	sts	0x2002, r26
    2268:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    226c:	20 91 00 20 	lds	r18, 0x2000
    2270:	30 91 01 20 	lds	r19, 0x2001
    2274:	40 91 02 20 	lds	r20, 0x2002
    2278:	50 91 03 20 	lds	r21, 0x2003
    227c:	60 91 75 32 	lds	r22, 0x3275
    2280:	70 91 76 32 	lds	r23, 0x3276
    2284:	80 91 77 32 	lds	r24, 0x3277
    2288:	90 91 78 32 	lds	r25, 0x3278
    228c:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    2290:	28 e6       	ldi	r18, 0x68	; 104
    2292:	31 e0       	ldi	r19, 0x01	; 1
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    229c:	20 93 00 20 	sts	0x2000, r18
    22a0:	30 93 01 20 	sts	0x2001, r19
    22a4:	40 93 02 20 	sts	0x2002, r20
    22a8:	50 93 03 20 	sts	0x2003, r21
    22ac:	78 c0       	rjmp	.+240    	; 0x239e <__vector_61+0x76e>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    22ae:	80 91 75 29 	lds	r24, 0x2975
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	29 f4       	brne	.+10     	; 0x22c0 <__vector_61+0x690>
    22b6:	80 91 76 29 	lds	r24, 0x2976
    22ba:	8f 3f       	cpi	r24, 0xFF	; 255
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <__vector_61+0x690>
    22be:	64 c0       	rjmp	.+200    	; 0x2388 <__vector_61+0x758>
				{
					teta_cilj_final = 0;
    22c0:	10 92 00 20 	sts	0x2000, r1
    22c4:	10 92 01 20 	sts	0x2001, r1
    22c8:	10 92 02 20 	sts	0x2002, r1
    22cc:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[7] << 8;
    22d0:	20 91 75 29 	lds	r18, 0x2975
    22d4:	40 91 00 20 	lds	r20, 0x2000
    22d8:	50 91 01 20 	lds	r21, 0x2001
    22dc:	60 91 02 20 	lds	r22, 0x2002
    22e0:	70 91 03 20 	lds	r23, 0x2003
    22e4:	92 2f       	mov	r25, r18
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	aa 27       	eor	r26, r26
    22ea:	97 fd       	sbrc	r25, 7
    22ec:	a0 95       	com	r26
    22ee:	ba 2f       	mov	r27, r26
    22f0:	84 2b       	or	r24, r20
    22f2:	95 2b       	or	r25, r21
    22f4:	a6 2b       	or	r26, r22
    22f6:	b7 2b       	or	r27, r23
    22f8:	80 93 00 20 	sts	0x2000, r24
    22fc:	90 93 01 20 	sts	0x2001, r25
    2300:	a0 93 02 20 	sts	0x2002, r26
    2304:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    2308:	20 91 76 29 	lds	r18, 0x2976
    230c:	80 91 00 20 	lds	r24, 0x2000
    2310:	90 91 01 20 	lds	r25, 0x2001
    2314:	a0 91 02 20 	lds	r26, 0x2002
    2318:	b0 91 03 20 	lds	r27, 0x2003
    231c:	82 2b       	or	r24, r18
    231e:	80 93 00 20 	sts	0x2000, r24
    2322:	90 93 01 20 	sts	0x2001, r25
    2326:	a0 93 02 20 	sts	0x2002, r26
    232a:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    232e:	20 91 00 20 	lds	r18, 0x2000
    2332:	30 91 01 20 	lds	r19, 0x2001
    2336:	40 91 02 20 	lds	r20, 0x2002
    233a:	50 91 03 20 	lds	r21, 0x2003
    233e:	60 91 75 32 	lds	r22, 0x3275
    2342:	70 91 76 32 	lds	r23, 0x3276
    2346:	80 91 77 32 	lds	r24, 0x3277
    234a:	90 91 78 32 	lds	r25, 0x3278
    234e:	c0 90 83 32 	lds	r12, 0x3283
    2352:	d0 90 84 32 	lds	r13, 0x3284
    2356:	e0 90 85 32 	lds	r14, 0x3285
    235a:	f0 90 86 32 	lds	r15, 0x3286
    235e:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    2362:	28 e6       	ldi	r18, 0x68	; 104
    2364:	31 e0       	ldi	r19, 0x01	; 1
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    236e:	c2 0e       	add	r12, r18
    2370:	d3 1e       	adc	r13, r19
    2372:	e4 1e       	adc	r14, r20
    2374:	f5 1e       	adc	r15, r21
    2376:	c0 92 00 20 	sts	0x2000, r12
    237a:	d0 92 01 20 	sts	0x2001, r13
    237e:	e0 92 02 20 	sts	0x2002, r14
    2382:	f0 92 03 20 	sts	0x2003, r15
    2386:	0b c0       	rjmp	.+22     	; 0x239e <__vector_61+0x76e>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	9f ef       	ldi	r25, 0xFF	; 255
    238c:	dc 01       	movw	r26, r24
    238e:	80 93 00 20 	sts	0x2000, r24
    2392:	90 93 01 20 	sts	0x2001, r25
    2396:	a0 93 02 20 	sts	0x2002, r26
    239a:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    239e:	80 91 77 29 	lds	r24, 0x2977
    23a2:	8f 3f       	cpi	r24, 0xFF	; 255
    23a4:	c9 f0       	breq	.+50     	; 0x23d8 <__vector_61+0x7a8>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    23a6:	80 91 77 29 	lds	r24, 0x2977
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9c 01       	movw	r18, r24
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	82 0f       	add	r24, r18
    23b4:	93 1f       	adc	r25, r19
    23b6:	80 93 7f 32 	sts	0x327F, r24
    23ba:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    23be:	80 91 7f 32 	lds	r24, 0x327F
    23c2:	90 91 80 32 	lds	r25, 0x3280
    23c6:	99 23       	and	r25, r25
    23c8:	0c f4       	brge	.+2      	; 0x23cc <__vector_61+0x79c>
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	95 95       	asr	r25
    23ce:	87 95       	ror	r24
    23d0:	80 93 61 2e 	sts	0x2E61, r24
    23d4:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    23d8:	80 91 78 29 	lds	r24, 0x2978
    23dc:	8f 3f       	cpi	r24, 0xFF	; 255
    23de:	21 f0       	breq	.+8      	; 0x23e8 <__vector_61+0x7b8>
					smer_zadati = receiveArray[10];	
    23e0:	80 91 78 29 	lds	r24, 0x2978
    23e4:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    23e8:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    23ec:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    23f0:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    23f4:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    23f8:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    23fc:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    2400:	80 91 6e 29 	lds	r24, 0x296E
    2404:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    2408:	00 e0       	ldi	r16, 0x00	; 0
    240a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    240c:	f8 01       	movw	r30, r16
    240e:	e3 52       	subi	r30, 0x23	; 35
    2410:	f7 4d       	sbci	r31, 0xD7	; 215
    2412:	60 81       	ld	r22, Z
    2414:	8b e0       	ldi	r24, 0x0B	; 11
    2416:	90 e2       	ldi	r25, 0x20	; 32
    2418:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    241c:	88 23       	and	r24, r24
    241e:	11 f0       	breq	.+4      	; 0x2424 <__vector_61+0x7f4>
					{
						i++;
    2420:	0f 5f       	subi	r16, 0xFF	; 255
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    2424:	10 16       	cp	r1, r16
    2426:	11 06       	cpc	r1, r17
    2428:	8c f7       	brge	.-30     	; 0x240c <__vector_61+0x7dc>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    242a:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    242e:	10 92 5d 29 	sts	0x295D, r1
    2432:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    2436:	80 91 6e 29 	lds	r24, 0x296E
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	09 f0       	breq	.+2      	; 0x2440 <__vector_61+0x810>
    243e:	96 c1       	rjmp	.+812    	; 0x276c <__vector_61+0xb3c>
	{
		if(RX_i_E1 >= 5)								//stigla je cela poruka
    2440:	80 91 5d 29 	lds	r24, 0x295D
    2444:	85 30       	cpi	r24, 0x05	; 5
    2446:	10 f4       	brcc	.+4      	; 0x244c <__vector_61+0x81c>
    2448:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    244c:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    2450:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    2454:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    2458:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    245c:	10 92 c5 28 	sts	0x28C5, r1
    2460:	10 92 c6 28 	sts	0x28C6, r1
    2464:	10 92 c7 28 	sts	0x28C7, r1
    2468:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= (int)receiveArray[1] << 8;
    246c:	20 91 6f 29 	lds	r18, 0x296F
    2470:	40 91 c5 28 	lds	r20, 0x28C5
    2474:	50 91 c6 28 	lds	r21, 0x28C6
    2478:	60 91 c7 28 	lds	r22, 0x28C7
    247c:	70 91 c8 28 	lds	r23, 0x28C8
    2480:	92 2f       	mov	r25, r18
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	aa 27       	eor	r26, r26
    2486:	97 fd       	sbrc	r25, 7
    2488:	a0 95       	com	r26
    248a:	ba 2f       	mov	r27, r26
    248c:	84 2b       	or	r24, r20
    248e:	95 2b       	or	r25, r21
    2490:	a6 2b       	or	r26, r22
    2492:	b7 2b       	or	r27, r23
    2494:	80 93 c5 28 	sts	0x28C5, r24
    2498:	90 93 c6 28 	sts	0x28C6, r25
    249c:	a0 93 c7 28 	sts	0x28C7, r26
    24a0:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    24a4:	20 91 70 29 	lds	r18, 0x2970
    24a8:	80 91 c5 28 	lds	r24, 0x28C5
    24ac:	90 91 c6 28 	lds	r25, 0x28C6
    24b0:	a0 91 c7 28 	lds	r26, 0x28C7
    24b4:	b0 91 c8 28 	lds	r27, 0x28C8
    24b8:	82 2b       	or	r24, r18
    24ba:	80 93 c5 28 	sts	0x28C5, r24
    24be:	90 93 c6 28 	sts	0x28C6, r25
    24c2:	a0 93 c7 28 	sts	0x28C7, r26
    24c6:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    24ca:	a0 91 00 2e 	lds	r26, 0x2E00
    24ce:	b0 91 01 2e 	lds	r27, 0x2E01
    24d2:	20 91 c5 28 	lds	r18, 0x28C5
    24d6:	30 91 c6 28 	lds	r19, 0x28C6
    24da:	40 91 c7 28 	lds	r20, 0x28C7
    24de:	50 91 c8 28 	lds	r21, 0x28C8
    24e2:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    24e6:	60 93 c5 28 	sts	0x28C5, r22
    24ea:	70 93 c6 28 	sts	0x28C6, r23
    24ee:	80 93 c7 28 	sts	0x28C7, r24
    24f2:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    24f6:	10 92 16 2e 	sts	0x2E16, r1
    24fa:	10 92 17 2e 	sts	0x2E17, r1
    24fe:	10 92 18 2e 	sts	0x2E18, r1
    2502:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= (int)receiveArray[3] << 8;
    2506:	20 91 71 29 	lds	r18, 0x2971
    250a:	40 91 16 2e 	lds	r20, 0x2E16
    250e:	50 91 17 2e 	lds	r21, 0x2E17
    2512:	60 91 18 2e 	lds	r22, 0x2E18
    2516:	70 91 19 2e 	lds	r23, 0x2E19
    251a:	92 2f       	mov	r25, r18
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	aa 27       	eor	r26, r26
    2520:	97 fd       	sbrc	r25, 7
    2522:	a0 95       	com	r26
    2524:	ba 2f       	mov	r27, r26
    2526:	84 2b       	or	r24, r20
    2528:	95 2b       	or	r25, r21
    252a:	a6 2b       	or	r26, r22
    252c:	b7 2b       	or	r27, r23
    252e:	80 93 16 2e 	sts	0x2E16, r24
    2532:	90 93 17 2e 	sts	0x2E17, r25
    2536:	a0 93 18 2e 	sts	0x2E18, r26
    253a:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    253e:	20 91 72 29 	lds	r18, 0x2972
    2542:	80 91 16 2e 	lds	r24, 0x2E16
    2546:	90 91 17 2e 	lds	r25, 0x2E17
    254a:	a0 91 18 2e 	lds	r26, 0x2E18
    254e:	b0 91 19 2e 	lds	r27, 0x2E19
    2552:	82 2b       	or	r24, r18
    2554:	80 93 16 2e 	sts	0x2E16, r24
    2558:	90 93 17 2e 	sts	0x2E17, r25
    255c:	a0 93 18 2e 	sts	0x2E18, r26
    2560:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    2564:	20 91 16 2e 	lds	r18, 0x2E16
    2568:	30 91 17 2e 	lds	r19, 0x2E17
    256c:	40 91 18 2e 	lds	r20, 0x2E18
    2570:	50 91 19 2e 	lds	r21, 0x2E19
    2574:	60 91 75 32 	lds	r22, 0x3275
    2578:	70 91 76 32 	lds	r23, 0x3276
    257c:	80 91 77 32 	lds	r24, 0x3277
    2580:	90 91 78 32 	lds	r25, 0x3278
    2584:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    2588:	28 e6       	ldi	r18, 0x68	; 104
    258a:	31 e0       	ldi	r19, 0x01	; 1
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    2594:	20 93 16 2e 	sts	0x2E16, r18
    2598:	30 93 17 2e 	sts	0x2E17, r19
    259c:	40 93 18 2e 	sts	0x2E18, r20
    25a0:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    25a4:	40 91 83 32 	lds	r20, 0x3283
    25a8:	50 91 84 32 	lds	r21, 0x3284
    25ac:	60 91 85 32 	lds	r22, 0x3285
    25b0:	70 91 86 32 	lds	r23, 0x3286
    25b4:	80 91 16 2e 	lds	r24, 0x2E16
    25b8:	90 91 17 2e 	lds	r25, 0x2E17
    25bc:	a0 91 18 2e 	lds	r26, 0x2E18
    25c0:	b0 91 19 2e 	lds	r27, 0x2E19
    25c4:	c0 90 cf 28 	lds	r12, 0x28CF
    25c8:	d0 90 d0 28 	lds	r13, 0x28D0
    25cc:	e0 90 d1 28 	lds	r14, 0x28D1
    25d0:	f0 90 d2 28 	lds	r15, 0x28D2
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    25d4:	40 90 83 32 	lds	r4, 0x3283
    25d8:	50 90 84 32 	lds	r5, 0x3284
    25dc:	60 90 85 32 	lds	r6, 0x3285
    25e0:	70 90 86 32 	lds	r7, 0x3286
    25e4:	00 91 16 2e 	lds	r16, 0x2E16
    25e8:	10 91 17 2e 	lds	r17, 0x2E17
    25ec:	20 91 18 2e 	lds	r18, 0x2E18
    25f0:	30 91 19 2e 	lds	r19, 0x2E19
    25f4:	09 83       	std	Y+1, r16	; 0x01
    25f6:	1a 83       	std	Y+2, r17	; 0x02
    25f8:	2b 83       	std	Y+3, r18	; 0x03
    25fa:	3c 83       	std	Y+4, r19	; 0x04
    25fc:	80 90 cf 28 	lds	r8, 0x28CF
    2600:	90 90 d0 28 	lds	r9, 0x28D0
    2604:	a0 90 d1 28 	lds	r10, 0x28D1
    2608:	b0 90 d2 28 	lds	r11, 0x28D2
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    260c:	8a 01       	movw	r16, r20
    260e:	9b 01       	movw	r18, r22
    2610:	08 0f       	add	r16, r24
    2612:	19 1f       	adc	r17, r25
    2614:	2a 1f       	adc	r18, r26
    2616:	3b 1f       	adc	r19, r27
    2618:	c9 01       	movw	r24, r18
    261a:	b8 01       	movw	r22, r16
    261c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    2620:	6d 83       	std	Y+5, r22	; 0x05
    2622:	7e 83       	std	Y+6, r23	; 0x06
    2624:	8f 83       	std	Y+7, r24	; 0x07
    2626:	98 87       	std	Y+8, r25	; 0x08
    2628:	c7 01       	movw	r24, r14
    262a:	b6 01       	movw	r22, r12
    262c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    2630:	9b 01       	movw	r18, r22
    2632:	ac 01       	movw	r20, r24
    2634:	6d 81       	ldd	r22, Y+5	; 0x05
    2636:	7e 81       	ldd	r23, Y+6	; 0x06
    2638:	8f 81       	ldd	r24, Y+7	; 0x07
    263a:	98 85       	ldd	r25, Y+8	; 0x08
    263c:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    2640:	2b ed       	ldi	r18, 0xDB	; 219
    2642:	3f e0       	ldi	r19, 0x0F	; 15
    2644:	49 e4       	ldi	r20, 0x49	; 73
    2646:	50 e4       	ldi	r21, 0x40	; 64
    2648:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    264c:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <cos>
    2650:	6b 01       	movw	r12, r22
    2652:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    2654:	69 81       	ldd	r22, Y+1	; 0x01
    2656:	7a 81       	ldd	r23, Y+2	; 0x02
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	64 0d       	add	r22, r4
    265e:	75 1d       	adc	r23, r5
    2660:	86 1d       	adc	r24, r6
    2662:	97 1d       	adc	r25, r7
    2664:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    2668:	2b 01       	movw	r4, r22
    266a:	3c 01       	movw	r6, r24
    266c:	c5 01       	movw	r24, r10
    266e:	b4 01       	movw	r22, r8
    2670:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    2674:	9b 01       	movw	r18, r22
    2676:	ac 01       	movw	r20, r24
    2678:	c3 01       	movw	r24, r6
    267a:	b2 01       	movw	r22, r4
    267c:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    2680:	2b ed       	ldi	r18, 0xDB	; 219
    2682:	3f e0       	ldi	r19, 0x0F	; 15
    2684:	49 e4       	ldi	r20, 0x49	; 73
    2686:	50 e4       	ldi	r21, 0x40	; 64
    2688:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    268c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <sin>
    2690:	4b 01       	movw	r8, r22
    2692:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    2694:	60 91 c5 28 	lds	r22, 0x28C5
    2698:	70 91 c6 28 	lds	r23, 0x28C6
    269c:	80 91 c7 28 	lds	r24, 0x28C7
    26a0:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    26a4:	40 90 c5 28 	lds	r4, 0x28C5
    26a8:	50 90 c6 28 	lds	r5, 0x28C6
    26ac:	60 90 c7 28 	lds	r6, 0x28C7
    26b0:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26b4:	20 91 23 2e 	lds	r18, 0x2E23
    26b8:	30 91 24 2e 	lds	r19, 0x2E24
    26bc:	40 91 25 2e 	lds	r20, 0x2E25
    26c0:	50 91 26 2e 	lds	r21, 0x2E26
    26c4:	29 83       	std	Y+1, r18	; 0x01
    26c6:	3a 83       	std	Y+2, r19	; 0x02
    26c8:	4b 83       	std	Y+3, r20	; 0x03
    26ca:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    26cc:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    26d0:	a7 01       	movw	r20, r14
    26d2:	96 01       	movw	r18, r12
    26d4:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26d8:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    26dc:	09 81       	ldd	r16, Y+1	; 0x01
    26de:	1a 81       	ldd	r17, Y+2	; 0x02
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	06 0f       	add	r16, r22
    26e6:	17 1f       	adc	r17, r23
    26e8:	28 1f       	adc	r18, r24
    26ea:	39 1f       	adc	r19, r25
    26ec:	00 93 ae 24 	sts	0x24AE, r16
    26f0:	10 93 af 24 	sts	0x24AF, r17
    26f4:	20 93 b0 24 	sts	0x24B0, r18
    26f8:	30 93 b1 24 	sts	0x24B1, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    26fc:	c0 90 02 2a 	lds	r12, 0x2A02
    2700:	d0 90 03 2a 	lds	r13, 0x2A03
    2704:	e0 90 04 2a 	lds	r14, 0x2A04
    2708:	f0 90 05 2a 	lds	r15, 0x2A05
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    270c:	c3 01       	movw	r24, r6
    270e:	b2 01       	movw	r22, r4
    2710:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    2714:	a5 01       	movw	r20, r10
    2716:	94 01       	movw	r18, r8
    2718:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    271c:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    2720:	c6 0e       	add	r12, r22
    2722:	d7 1e       	adc	r13, r23
    2724:	e8 1e       	adc	r14, r24
    2726:	f9 1e       	adc	r15, r25
    2728:	c0 92 0b 2e 	sts	0x2E0B, r12
    272c:	d0 92 0c 2e 	sts	0x2E0C, r13
    2730:	e0 92 0d 2e 	sts	0x2E0D, r14
    2734:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2738:	80 91 6e 29 	lds	r24, 0x296E
    273c:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    2740:	00 e0       	ldi	r16, 0x00	; 0
    2742:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2744:	f8 01       	movw	r30, r16
    2746:	e3 52       	subi	r30, 0x23	; 35
    2748:	f7 4d       	sbci	r31, 0xD7	; 215
    274a:	60 81       	ld	r22, Z
    274c:	8b e0       	ldi	r24, 0x0B	; 11
    274e:	90 e2       	ldi	r25, 0x20	; 32
    2750:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2754:	88 23       	and	r24, r24
    2756:	11 f0       	breq	.+4      	; 0x275c <__vector_61+0xb2c>
					{
						i++;
    2758:	0f 5f       	subi	r16, 0xFF	; 255
    275a:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    275c:	10 16       	cp	r1, r16
    275e:	11 06       	cpc	r1, r17
    2760:	8c f7       	brge	.-30     	; 0x2744 <__vector_61+0xb14>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2762:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2766:	10 92 5d 29 	sts	0x295D, r1
    276a:	ff c6       	rjmp	.+3582   	; 0x356a <__vector_61+0x193a>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    276c:	80 91 6e 29 	lds	r24, 0x296E
    2770:	85 30       	cpi	r24, 0x05	; 5
    2772:	09 f0       	breq	.+2      	; 0x2776 <__vector_61+0xb46>
    2774:	6e c0       	rjmp	.+220    	; 0x2852 <__vector_61+0xc22>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2776:	80 91 5d 29 	lds	r24, 0x295D
    277a:	83 30       	cpi	r24, 0x03	; 3
    277c:	08 f4       	brcc	.+2      	; 0x2780 <__vector_61+0xb50>
    277e:	f5 c6       	rjmp	.+3562   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2780:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    278a:	80 91 6f 29 	lds	r24, 0x296F
    278e:	88 23       	and	r24, r24
    2790:	8c f4       	brge	.+34     	; 0x27b4 <__vector_61+0xb84>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    2792:	80 91 6f 29 	lds	r24, 0x296F
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 01       	movw	r18, r24
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	80 58       	subi	r24, 0x80	; 128
    27a8:	92 40       	sbci	r25, 0x02	; 2
    27aa:	80 93 7b 2e 	sts	0x2E7B, r24
    27ae:	90 93 7c 2e 	sts	0x2E7C, r25
    27b2:	10 c0       	rjmp	.+32     	; 0x27d4 <__vector_61+0xba4>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    27b4:	80 91 6f 29 	lds	r24, 0x296F
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9c 01       	movw	r18, r24
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	80 58       	subi	r24, 0x80	; 128
    27ca:	92 40       	sbci	r25, 0x02	; 2
    27cc:	80 93 7b 2e 	sts	0x2E7B, r24
    27d0:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    27d4:	80 91 70 29 	lds	r24, 0x2970
    27d8:	88 23       	and	r24, r24
    27da:	8c f4       	brge	.+34     	; 0x27fe <__vector_61+0xbce>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    27dc:	80 91 70 29 	lds	r24, 0x2970
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9c 01       	movw	r18, r24
    27e4:	22 0f       	add	r18, r18
    27e6:	33 1f       	adc	r19, r19
    27e8:	22 0f       	add	r18, r18
    27ea:	33 1f       	adc	r19, r19
    27ec:	82 0f       	add	r24, r18
    27ee:	93 1f       	adc	r25, r19
    27f0:	80 58       	subi	r24, 0x80	; 128
    27f2:	92 40       	sbci	r25, 0x02	; 2
    27f4:	80 93 79 2e 	sts	0x2E79, r24
    27f8:	90 93 7a 2e 	sts	0x2E7A, r25
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <__vector_61+0xbee>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    27fe:	80 91 70 29 	lds	r24, 0x2970
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 01       	movw	r18, r24
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	22 0f       	add	r18, r18
    280c:	33 1f       	adc	r19, r19
    280e:	82 0f       	add	r24, r18
    2810:	93 1f       	adc	r25, r19
    2812:	80 58       	subi	r24, 0x80	; 128
    2814:	92 40       	sbci	r25, 0x02	; 2
    2816:	80 93 79 2e 	sts	0x2E79, r24
    281a:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    281e:	80 91 6e 29 	lds	r24, 0x296E
    2822:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    2826:	00 e0       	ldi	r16, 0x00	; 0
    2828:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    282a:	f8 01       	movw	r30, r16
    282c:	e3 52       	subi	r30, 0x23	; 35
    282e:	f7 4d       	sbci	r31, 0xD7	; 215
    2830:	60 81       	ld	r22, Z
    2832:	8b e0       	ldi	r24, 0x0B	; 11
    2834:	90 e2       	ldi	r25, 0x20	; 32
    2836:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    283a:	88 23       	and	r24, r24
    283c:	11 f0       	breq	.+4      	; 0x2842 <__vector_61+0xc12>
					{
						i++;
    283e:	0f 5f       	subi	r16, 0xFF	; 255
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2842:	10 16       	cp	r1, r16
    2844:	11 06       	cpc	r1, r17
    2846:	8c f7       	brge	.-30     	; 0x282a <__vector_61+0xbfa>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2848:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    284c:	10 92 5d 29 	sts	0x295D, r1
    2850:	8c c6       	rjmp	.+3352   	; 0x356a <__vector_61+0x193a>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    2852:	80 91 6e 29 	lds	r24, 0x296E
    2856:	86 30       	cpi	r24, 0x06	; 6
    2858:	09 f0       	breq	.+2      	; 0x285c <__vector_61+0xc2c>
    285a:	56 c0       	rjmp	.+172    	; 0x2908 <__vector_61+0xcd8>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    285c:	80 91 5d 29 	lds	r24, 0x295D
    2860:	87 30       	cpi	r24, 0x07	; 7
    2862:	08 f4       	brcc	.+2      	; 0x2866 <__vector_61+0xc36>
    2864:	82 c6       	rjmp	.+3332   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2866:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    286a:	e0 e4       	ldi	r30, 0x40	; 64
    286c:	f6 e0       	ldi	r31, 0x06	; 6
    286e:	94 81       	ldd	r25, Z+4	; 0x04
    2870:	4f e6       	ldi	r20, 0x6F	; 111
    2872:	59 e2       	ldi	r21, 0x29	; 41
    2874:	da 01       	movw	r26, r20
    2876:	8c 91       	ld	r24, X
    2878:	60 e7       	ldi	r22, 0x70	; 112
    287a:	79 e2       	ldi	r23, 0x29	; 41
    287c:	db 01       	movw	r26, r22
    287e:	2c 91       	ld	r18, X
    2880:	82 23       	and	r24, r18
    2882:	89 2b       	or	r24, r25
    2884:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    2886:	94 81       	ldd	r25, Z+4	; 0x04
    2888:	da 01       	movw	r26, r20
    288a:	8c 91       	ld	r24, X
    288c:	db 01       	movw	r26, r22
    288e:	2c 91       	ld	r18, X
    2890:	82 27       	eor	r24, r18
    2892:	80 95       	com	r24
    2894:	89 23       	and	r24, r25
    2896:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    2898:	80 91 71 29 	lds	r24, 0x2971
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	88 58       	subi	r24, 0x88	; 136
    28a0:	9f 4f       	sbci	r25, 0xFF	; 255
    28a2:	e0 e0       	ldi	r30, 0x00	; 0
    28a4:	fb e0       	ldi	r31, 0x0B	; 11
    28a6:	80 a7       	std	Z+40, r24	; 0x28
    28a8:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    28aa:	80 91 72 29 	lds	r24, 0x2972
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	88 58       	subi	r24, 0x88	; 136
    28b2:	9f 4f       	sbci	r25, 0xFF	; 255
    28b4:	82 a7       	std	Z+42, r24	; 0x2a
    28b6:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    28b8:	80 91 73 29 	lds	r24, 0x2973
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	88 58       	subi	r24, 0x88	; 136
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	84 a7       	std	Z+44, r24	; 0x2c
    28c4:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    28c6:	80 91 74 29 	lds	r24, 0x2974
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	88 58       	subi	r24, 0x88	; 136
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	86 a7       	std	Z+46, r24	; 0x2e
    28d2:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    28d4:	80 91 6e 29 	lds	r24, 0x296E
    28d8:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    28dc:	00 e0       	ldi	r16, 0x00	; 0
    28de:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    28e0:	f8 01       	movw	r30, r16
    28e2:	e3 52       	subi	r30, 0x23	; 35
    28e4:	f7 4d       	sbci	r31, 0xD7	; 215
    28e6:	60 81       	ld	r22, Z
    28e8:	8b e0       	ldi	r24, 0x0B	; 11
    28ea:	90 e2       	ldi	r25, 0x20	; 32
    28ec:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    28f0:	88 23       	and	r24, r24
    28f2:	11 f0       	breq	.+4      	; 0x28f8 <__vector_61+0xcc8>
					{
						i++;
    28f4:	0f 5f       	subi	r16, 0xFF	; 255
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    28f8:	10 16       	cp	r1, r16
    28fa:	11 06       	cpc	r1, r17
    28fc:	8c f7       	brge	.-30     	; 0x28e0 <__vector_61+0xcb0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    28fe:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    2902:	10 92 5d 29 	sts	0x295D, r1
    2906:	31 c6       	rjmp	.+3170   	; 0x356a <__vector_61+0x193a>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    2908:	80 91 6e 29 	lds	r24, 0x296E
    290c:	87 30       	cpi	r24, 0x07	; 7
    290e:	09 f0       	breq	.+2      	; 0x2912 <__vector_61+0xce2>
    2910:	7d c1       	rjmp	.+762    	; 0x2c0c <__vector_61+0xfdc>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    2912:	80 91 5d 29 	lds	r24, 0x295D
    2916:	87 30       	cpi	r24, 0x07	; 7
    2918:	08 f4       	brcc	.+2      	; 0x291c <__vector_61+0xcec>
    291a:	27 c6       	rjmp	.+3150   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    291c:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2920:	80 91 6f 29 	lds	r24, 0x296F
    2924:	8f 3f       	cpi	r24, 0xFF	; 255
    2926:	29 f4       	brne	.+10     	; 0x2932 <__vector_61+0xd02>
    2928:	80 91 70 29 	lds	r24, 0x2970
    292c:	8f 3f       	cpi	r24, 0xFF	; 255
    292e:	09 f4       	brne	.+2      	; 0x2932 <__vector_61+0xd02>
    2930:	6d c0       	rjmp	.+218    	; 0x2a0c <__vector_61+0xddc>
				{
					X_pos = 0;
    2932:	10 92 23 2e 	sts	0x2E23, r1
    2936:	10 92 24 2e 	sts	0x2E24, r1
    293a:	10 92 25 2e 	sts	0x2E25, r1
    293e:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= (int)receiveArray[1] << 8;
    2942:	20 91 6f 29 	lds	r18, 0x296F
    2946:	40 91 23 2e 	lds	r20, 0x2E23
    294a:	50 91 24 2e 	lds	r21, 0x2E24
    294e:	60 91 25 2e 	lds	r22, 0x2E25
    2952:	70 91 26 2e 	lds	r23, 0x2E26
    2956:	92 2f       	mov	r25, r18
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	aa 27       	eor	r26, r26
    295c:	97 fd       	sbrc	r25, 7
    295e:	a0 95       	com	r26
    2960:	ba 2f       	mov	r27, r26
    2962:	84 2b       	or	r24, r20
    2964:	95 2b       	or	r25, r21
    2966:	a6 2b       	or	r26, r22
    2968:	b7 2b       	or	r27, r23
    296a:	80 93 23 2e 	sts	0x2E23, r24
    296e:	90 93 24 2e 	sts	0x2E24, r25
    2972:	a0 93 25 2e 	sts	0x2E25, r26
    2976:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    297a:	20 91 70 29 	lds	r18, 0x2970
    297e:	80 91 23 2e 	lds	r24, 0x2E23
    2982:	90 91 24 2e 	lds	r25, 0x2E24
    2986:	a0 91 25 2e 	lds	r26, 0x2E25
    298a:	b0 91 26 2e 	lds	r27, 0x2E26
    298e:	82 2b       	or	r24, r18
    2990:	80 93 23 2e 	sts	0x2E23, r24
    2994:	90 93 24 2e 	sts	0x2E24, r25
    2998:	a0 93 25 2e 	sts	0x2E25, r26
    299c:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    29a0:	a0 91 00 2e 	lds	r26, 0x2E00
    29a4:	b0 91 01 2e 	lds	r27, 0x2E01
    29a8:	20 91 23 2e 	lds	r18, 0x2E23
    29ac:	30 91 24 2e 	lds	r19, 0x2E24
    29b0:	40 91 25 2e 	lds	r20, 0x2E25
    29b4:	50 91 26 2e 	lds	r21, 0x2E26
    29b8:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    29bc:	60 93 23 2e 	sts	0x2E23, r22
    29c0:	70 93 24 2e 	sts	0x2E24, r23
    29c4:	80 93 25 2e 	sts	0x2E25, r24
    29c8:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    29cc:	80 91 23 2e 	lds	r24, 0x2E23
    29d0:	90 91 24 2e 	lds	r25, 0x2E24
    29d4:	a0 91 25 2e 	lds	r26, 0x2E25
    29d8:	b0 91 26 2e 	lds	r27, 0x2E26
    29dc:	80 93 ae 24 	sts	0x24AE, r24
    29e0:	90 93 af 24 	sts	0x24AF, r25
    29e4:	a0 93 b0 24 	sts	0x24B0, r26
    29e8:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    29ec:	80 91 23 2e 	lds	r24, 0x2E23
    29f0:	90 91 24 2e 	lds	r25, 0x2E24
    29f4:	a0 91 25 2e 	lds	r26, 0x2E25
    29f8:	b0 91 26 2e 	lds	r27, 0x2E26
    29fc:	80 93 31 2e 	sts	0x2E31, r24
    2a00:	90 93 32 2e 	sts	0x2E32, r25
    2a04:	a0 93 33 2e 	sts	0x2E33, r26
    2a08:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2a0c:	80 91 71 29 	lds	r24, 0x2971
    2a10:	8f 3f       	cpi	r24, 0xFF	; 255
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <__vector_61+0xdee>
    2a14:	80 91 72 29 	lds	r24, 0x2972
    2a18:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <__vector_61+0xdee>
    2a1c:	6d c0       	rjmp	.+218    	; 0x2af8 <__vector_61+0xec8>
				{
					Y_pos = 0;
    2a1e:	10 92 02 2a 	sts	0x2A02, r1
    2a22:	10 92 03 2a 	sts	0x2A03, r1
    2a26:	10 92 04 2a 	sts	0x2A04, r1
    2a2a:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= (int)receiveArray[3] << 8;
    2a2e:	20 91 71 29 	lds	r18, 0x2971
    2a32:	40 91 02 2a 	lds	r20, 0x2A02
    2a36:	50 91 03 2a 	lds	r21, 0x2A03
    2a3a:	60 91 04 2a 	lds	r22, 0x2A04
    2a3e:	70 91 05 2a 	lds	r23, 0x2A05
    2a42:	92 2f       	mov	r25, r18
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	aa 27       	eor	r26, r26
    2a48:	97 fd       	sbrc	r25, 7
    2a4a:	a0 95       	com	r26
    2a4c:	ba 2f       	mov	r27, r26
    2a4e:	84 2b       	or	r24, r20
    2a50:	95 2b       	or	r25, r21
    2a52:	a6 2b       	or	r26, r22
    2a54:	b7 2b       	or	r27, r23
    2a56:	80 93 02 2a 	sts	0x2A02, r24
    2a5a:	90 93 03 2a 	sts	0x2A03, r25
    2a5e:	a0 93 04 2a 	sts	0x2A04, r26
    2a62:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    2a66:	20 91 72 29 	lds	r18, 0x2972
    2a6a:	80 91 02 2a 	lds	r24, 0x2A02
    2a6e:	90 91 03 2a 	lds	r25, 0x2A03
    2a72:	a0 91 04 2a 	lds	r26, 0x2A04
    2a76:	b0 91 05 2a 	lds	r27, 0x2A05
    2a7a:	82 2b       	or	r24, r18
    2a7c:	80 93 02 2a 	sts	0x2A02, r24
    2a80:	90 93 03 2a 	sts	0x2A03, r25
    2a84:	a0 93 04 2a 	sts	0x2A04, r26
    2a88:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    2a8c:	a0 91 00 2e 	lds	r26, 0x2E00
    2a90:	b0 91 01 2e 	lds	r27, 0x2E01
    2a94:	20 91 0b 2e 	lds	r18, 0x2E0B
    2a98:	30 91 0c 2e 	lds	r19, 0x2E0C
    2a9c:	40 91 0d 2e 	lds	r20, 0x2E0D
    2aa0:	50 91 0e 2e 	lds	r21, 0x2E0E
    2aa4:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    2aa8:	60 93 02 2a 	sts	0x2A02, r22
    2aac:	70 93 03 2a 	sts	0x2A03, r23
    2ab0:	80 93 04 2a 	sts	0x2A04, r24
    2ab4:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    2ab8:	80 91 02 2a 	lds	r24, 0x2A02
    2abc:	90 91 03 2a 	lds	r25, 0x2A03
    2ac0:	a0 91 04 2a 	lds	r26, 0x2A04
    2ac4:	b0 91 05 2a 	lds	r27, 0x2A05
    2ac8:	80 93 0b 2e 	sts	0x2E0B, r24
    2acc:	90 93 0c 2e 	sts	0x2E0C, r25
    2ad0:	a0 93 0d 2e 	sts	0x2E0D, r26
    2ad4:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    2ad8:	80 91 02 2a 	lds	r24, 0x2A02
    2adc:	90 91 03 2a 	lds	r25, 0x2A03
    2ae0:	a0 91 04 2a 	lds	r26, 0x2A04
    2ae4:	b0 91 05 2a 	lds	r27, 0x2A05
    2ae8:	80 93 70 2e 	sts	0x2E70, r24
    2aec:	90 93 71 2e 	sts	0x2E71, r25
    2af0:	a0 93 72 2e 	sts	0x2E72, r26
    2af4:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2af8:	80 91 73 29 	lds	r24, 0x2973
    2afc:	8f 3f       	cpi	r24, 0xFF	; 255
    2afe:	29 f4       	brne	.+10     	; 0x2b0a <__vector_61+0xeda>
    2b00:	80 91 74 29 	lds	r24, 0x2974
    2b04:	8f 3f       	cpi	r24, 0xFF	; 255
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <__vector_61+0xeda>
    2b08:	67 c0       	rjmp	.+206    	; 0x2bd8 <__vector_61+0xfa8>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    2b0a:	10 92 83 32 	sts	0x3283, r1
    2b0e:	10 92 84 32 	sts	0x3284, r1
    2b12:	10 92 85 32 	sts	0x3285, r1
    2b16:	10 92 86 32 	sts	0x3286, r1
					teta |= (int)receiveArray[5] << 8;
    2b1a:	20 91 73 29 	lds	r18, 0x2973
    2b1e:	40 91 83 32 	lds	r20, 0x3283
    2b22:	50 91 84 32 	lds	r21, 0x3284
    2b26:	60 91 85 32 	lds	r22, 0x3285
    2b2a:	70 91 86 32 	lds	r23, 0x3286
    2b2e:	92 2f       	mov	r25, r18
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	aa 27       	eor	r26, r26
    2b34:	97 fd       	sbrc	r25, 7
    2b36:	a0 95       	com	r26
    2b38:	ba 2f       	mov	r27, r26
    2b3a:	84 2b       	or	r24, r20
    2b3c:	95 2b       	or	r25, r21
    2b3e:	a6 2b       	or	r26, r22
    2b40:	b7 2b       	or	r27, r23
    2b42:	80 93 83 32 	sts	0x3283, r24
    2b46:	90 93 84 32 	sts	0x3284, r25
    2b4a:	a0 93 85 32 	sts	0x3285, r26
    2b4e:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    2b52:	20 91 74 29 	lds	r18, 0x2974
    2b56:	80 91 83 32 	lds	r24, 0x3283
    2b5a:	90 91 84 32 	lds	r25, 0x3284
    2b5e:	a0 91 85 32 	lds	r26, 0x3285
    2b62:	b0 91 86 32 	lds	r27, 0x3286
    2b66:	82 2b       	or	r24, r18
    2b68:	80 93 83 32 	sts	0x3283, r24
    2b6c:	90 93 84 32 	sts	0x3284, r25
    2b70:	a0 93 85 32 	sts	0x3285, r26
    2b74:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    2b78:	20 91 83 32 	lds	r18, 0x3283
    2b7c:	30 91 84 32 	lds	r19, 0x3284
    2b80:	40 91 85 32 	lds	r20, 0x3285
    2b84:	50 91 86 32 	lds	r21, 0x3286
    2b88:	60 91 75 32 	lds	r22, 0x3275
    2b8c:	70 91 76 32 	lds	r23, 0x3276
    2b90:	80 91 77 32 	lds	r24, 0x3277
    2b94:	90 91 78 32 	lds	r25, 0x3278
    2b98:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    2b9c:	28 e6       	ldi	r18, 0x68	; 104
    2b9e:	31 e0       	ldi	r19, 0x01	; 1
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    2ba8:	20 93 83 32 	sts	0x3283, r18
    2bac:	30 93 84 32 	sts	0x3284, r19
    2bb0:	40 93 85 32 	sts	0x3285, r20
    2bb4:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    2bb8:	80 91 83 32 	lds	r24, 0x3283
    2bbc:	90 91 84 32 	lds	r25, 0x3284
    2bc0:	a0 91 85 32 	lds	r26, 0x3285
    2bc4:	b0 91 86 32 	lds	r27, 0x3286
    2bc8:	80 93 cc 24 	sts	0x24CC, r24
    2bcc:	90 93 cd 24 	sts	0x24CD, r25
    2bd0:	a0 93 ce 24 	sts	0x24CE, r26
    2bd4:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2bd8:	80 91 6e 29 	lds	r24, 0x296E
    2bdc:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    2be0:	00 e0       	ldi	r16, 0x00	; 0
    2be2:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2be4:	f8 01       	movw	r30, r16
    2be6:	e3 52       	subi	r30, 0x23	; 35
    2be8:	f7 4d       	sbci	r31, 0xD7	; 215
    2bea:	60 81       	ld	r22, Z
    2bec:	8b e0       	ldi	r24, 0x0B	; 11
    2bee:	90 e2       	ldi	r25, 0x20	; 32
    2bf0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2bf4:	88 23       	and	r24, r24
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <__vector_61+0xfcc>
					{
						i++;
    2bf8:	0f 5f       	subi	r16, 0xFF	; 255
    2bfa:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2bfc:	10 16       	cp	r1, r16
    2bfe:	11 06       	cpc	r1, r17
    2c00:	8c f7       	brge	.-30     	; 0x2be4 <__vector_61+0xfb4>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c02:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    2c06:	10 92 5d 29 	sts	0x295D, r1
    2c0a:	af c4       	rjmp	.+2398   	; 0x356a <__vector_61+0x193a>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    2c0c:	80 91 6e 29 	lds	r24, 0x296E
    2c10:	88 30       	cpi	r24, 0x08	; 8
    2c12:	d9 f5       	brne	.+118    	; 0x2c8a <__vector_61+0x105a>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2c14:	80 91 5d 29 	lds	r24, 0x295D
    2c18:	83 30       	cpi	r24, 0x03	; 3
    2c1a:	08 f4       	brcc	.+2      	; 0x2c1e <__vector_61+0xfee>
    2c1c:	a6 c4       	rjmp	.+2380   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2c1e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    2c22:	80 91 6f 29 	lds	r24, 0x296F
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	39 f4       	brne	.+14     	; 0x2c38 <__vector_61+0x1008>
				{
					stop_PID_levi = 1;
    2c2a:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    2c2e:	10 92 7b 2e 	sts	0x2E7B, r1
    2c32:	10 92 7c 2e 	sts	0x2E7C, r1
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <__vector_61+0x100c>
				}				
				else
					stop_PID_levi = 0;
    2c38:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    2c3c:	80 91 70 29 	lds	r24, 0x2970
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	39 f4       	brne	.+14     	; 0x2c52 <__vector_61+0x1022>
				{
					stop_PID_desni = 1;
    2c44:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    2c48:	10 92 79 2e 	sts	0x2E79, r1
    2c4c:	10 92 7a 2e 	sts	0x2E7A, r1
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <__vector_61+0x1026>
				}					
				else
					stop_PID_desni = 0;
    2c52:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2c56:	80 91 6e 29 	lds	r24, 0x296E
    2c5a:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    2c5e:	00 e0       	ldi	r16, 0x00	; 0
    2c60:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2c62:	f8 01       	movw	r30, r16
    2c64:	e3 52       	subi	r30, 0x23	; 35
    2c66:	f7 4d       	sbci	r31, 0xD7	; 215
    2c68:	60 81       	ld	r22, Z
    2c6a:	8b e0       	ldi	r24, 0x0B	; 11
    2c6c:	90 e2       	ldi	r25, 0x20	; 32
    2c6e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2c72:	88 23       	and	r24, r24
    2c74:	11 f0       	breq	.+4      	; 0x2c7a <__vector_61+0x104a>
					{
						i++;
    2c76:	0f 5f       	subi	r16, 0xFF	; 255
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2c7a:	10 16       	cp	r1, r16
    2c7c:	11 06       	cpc	r1, r17
    2c7e:	8c f7       	brge	.-30     	; 0x2c62 <__vector_61+0x1032>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c80:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2c84:	10 92 5d 29 	sts	0x295D, r1
    2c88:	70 c4       	rjmp	.+2272   	; 0x356a <__vector_61+0x193a>
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//CIATNJE ADRESIRANOG PARAMETRA - 9
	else if(receiveArray[0] == 9)					//provera funkcijskog bajta
    2c8a:	80 91 6e 29 	lds	r24, 0x296E
    2c8e:	89 30       	cpi	r24, 0x09	; 9
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <__vector_61+0x1064>
    2c92:	03 c1       	rjmp	.+518    	; 0x2e9a <__vector_61+0x126a>
	{
		if(RX_i_E1 >= 6)								//stigla je cela poruka (7)
    2c94:	80 91 5d 29 	lds	r24, 0x295D
    2c98:	86 30       	cpi	r24, 0x06	; 6
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <__vector_61+0x106e>
    2c9c:	66 c4       	rjmp	.+2252   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena		
    2c9e:	10 92 fb 2d 	sts	0x2DFB, r1
// 			for(i=0; i<=4; i++)						//racunanje CHC
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)			//CHC ok
			{
				adresa_long = 0;
    2ca2:	10 92 66 29 	sts	0x2966, r1
    2ca6:	10 92 67 29 	sts	0x2967, r1
    2caa:	10 92 68 29 	sts	0x2968, r1
    2cae:	10 92 69 29 	sts	0x2969, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2cb2:	20 91 70 29 	lds	r18, 0x2970
    2cb6:	80 91 66 29 	lds	r24, 0x2966
    2cba:	90 91 67 29 	lds	r25, 0x2967
    2cbe:	a0 91 68 29 	lds	r26, 0x2968
    2cc2:	b0 91 69 29 	lds	r27, 0x2969
    2cc6:	b2 2b       	or	r27, r18
    2cc8:	80 93 66 29 	sts	0x2966, r24
    2ccc:	90 93 67 29 	sts	0x2967, r25
    2cd0:	a0 93 68 29 	sts	0x2968, r26
    2cd4:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2cd8:	20 91 71 29 	lds	r18, 0x2971
    2cdc:	80 91 66 29 	lds	r24, 0x2966
    2ce0:	90 91 67 29 	lds	r25, 0x2967
    2ce4:	a0 91 68 29 	lds	r26, 0x2968
    2ce8:	b0 91 69 29 	lds	r27, 0x2969
    2cec:	a2 2b       	or	r26, r18
    2cee:	80 93 66 29 	sts	0x2966, r24
    2cf2:	90 93 67 29 	sts	0x2967, r25
    2cf6:	a0 93 68 29 	sts	0x2968, r26
    2cfa:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2cfe:	20 91 72 29 	lds	r18, 0x2972
    2d02:	80 91 66 29 	lds	r24, 0x2966
    2d06:	90 91 67 29 	lds	r25, 0x2967
    2d0a:	a0 91 68 29 	lds	r26, 0x2968
    2d0e:	b0 91 69 29 	lds	r27, 0x2969
    2d12:	92 2b       	or	r25, r18
    2d14:	80 93 66 29 	sts	0x2966, r24
    2d18:	90 93 67 29 	sts	0x2967, r25
    2d1c:	a0 93 68 29 	sts	0x2968, r26
    2d20:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[5];
    2d24:	20 91 73 29 	lds	r18, 0x2973
    2d28:	80 91 66 29 	lds	r24, 0x2966
    2d2c:	90 91 67 29 	lds	r25, 0x2967
    2d30:	a0 91 68 29 	lds	r26, 0x2968
    2d34:	b0 91 69 29 	lds	r27, 0x2969
    2d38:	82 2b       	or	r24, r18
    2d3a:	80 93 66 29 	sts	0x2966, r24
    2d3e:	90 93 67 29 	sts	0x2967, r25
    2d42:	a0 93 68 29 	sts	0x2968, r26
    2d46:	b0 93 69 29 	sts	0x2969, r27
	
				//unsigned long registerValue = mmio32(adresa_long);		// read
					
				if (receiveArray[1] == 1)	//jednobajtna promenljiva
    2d4a:	80 91 6f 29 	lds	r24, 0x296F
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	b1 f4       	brne	.+44     	; 0x2d7e <__vector_61+0x114e>
				{
					sendArray[4] = mmio32(adresa_long);
    2d52:	80 91 66 29 	lds	r24, 0x2966
    2d56:	90 91 67 29 	lds	r25, 0x2967
    2d5a:	a0 91 68 29 	lds	r26, 0x2968
    2d5e:	b0 91 69 29 	lds	r27, 0x2969
    2d62:	fc 01       	movw	r30, r24
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	a2 81       	ldd	r26, Z+2	; 0x02
    2d6a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d6c:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = 0;
    2d70:	10 92 e0 28 	sts	0x28E0, r1
					sendArray[2] = 0;
    2d74:	10 92 df 28 	sts	0x28DF, r1
					sendArray[1] = 0;
    2d78:	10 92 de 28 	sts	0x28DE, r1
    2d7c:	74 c0       	rjmp	.+232    	; 0x2e66 <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 2) //dvobajtna promenljiva
    2d7e:	80 91 6f 29 	lds	r24, 0x296F
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	31 f5       	brne	.+76     	; 0x2dd2 <__vector_61+0x11a2>
				{
					sendArray[4] = mmio32(adresa_long);
    2d86:	80 91 66 29 	lds	r24, 0x2966
    2d8a:	90 91 67 29 	lds	r25, 0x2967
    2d8e:	a0 91 68 29 	lds	r26, 0x2968
    2d92:	b0 91 69 29 	lds	r27, 0x2969
    2d96:	fc 01       	movw	r30, r24
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d9e:	b3 81       	ldd	r27, Z+3	; 0x03
    2da0:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = mmio32(adresa_long+1);
    2da4:	80 91 66 29 	lds	r24, 0x2966
    2da8:	90 91 67 29 	lds	r25, 0x2967
    2dac:	a0 91 68 29 	lds	r26, 0x2968
    2db0:	b0 91 69 29 	lds	r27, 0x2969
    2db4:	01 96       	adiw	r24, 0x01	; 1
    2db6:	a1 1d       	adc	r26, r1
    2db8:	b1 1d       	adc	r27, r1
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	a2 81       	ldd	r26, Z+2	; 0x02
    2dc2:	b3 81       	ldd	r27, Z+3	; 0x03
    2dc4:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[2] = 0;
    2dc8:	10 92 df 28 	sts	0x28DF, r1
					sendArray[1] = 0;
    2dcc:	10 92 de 28 	sts	0x28DE, r1
    2dd0:	4a c0       	rjmp	.+148    	; 0x2e66 <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2dd2:	80 91 6f 29 	lds	r24, 0x296F
    2dd6:	84 30       	cpi	r24, 0x04	; 4
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <__vector_61+0x11ac>
    2dda:	45 c0       	rjmp	.+138    	; 0x2e66 <__vector_61+0x1236>
				{
					sendArray[4] = mmio32(adresa_long);
    2ddc:	80 91 66 29 	lds	r24, 0x2966
    2de0:	90 91 67 29 	lds	r25, 0x2967
    2de4:	a0 91 68 29 	lds	r26, 0x2968
    2de8:	b0 91 69 29 	lds	r27, 0x2969
    2dec:	fc 01       	movw	r30, r24
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	a2 81       	ldd	r26, Z+2	; 0x02
    2df4:	b3 81       	ldd	r27, Z+3	; 0x03
    2df6:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = mmio32(adresa_long+1);
    2dfa:	80 91 66 29 	lds	r24, 0x2966
    2dfe:	90 91 67 29 	lds	r25, 0x2967
    2e02:	a0 91 68 29 	lds	r26, 0x2968
    2e06:	b0 91 69 29 	lds	r27, 0x2969
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	b1 1d       	adc	r27, r1
    2e10:	fc 01       	movw	r30, r24
    2e12:	80 81       	ld	r24, Z
    2e14:	91 81       	ldd	r25, Z+1	; 0x01
    2e16:	a2 81       	ldd	r26, Z+2	; 0x02
    2e18:	b3 81       	ldd	r27, Z+3	; 0x03
    2e1a:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[2] = mmio32(adresa_long+2);
    2e1e:	80 91 66 29 	lds	r24, 0x2966
    2e22:	90 91 67 29 	lds	r25, 0x2967
    2e26:	a0 91 68 29 	lds	r26, 0x2968
    2e2a:	b0 91 69 29 	lds	r27, 0x2969
    2e2e:	02 96       	adiw	r24, 0x02	; 2
    2e30:	a1 1d       	adc	r26, r1
    2e32:	b1 1d       	adc	r27, r1
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e3c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e3e:	80 93 df 28 	sts	0x28DF, r24
					sendArray[1] = mmio32(adresa_long+3);
    2e42:	80 91 66 29 	lds	r24, 0x2966
    2e46:	90 91 67 29 	lds	r25, 0x2967
    2e4a:	a0 91 68 29 	lds	r26, 0x2968
    2e4e:	b0 91 69 29 	lds	r27, 0x2969
    2e52:	03 96       	adiw	r24, 0x03	; 3
    2e54:	a1 1d       	adc	r26, r1
    2e56:	b1 1d       	adc	r27, r1
    2e58:	fc 01       	movw	r30, r24
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e60:	b3 81       	ldd	r27, Z+3	; 0x03
    2e62:	80 93 de 28 	sts	0x28DE, r24
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2e66:	80 91 6e 29 	lds	r24, 0x296E
    2e6a:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[2] = mmio32(adresa_long+2);
					sendArray[1] = mmio32(adresa_long+3);
				}
								
				//slanje odgovora
				i = 0;
    2e6e:	00 e0       	ldi	r16, 0x00	; 0
    2e70:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2e72:	f8 01       	movw	r30, r16
    2e74:	e3 52       	subi	r30, 0x23	; 35
    2e76:	f7 4d       	sbci	r31, 0xD7	; 215
    2e78:	60 81       	ld	r22, Z
    2e7a:	8b e0       	ldi	r24, 0x0B	; 11
    2e7c:	90 e2       	ldi	r25, 0x20	; 32
    2e7e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2e82:	88 23       	and	r24, r24
    2e84:	11 f0       	breq	.+4      	; 0x2e8a <__vector_61+0x125a>
					{
						i++;
    2e86:	0f 5f       	subi	r16, 0xFF	; 255
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    2e8a:	05 30       	cpi	r16, 0x05	; 5
    2e8c:	11 05       	cpc	r17, r1
    2e8e:	8c f3       	brlt	.-30     	; 0x2e72 <__vector_61+0x1242>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2e90:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2e94:	10 92 5d 29 	sts	0x295D, r1
    2e98:	68 c3       	rjmp	.+1744   	; 0x356a <__vector_61+0x193a>
		}					
	}
	//UPIS U ADRESIRANU PROMENLJIVU - 10
	else if(receiveArray[0] == 10)					//provera funkcijskog bajta
    2e9a:	80 91 6e 29 	lds	r24, 0x296E
    2e9e:	8a 30       	cpi	r24, 0x0A	; 10
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <__vector_61+0x1274>
    2ea2:	8e c1       	rjmp	.+796    	; 0x31c0 <__vector_61+0x1590>
	{
		if(RX_i_E1 >= 10)								//stigla je cela poruka (1+1+4+4+1)
    2ea4:	80 91 5d 29 	lds	r24, 0x295D
    2ea8:	8a 30       	cpi	r24, 0x0A	; 10
    2eaa:	08 f4       	brcc	.+2      	; 0x2eae <__vector_61+0x127e>
    2eac:	5e c3       	rjmp	.+1724   	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2eae:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				adresa_long = 0;
    2eb2:	10 92 66 29 	sts	0x2966, r1
    2eb6:	10 92 67 29 	sts	0x2967, r1
    2eba:	10 92 68 29 	sts	0x2968, r1
    2ebe:	10 92 69 29 	sts	0x2969, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2ec2:	20 91 70 29 	lds	r18, 0x2970
    2ec6:	80 91 66 29 	lds	r24, 0x2966
    2eca:	90 91 67 29 	lds	r25, 0x2967
    2ece:	a0 91 68 29 	lds	r26, 0x2968
    2ed2:	b0 91 69 29 	lds	r27, 0x2969
    2ed6:	b2 2b       	or	r27, r18
    2ed8:	80 93 66 29 	sts	0x2966, r24
    2edc:	90 93 67 29 	sts	0x2967, r25
    2ee0:	a0 93 68 29 	sts	0x2968, r26
    2ee4:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2ee8:	20 91 71 29 	lds	r18, 0x2971
    2eec:	80 91 66 29 	lds	r24, 0x2966
    2ef0:	90 91 67 29 	lds	r25, 0x2967
    2ef4:	a0 91 68 29 	lds	r26, 0x2968
    2ef8:	b0 91 69 29 	lds	r27, 0x2969
    2efc:	a2 2b       	or	r26, r18
    2efe:	80 93 66 29 	sts	0x2966, r24
    2f02:	90 93 67 29 	sts	0x2967, r25
    2f06:	a0 93 68 29 	sts	0x2968, r26
    2f0a:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2f0e:	20 91 72 29 	lds	r18, 0x2972
    2f12:	80 91 66 29 	lds	r24, 0x2966
    2f16:	90 91 67 29 	lds	r25, 0x2967
    2f1a:	a0 91 68 29 	lds	r26, 0x2968
    2f1e:	b0 91 69 29 	lds	r27, 0x2969
    2f22:	92 2b       	or	r25, r18
    2f24:	80 93 66 29 	sts	0x2966, r24
    2f28:	90 93 67 29 	sts	0x2967, r25
    2f2c:	a0 93 68 29 	sts	0x2968, r26
    2f30:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[5];
    2f34:	20 91 73 29 	lds	r18, 0x2973
    2f38:	80 91 66 29 	lds	r24, 0x2966
    2f3c:	90 91 67 29 	lds	r25, 0x2967
    2f40:	a0 91 68 29 	lds	r26, 0x2968
    2f44:	b0 91 69 29 	lds	r27, 0x2969
    2f48:	82 2b       	or	r24, r18
    2f4a:	80 93 66 29 	sts	0x2966, r24
    2f4e:	90 93 67 29 	sts	0x2967, r25
    2f52:	a0 93 68 29 	sts	0x2968, r26
    2f56:	b0 93 69 29 	sts	0x2969, r27

				// write
				if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2f5a:	80 91 6f 29 	lds	r24, 0x296F
    2f5e:	84 30       	cpi	r24, 0x04	; 4
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <__vector_61+0x1334>
    2f62:	97 c0       	rjmp	.+302    	; 0x3092 <__vector_61+0x1462>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    2f64:	80 91 66 29 	lds	r24, 0x2966
    2f68:	90 91 67 29 	lds	r25, 0x2967
    2f6c:	a0 91 68 29 	lds	r26, 0x2968
    2f70:	b0 91 69 29 	lds	r27, 0x2969
    2f74:	fc 01       	movw	r30, r24
    2f76:	80 91 77 29 	lds	r24, 0x2977
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	80 83       	st	Z, r24
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	a2 83       	std	Z+2, r26	; 0x02
    2f86:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    2f88:	80 91 66 29 	lds	r24, 0x2966
    2f8c:	90 91 67 29 	lds	r25, 0x2967
    2f90:	a0 91 68 29 	lds	r26, 0x2968
    2f94:	b0 91 69 29 	lds	r27, 0x2969
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	a1 1d       	adc	r26, r1
    2f9c:	b1 1d       	adc	r27, r1
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	80 91 76 29 	lds	r24, 0x2976
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e0       	ldi	r26, 0x00	; 0
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	80 83       	st	Z, r24
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	a2 83       	std	Z+2, r26	; 0x02
    2fb0:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+2) = receiveArray[7];
    2fb2:	80 91 66 29 	lds	r24, 0x2966
    2fb6:	90 91 67 29 	lds	r25, 0x2967
    2fba:	a0 91 68 29 	lds	r26, 0x2968
    2fbe:	b0 91 69 29 	lds	r27, 0x2969
    2fc2:	02 96       	adiw	r24, 0x02	; 2
    2fc4:	a1 1d       	adc	r26, r1
    2fc6:	b1 1d       	adc	r27, r1
    2fc8:	fc 01       	movw	r30, r24
    2fca:	80 91 75 29 	lds	r24, 0x2975
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+3) = receiveArray[6];   
    2fdc:	80 91 66 29 	lds	r24, 0x2966
    2fe0:	90 91 67 29 	lds	r25, 0x2967
    2fe4:	a0 91 68 29 	lds	r26, 0x2968
    2fe8:	b0 91 69 29 	lds	r27, 0x2969
    2fec:	03 96       	adiw	r24, 0x03	; 3
    2fee:	a1 1d       	adc	r26, r1
    2ff0:	b1 1d       	adc	r27, r1
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	80 91 74 29 	lds	r24, 0x2974
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e0       	ldi	r26, 0x00	; 0
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	80 83       	st	Z, r24
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	a2 83       	std	Z+2, r26	; 0x02
    3004:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = mmio32(adresa_long+3);
    3006:	80 91 66 29 	lds	r24, 0x2966
    300a:	90 91 67 29 	lds	r25, 0x2967
    300e:	a0 91 68 29 	lds	r26, 0x2968
    3012:	b0 91 69 29 	lds	r27, 0x2969
    3016:	03 96       	adiw	r24, 0x03	; 3
    3018:	a1 1d       	adc	r26, r1
    301a:	b1 1d       	adc	r27, r1
    301c:	fc 01       	movw	r30, r24
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	a2 81       	ldd	r26, Z+2	; 0x02
    3024:	b3 81       	ldd	r27, Z+3	; 0x03
    3026:	80 93 de 28 	sts	0x28DE, r24
					sendArray[2] = mmio32(adresa_long+2);
    302a:	80 91 66 29 	lds	r24, 0x2966
    302e:	90 91 67 29 	lds	r25, 0x2967
    3032:	a0 91 68 29 	lds	r26, 0x2968
    3036:	b0 91 69 29 	lds	r27, 0x2969
    303a:	02 96       	adiw	r24, 0x02	; 2
    303c:	a1 1d       	adc	r26, r1
    303e:	b1 1d       	adc	r27, r1
    3040:	fc 01       	movw	r30, r24
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	a2 81       	ldd	r26, Z+2	; 0x02
    3048:	b3 81       	ldd	r27, Z+3	; 0x03
    304a:	80 93 df 28 	sts	0x28DF, r24
					sendArray[3] = mmio32(adresa_long+1);
    304e:	80 91 66 29 	lds	r24, 0x2966
    3052:	90 91 67 29 	lds	r25, 0x2967
    3056:	a0 91 68 29 	lds	r26, 0x2968
    305a:	b0 91 69 29 	lds	r27, 0x2969
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	a1 1d       	adc	r26, r1
    3062:	b1 1d       	adc	r27, r1
    3064:	fc 01       	movw	r30, r24
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	a2 81       	ldd	r26, Z+2	; 0x02
    306c:	b3 81       	ldd	r27, Z+3	; 0x03
    306e:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[4] = mmio32(adresa_long);  
    3072:	80 91 66 29 	lds	r24, 0x2966
    3076:	90 91 67 29 	lds	r25, 0x2967
    307a:	a0 91 68 29 	lds	r26, 0x2968
    307e:	b0 91 69 29 	lds	r27, 0x2969
    3082:	fc 01       	movw	r30, r24
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	a2 81       	ldd	r26, Z+2	; 0x02
    308a:	b3 81       	ldd	r27, Z+3	; 0x03
    308c:	80 93 e1 28 	sts	0x28E1, r24
    3090:	7d c0       	rjmp	.+250    	; 0x318c <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 2)	//dvobajtna promenljiva
    3092:	80 91 6f 29 	lds	r24, 0x296F
    3096:	82 30       	cpi	r24, 0x02	; 2
    3098:	09 f0       	breq	.+2      	; 0x309c <__vector_61+0x146c>
    309a:	4d c0       	rjmp	.+154    	; 0x3136 <__vector_61+0x1506>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    309c:	80 91 66 29 	lds	r24, 0x2966
    30a0:	90 91 67 29 	lds	r25, 0x2967
    30a4:	a0 91 68 29 	lds	r26, 0x2968
    30a8:	b0 91 69 29 	lds	r27, 0x2969
    30ac:	fc 01       	movw	r30, r24
    30ae:	80 91 77 29 	lds	r24, 0x2977
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 e0       	ldi	r26, 0x00	; 0
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	80 83       	st	Z, r24
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	a2 83       	std	Z+2, r26	; 0x02
    30be:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    30c0:	80 91 66 29 	lds	r24, 0x2966
    30c4:	90 91 67 29 	lds	r25, 0x2967
    30c8:	a0 91 68 29 	lds	r26, 0x2968
    30cc:	b0 91 69 29 	lds	r27, 0x2969
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	a1 1d       	adc	r26, r1
    30d4:	b1 1d       	adc	r27, r1
    30d6:	fc 01       	movw	r30, r24
    30d8:	80 91 76 29 	lds	r24, 0x2976
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	80 83       	st	Z, r24
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	a2 83       	std	Z+2, r26	; 0x02
    30e8:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    30ea:	10 92 de 28 	sts	0x28DE, r1
					sendArray[2] = 0;
    30ee:	10 92 df 28 	sts	0x28DF, r1
					sendArray[3] = mmio32(adresa_long+1);
    30f2:	80 91 66 29 	lds	r24, 0x2966
    30f6:	90 91 67 29 	lds	r25, 0x2967
    30fa:	a0 91 68 29 	lds	r26, 0x2968
    30fe:	b0 91 69 29 	lds	r27, 0x2969
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	a1 1d       	adc	r26, r1
    3106:	b1 1d       	adc	r27, r1
    3108:	fc 01       	movw	r30, r24
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	a2 81       	ldd	r26, Z+2	; 0x02
    3110:	b3 81       	ldd	r27, Z+3	; 0x03
    3112:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[4] = mmio32(adresa_long);  
    3116:	80 91 66 29 	lds	r24, 0x2966
    311a:	90 91 67 29 	lds	r25, 0x2967
    311e:	a0 91 68 29 	lds	r26, 0x2968
    3122:	b0 91 69 29 	lds	r27, 0x2969
    3126:	fc 01       	movw	r30, r24
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	a2 81       	ldd	r26, Z+2	; 0x02
    312e:	b3 81       	ldd	r27, Z+3	; 0x03
    3130:	80 93 e1 28 	sts	0x28E1, r24
    3134:	2b c0       	rjmp	.+86     	; 0x318c <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 1)	//jednobajtna promenljiva
    3136:	80 91 6f 29 	lds	r24, 0x296F
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	39 f5       	brne	.+78     	; 0x318c <__vector_61+0x155c>
				{
					mmio32(adresa_long) = receiveArray[9];                        
    313e:	80 91 66 29 	lds	r24, 0x2966
    3142:	90 91 67 29 	lds	r25, 0x2967
    3146:	a0 91 68 29 	lds	r26, 0x2968
    314a:	b0 91 69 29 	lds	r27, 0x2969
    314e:	fc 01       	movw	r30, r24
    3150:	80 91 77 29 	lds	r24, 0x2977
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a0 e0       	ldi	r26, 0x00	; 0
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	80 83       	st	Z, r24
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	a2 83       	std	Z+2, r26	; 0x02
    3160:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    3162:	10 92 de 28 	sts	0x28DE, r1
					sendArray[2] = 0;
    3166:	10 92 df 28 	sts	0x28DF, r1
					sendArray[3] = 0;
    316a:	10 92 e0 28 	sts	0x28E0, r1
					sendArray[4] = mmio32(adresa_long);  
    316e:	80 91 66 29 	lds	r24, 0x2966
    3172:	90 91 67 29 	lds	r25, 0x2967
    3176:	a0 91 68 29 	lds	r26, 0x2968
    317a:	b0 91 69 29 	lds	r27, 0x2969
    317e:	fc 01       	movw	r30, r24
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	a2 81       	ldd	r26, Z+2	; 0x02
    3186:	b3 81       	ldd	r27, Z+3	; 0x03
    3188:	80 93 e1 28 	sts	0x28E1, r24
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    318c:	80 91 6e 29 	lds	r24, 0x296E
    3190:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[3] = 0;
					sendArray[4] = mmio32(adresa_long);  
				}						               
									
				//slanje odgovora
				i = 0;
    3194:	00 e0       	ldi	r16, 0x00	; 0
    3196:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3198:	f8 01       	movw	r30, r16
    319a:	e3 52       	subi	r30, 0x23	; 35
    319c:	f7 4d       	sbci	r31, 0xD7	; 215
    319e:	60 81       	ld	r22, Z
    31a0:	8b e0       	ldi	r24, 0x0B	; 11
    31a2:	90 e2       	ldi	r25, 0x20	; 32
    31a4:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    31a8:	88 23       	and	r24, r24
    31aa:	11 f0       	breq	.+4      	; 0x31b0 <__vector_61+0x1580>
					{
						i++;
    31ac:	0f 5f       	subi	r16, 0xFF	; 255
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    31b0:	05 30       	cpi	r16, 0x05	; 5
    31b2:	11 05       	cpc	r17, r1
    31b4:	8c f3       	brlt	.-30     	; 0x3198 <__vector_61+0x1568>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    31b6:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    31ba:	10 92 5d 29 	sts	0x295D, r1
    31be:	d5 c1       	rjmp	.+938    	; 0x356a <__vector_61+0x193a>
		}					
	}
	//PODESAVANJE NIZA ZA SNIMANJE - 11
	else if(receiveArray[0] == 11)					//provera funkcijskog bajta
    31c0:	80 91 6e 29 	lds	r24, 0x296E
    31c4:	8b 30       	cpi	r24, 0x0B	; 11
    31c6:	09 f0       	breq	.+2      	; 0x31ca <__vector_61+0x159a>
    31c8:	44 c1       	rjmp	.+648    	; 0x3452 <__vector_61+0x1822>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka (3)
    31ca:	80 91 5d 29 	lds	r24, 0x295D
    31ce:	87 30       	cpi	r24, 0x07	; 7
    31d0:	08 f4       	brcc	.+2      	; 0x31d4 <__vector_61+0x15a4>
    31d2:	cb c1       	rjmp	.+918    	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    31d4:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				if (receiveArray[1] == 1)	//niz_1
    31d8:	80 91 6f 29 	lds	r24, 0x296F
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	09 f0       	breq	.+2      	; 0x31e2 <__vector_61+0x15b2>
    31e0:	5c c0       	rjmp	.+184    	; 0x329a <__vector_61+0x166a>
				{
					sample_time_niz_1 = receiveArray[2];
    31e2:	80 91 70 29 	lds	r24, 0x2970
    31e6:	80 93 72 32 	sts	0x3272, r24
					velicina_niz_1 = receiveArray[3];
    31ea:	80 91 71 29 	lds	r24, 0x2971
    31ee:	80 93 82 32 	sts	0x3282, r24
					adresa_niz_1 = 0;
    31f2:	10 92 fa 29 	sts	0x29FA, r1
    31f6:	10 92 fb 29 	sts	0x29FB, r1
    31fa:	10 92 fc 29 	sts	0x29FC, r1
    31fe:	10 92 fd 29 	sts	0x29FD, r1
					adresa_niz_1 |= (long)receiveArray[4] << 24;
    3202:	20 91 72 29 	lds	r18, 0x2972
    3206:	80 91 fa 29 	lds	r24, 0x29FA
    320a:	90 91 fb 29 	lds	r25, 0x29FB
    320e:	a0 91 fc 29 	lds	r26, 0x29FC
    3212:	b0 91 fd 29 	lds	r27, 0x29FD
    3216:	b2 2b       	or	r27, r18
    3218:	80 93 fa 29 	sts	0x29FA, r24
    321c:	90 93 fb 29 	sts	0x29FB, r25
    3220:	a0 93 fc 29 	sts	0x29FC, r26
    3224:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[5] << 16;
    3228:	20 91 73 29 	lds	r18, 0x2973
    322c:	80 91 fa 29 	lds	r24, 0x29FA
    3230:	90 91 fb 29 	lds	r25, 0x29FB
    3234:	a0 91 fc 29 	lds	r26, 0x29FC
    3238:	b0 91 fd 29 	lds	r27, 0x29FD
    323c:	a2 2b       	or	r26, r18
    323e:	80 93 fa 29 	sts	0x29FA, r24
    3242:	90 93 fb 29 	sts	0x29FB, r25
    3246:	a0 93 fc 29 	sts	0x29FC, r26
    324a:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[6] << 8;
    324e:	20 91 74 29 	lds	r18, 0x2974
    3252:	80 91 fa 29 	lds	r24, 0x29FA
    3256:	90 91 fb 29 	lds	r25, 0x29FB
    325a:	a0 91 fc 29 	lds	r26, 0x29FC
    325e:	b0 91 fd 29 	lds	r27, 0x29FD
    3262:	92 2b       	or	r25, r18
    3264:	80 93 fa 29 	sts	0x29FA, r24
    3268:	90 93 fb 29 	sts	0x29FB, r25
    326c:	a0 93 fc 29 	sts	0x29FC, r26
    3270:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[7];  
    3274:	20 91 75 29 	lds	r18, 0x2975
    3278:	80 91 fa 29 	lds	r24, 0x29FA
    327c:	90 91 fb 29 	lds	r25, 0x29FB
    3280:	a0 91 fc 29 	lds	r26, 0x29FC
    3284:	b0 91 fd 29 	lds	r27, 0x29FD
    3288:	82 2b       	or	r24, r18
    328a:	80 93 fa 29 	sts	0x29FA, r24
    328e:	90 93 fb 29 	sts	0x29FB, r25
    3292:	a0 93 fc 29 	sts	0x29FC, r26
    3296:	b0 93 fd 29 	sts	0x29FD, r27
				}
				if (receiveArray[1] == 2)	//niz_2
    329a:	80 91 6f 29 	lds	r24, 0x296F
    329e:	82 30       	cpi	r24, 0x02	; 2
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <__vector_61+0x1674>
    32a2:	5c c0       	rjmp	.+184    	; 0x335c <__vector_61+0x172c>
				{
					sample_time_niz_2 = receiveArray[2];
    32a4:	80 91 70 29 	lds	r24, 0x2970
    32a8:	80 93 7d 2e 	sts	0x2E7D, r24
					velicina_niz_2 = receiveArray[3];
    32ac:	80 91 71 29 	lds	r24, 0x2971
    32b0:	80 93 60 2e 	sts	0x2E60, r24
					adresa_niz_2 = 0;
    32b4:	10 92 bc 24 	sts	0x24BC, r1
    32b8:	10 92 bd 24 	sts	0x24BD, r1
    32bc:	10 92 be 24 	sts	0x24BE, r1
    32c0:	10 92 bf 24 	sts	0x24BF, r1
					adresa_niz_2 |= (long)receiveArray[4] << 24;
    32c4:	20 91 72 29 	lds	r18, 0x2972
    32c8:	80 91 bc 24 	lds	r24, 0x24BC
    32cc:	90 91 bd 24 	lds	r25, 0x24BD
    32d0:	a0 91 be 24 	lds	r26, 0x24BE
    32d4:	b0 91 bf 24 	lds	r27, 0x24BF
    32d8:	b2 2b       	or	r27, r18
    32da:	80 93 bc 24 	sts	0x24BC, r24
    32de:	90 93 bd 24 	sts	0x24BD, r25
    32e2:	a0 93 be 24 	sts	0x24BE, r26
    32e6:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[5] << 16;
    32ea:	20 91 73 29 	lds	r18, 0x2973
    32ee:	80 91 bc 24 	lds	r24, 0x24BC
    32f2:	90 91 bd 24 	lds	r25, 0x24BD
    32f6:	a0 91 be 24 	lds	r26, 0x24BE
    32fa:	b0 91 bf 24 	lds	r27, 0x24BF
    32fe:	a2 2b       	or	r26, r18
    3300:	80 93 bc 24 	sts	0x24BC, r24
    3304:	90 93 bd 24 	sts	0x24BD, r25
    3308:	a0 93 be 24 	sts	0x24BE, r26
    330c:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[6] << 8;
    3310:	20 91 74 29 	lds	r18, 0x2974
    3314:	80 91 bc 24 	lds	r24, 0x24BC
    3318:	90 91 bd 24 	lds	r25, 0x24BD
    331c:	a0 91 be 24 	lds	r26, 0x24BE
    3320:	b0 91 bf 24 	lds	r27, 0x24BF
    3324:	92 2b       	or	r25, r18
    3326:	80 93 bc 24 	sts	0x24BC, r24
    332a:	90 93 bd 24 	sts	0x24BD, r25
    332e:	a0 93 be 24 	sts	0x24BE, r26
    3332:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[7];
    3336:	20 91 75 29 	lds	r18, 0x2975
    333a:	80 91 bc 24 	lds	r24, 0x24BC
    333e:	90 91 bd 24 	lds	r25, 0x24BD
    3342:	a0 91 be 24 	lds	r26, 0x24BE
    3346:	b0 91 bf 24 	lds	r27, 0x24BF
    334a:	82 2b       	or	r24, r18
    334c:	80 93 bc 24 	sts	0x24BC, r24
    3350:	90 93 bd 24 	sts	0x24BD, r25
    3354:	a0 93 be 24 	sts	0x24BE, r26
    3358:	b0 93 bf 24 	sts	0x24BF, r27
				}
				
				if (receiveArray[1] == 3)	//niz_3
    335c:	80 91 6f 29 	lds	r24, 0x296F
    3360:	83 30       	cpi	r24, 0x03	; 3
    3362:	09 f0       	breq	.+2      	; 0x3366 <__vector_61+0x1736>
    3364:	5c c0       	rjmp	.+184    	; 0x341e <__vector_61+0x17ee>
				{
					sample_time_niz_3 = receiveArray[2];
    3366:	80 91 70 29 	lds	r24, 0x2970
    336a:	80 93 11 2e 	sts	0x2E11, r24
					velicina_niz_3 = receiveArray[3];
    336e:	80 91 71 29 	lds	r24, 0x2971
    3372:	80 93 d2 24 	sts	0x24D2, r24
					adresa_niz_3 = 0;
    3376:	10 92 40 2e 	sts	0x2E40, r1
    337a:	10 92 41 2e 	sts	0x2E41, r1
    337e:	10 92 42 2e 	sts	0x2E42, r1
    3382:	10 92 43 2e 	sts	0x2E43, r1
					adresa_niz_3 |= (long)receiveArray[4] << 24;
    3386:	20 91 72 29 	lds	r18, 0x2972
    338a:	80 91 40 2e 	lds	r24, 0x2E40
    338e:	90 91 41 2e 	lds	r25, 0x2E41
    3392:	a0 91 42 2e 	lds	r26, 0x2E42
    3396:	b0 91 43 2e 	lds	r27, 0x2E43
    339a:	b2 2b       	or	r27, r18
    339c:	80 93 40 2e 	sts	0x2E40, r24
    33a0:	90 93 41 2e 	sts	0x2E41, r25
    33a4:	a0 93 42 2e 	sts	0x2E42, r26
    33a8:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[5] << 16;
    33ac:	20 91 73 29 	lds	r18, 0x2973
    33b0:	80 91 40 2e 	lds	r24, 0x2E40
    33b4:	90 91 41 2e 	lds	r25, 0x2E41
    33b8:	a0 91 42 2e 	lds	r26, 0x2E42
    33bc:	b0 91 43 2e 	lds	r27, 0x2E43
    33c0:	a2 2b       	or	r26, r18
    33c2:	80 93 40 2e 	sts	0x2E40, r24
    33c6:	90 93 41 2e 	sts	0x2E41, r25
    33ca:	a0 93 42 2e 	sts	0x2E42, r26
    33ce:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[6] << 8;
    33d2:	20 91 74 29 	lds	r18, 0x2974
    33d6:	80 91 40 2e 	lds	r24, 0x2E40
    33da:	90 91 41 2e 	lds	r25, 0x2E41
    33de:	a0 91 42 2e 	lds	r26, 0x2E42
    33e2:	b0 91 43 2e 	lds	r27, 0x2E43
    33e6:	92 2b       	or	r25, r18
    33e8:	80 93 40 2e 	sts	0x2E40, r24
    33ec:	90 93 41 2e 	sts	0x2E41, r25
    33f0:	a0 93 42 2e 	sts	0x2E42, r26
    33f4:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[7];
    33f8:	20 91 75 29 	lds	r18, 0x2975
    33fc:	80 91 40 2e 	lds	r24, 0x2E40
    3400:	90 91 41 2e 	lds	r25, 0x2E41
    3404:	a0 91 42 2e 	lds	r26, 0x2E42
    3408:	b0 91 43 2e 	lds	r27, 0x2E43
    340c:	82 2b       	or	r24, r18
    340e:	80 93 40 2e 	sts	0x2E40, r24
    3412:	90 93 41 2e 	sts	0x2E41, r25
    3416:	a0 93 42 2e 	sts	0x2E42, r26
    341a:	b0 93 43 2e 	sts	0x2E43, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    341e:	80 91 6e 29 	lds	r24, 0x296E
    3422:	80 93 dd 28 	sts	0x28DD, r24
					adresa_niz_3 |= (long)receiveArray[6] << 8;
					adresa_niz_3 |= (long)receiveArray[7];
				}
				
				//slanje odgovora
				i = 0;
    3426:	00 e0       	ldi	r16, 0x00	; 0
    3428:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    342a:	f8 01       	movw	r30, r16
    342c:	e3 52       	subi	r30, 0x23	; 35
    342e:	f7 4d       	sbci	r31, 0xD7	; 215
    3430:	60 81       	ld	r22, Z
    3432:	8b e0       	ldi	r24, 0x0B	; 11
    3434:	90 e2       	ldi	r25, 0x20	; 32
    3436:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    343a:	88 23       	and	r24, r24
    343c:	11 f0       	breq	.+4      	; 0x3442 <__vector_61+0x1812>
					{
						i++;
    343e:	0f 5f       	subi	r16, 0xFF	; 255
    3440:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    3442:	10 16       	cp	r1, r16
    3444:	11 06       	cpc	r1, r17
    3446:	8c f7       	brge	.-30     	; 0x342a <__vector_61+0x17fa>
					if(byteToBuffer)
					{
						i++;
					}
				}			
				RX_i_E1 = 0;
    3448:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    344c:	10 92 5d 29 	sts	0x295D, r1
    3450:	8c c0       	rjmp	.+280    	; 0x356a <__vector_61+0x193a>
		}					
	}
	//CITANJE SNIMLJENOG NIZA - 12
	else if(receiveArray[0] == 12)					//provera funkcijskog bajta
    3452:	80 91 6e 29 	lds	r24, 0x296E
    3456:	8c 30       	cpi	r24, 0x0C	; 12
    3458:	09 f0       	breq	.+2      	; 0x345c <__vector_61+0x182c>
    345a:	87 c0       	rjmp	.+270    	; 0x356a <__vector_61+0x193a>
	{
		if(RX_i_E1 >= 2)							//stigla je cela poruka (3)
    345c:	80 91 5d 29 	lds	r24, 0x295D
    3460:	82 30       	cpi	r24, 0x02	; 2
    3462:	08 f4       	brcc	.+2      	; 0x3466 <__vector_61+0x1836>
    3464:	82 c0       	rjmp	.+260    	; 0x356a <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3466:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				if (receiveArray[1] == 1)			//niz_1
    346a:	80 91 6f 29 	lds	r24, 0x296F
    346e:	81 30       	cpi	r24, 0x01	; 1
    3470:	f9 f4       	brne	.+62     	; 0x34b0 <__vector_61+0x1880>
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_1[k]>>8;
    347a:	fc 01       	movw	r30, r24
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	ea 5f       	subi	r30, 0xFA	; 250
    3482:	f5 4d       	sbci	r31, 0xD5	; 213
    3484:	40 81       	ld	r20, Z
    3486:	51 81       	ldd	r21, Z+1	; 0x01
    3488:	45 2f       	mov	r20, r21
    348a:	55 0f       	add	r21, r21
    348c:	55 0b       	sbc	r21, r21
    348e:	d9 01       	movw	r26, r18
    3490:	a3 52       	subi	r26, 0x23	; 35
    3492:	b7 4d       	sbci	r27, 0xD7	; 215
    3494:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_1[k];
    3496:	40 81       	ld	r20, Z
    3498:	51 81       	ldd	r21, Z+1	; 0x01
    349a:	f9 01       	movw	r30, r18
    349c:	e2 52       	subi	r30, 0x22	; 34
    349e:	f7 4d       	sbci	r31, 0xD7	; 215
    34a0:	40 83       	st	Z, r20
						j++;
    34a2:	2e 5f       	subi	r18, 0xFE	; 254
    34a4:	3f 4f       	sbci	r19, 0xFF	; 255
			proveri_vreme_primanja = 0;				//zastita iskljucena
			{
				if (receiveArray[1] == 1)			//niz_1
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	8f 37       	cpi	r24, 0x7F	; 127
    34aa:	91 05       	cpc	r25, r1
    34ac:	31 f7       	brne	.-52     	; 0x347a <__vector_61+0x184a>
    34ae:	5a c0       	rjmp	.+180    	; 0x3564 <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_1[k];
						j++;
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
    34b0:	80 91 6f 29 	lds	r24, 0x296F
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	f9 f4       	brne	.+62     	; 0x34f6 <__vector_61+0x18c6>
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_2[k]>>8;
    34c0:	fc 01       	movw	r30, r24
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	e6 57       	subi	r30, 0x76	; 118
    34c8:	f1 4d       	sbci	r31, 0xD1	; 209
    34ca:	40 81       	ld	r20, Z
    34cc:	51 81       	ldd	r21, Z+1	; 0x01
    34ce:	45 2f       	mov	r20, r21
    34d0:	55 0f       	add	r21, r21
    34d2:	55 0b       	sbc	r21, r21
    34d4:	d9 01       	movw	r26, r18
    34d6:	a3 52       	subi	r26, 0x23	; 35
    34d8:	b7 4d       	sbci	r27, 0xD7	; 215
    34da:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_2[k];
    34dc:	40 81       	ld	r20, Z
    34de:	51 81       	ldd	r21, Z+1	; 0x01
    34e0:	f9 01       	movw	r30, r18
    34e2:	e2 52       	subi	r30, 0x22	; 34
    34e4:	f7 4d       	sbci	r31, 0xD7	; 215
    34e6:	40 83       	st	Z, r20
						j++;
    34e8:	2e 5f       	subi	r18, 0xFE	; 254
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	8f 37       	cpi	r24, 0x7F	; 127
    34f0:	91 05       	cpc	r25, r1
    34f2:	31 f7       	brne	.-52     	; 0x34c0 <__vector_61+0x1890>
    34f4:	37 c0       	rjmp	.+110    	; 0x3564 <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    34f6:	80 91 6f 29 	lds	r24, 0x296F
    34fa:	83 30       	cpi	r24, 0x03	; 3
    34fc:	99 f5       	brne	.+102    	; 0x3564 <__vector_61+0x1934>
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_3[k]>>8;
    3506:	fc 01       	movw	r30, r24
    3508:	ee 0f       	add	r30, r30
    350a:	ff 1f       	adc	r31, r31
    350c:	e9 52       	subi	r30, 0x29	; 41
    350e:	fb 4d       	sbci	r31, 0xDB	; 219
    3510:	40 81       	ld	r20, Z
    3512:	51 81       	ldd	r21, Z+1	; 0x01
    3514:	45 2f       	mov	r20, r21
    3516:	55 0f       	add	r21, r21
    3518:	55 0b       	sbc	r21, r21
    351a:	d9 01       	movw	r26, r18
    351c:	a3 52       	subi	r26, 0x23	; 35
    351e:	b7 4d       	sbci	r27, 0xD7	; 215
    3520:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_3[k];
    3522:	40 81       	ld	r20, Z
    3524:	51 81       	ldd	r21, Z+1	; 0x01
    3526:	f9 01       	movw	r30, r18
    3528:	e2 52       	subi	r30, 0x22	; 34
    352a:	f7 4d       	sbci	r31, 0xD7	; 215
    352c:	40 83       	st	Z, r20
						j++;
    352e:	2e 5f       	subi	r18, 0xFE	; 254
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	8f 37       	cpi	r24, 0x7F	; 127
    3536:	91 05       	cpc	r25, r1
    3538:	31 f7       	brne	.-52     	; 0x3506 <__vector_61+0x18d6>
    353a:	14 c0       	rjmp	.+40     	; 0x3564 <__vector_61+0x1934>
				//slanje odgovora
				i = 0;
				while (i < 254)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    353c:	f8 01       	movw	r30, r16
    353e:	e3 52       	subi	r30, 0x23	; 35
    3540:	f7 4d       	sbci	r31, 0xD7	; 215
    3542:	60 81       	ld	r22, Z
    3544:	8b e0       	ldi	r24, 0x0B	; 11
    3546:	90 e2       	ldi	r25, 0x20	; 32
    3548:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					if(byteToBuffer)
    354c:	88 23       	and	r24, r24
    354e:	11 f0       	breq	.+4      	; 0x3554 <__vector_61+0x1924>
					{
						i++;
    3550:	0f 5f       	subi	r16, 0xFF	; 255
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				
				//slanje odgovora
				i = 0;
				while (i < 254)
    3554:	0e 3f       	cpi	r16, 0xFE	; 254
    3556:	11 05       	cpc	r17, r1
    3558:	8c f3       	brlt	.-30     	; 0x353c <__vector_61+0x190c>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    355a:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    355e:	10 92 5d 29 	sts	0x295D, r1
    3562:	03 c0       	rjmp	.+6      	; 0x356a <__vector_61+0x193a>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    3564:	00 e0       	ldi	r16, 0x00	; 0
    3566:	10 e0       	ldi	r17, 0x00	; 0
    3568:	e9 cf       	rjmp	.-46     	; 0x353c <__vector_61+0x190c>
				RX_i_E1 = 0;
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
		}
	}	
}
    356a:	28 96       	adiw	r28, 0x08	; 8
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	bf 90       	pop	r11
    359a:	af 90       	pop	r10
    359c:	9f 90       	pop	r9
    359e:	8f 90       	pop	r8
    35a0:	7f 90       	pop	r7
    35a2:	6f 90       	pop	r6
    35a4:	5f 90       	pop	r5
    35a6:	4f 90       	pop	r4
    35a8:	0f 90       	pop	r0
    35aa:	0b be       	out	0x3b, r0	; 59
    35ac:	0f 90       	pop	r0
    35ae:	0a be       	out	0x3a, r0	; 58
    35b0:	0f 90       	pop	r0
    35b2:	09 be       	out	0x39, r0	; 57
    35b4:	0f 90       	pop	r0
    35b6:	08 be       	out	0x38, r0	; 56
    35b8:	0f 90       	pop	r0
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <__vector_25>:
//Serijska komunikacija USART_C0 - BT - XmegaUSB		
ISR(USARTC0_RXC_vect)
{
    35c2:	1f 92       	push	r1
    35c4:	0f 92       	push	r0
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	0f 92       	push	r0
    35ca:	11 24       	eor	r1, r1
    35cc:	08 b6       	in	r0, 0x38	; 56
    35ce:	0f 92       	push	r0
    35d0:	18 be       	out	0x38, r1	; 56
    35d2:	09 b6       	in	r0, 0x39	; 57
    35d4:	0f 92       	push	r0
    35d6:	19 be       	out	0x39, r1	; 57
    35d8:	0a b6       	in	r0, 0x3a	; 58
    35da:	0f 92       	push	r0
    35dc:	1a be       	out	0x3a, r1	; 58
    35de:	0b b6       	in	r0, 0x3b	; 59
    35e0:	0f 92       	push	r0
    35e2:	1b be       	out	0x3b, r1	; 59
    35e4:	4f 92       	push	r4
    35e6:	5f 92       	push	r5
    35e8:	6f 92       	push	r6
    35ea:	7f 92       	push	r7
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	2f 93       	push	r18
    3602:	3f 93       	push	r19
    3604:	4f 93       	push	r20
    3606:	5f 93       	push	r21
    3608:	6f 93       	push	r22
    360a:	7f 93       	push	r23
    360c:	8f 93       	push	r24
    360e:	9f 93       	push	r25
    3610:	af 93       	push	r26
    3612:	bf 93       	push	r27
    3614:	ef 93       	push	r30
    3616:	ff 93       	push	r31
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	00 d0       	rcall	.+0      	; 0x361e <__vector_25+0x5c>
    361e:	1f 92       	push	r1
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
	int i;
	USART_RXComplete(&USART_C0_data);
    3624:	82 e9       	ldi	r24, 0x92	; 146
    3626:	91 e2       	ldi	r25, 0x21	; 33
    3628:	0e 94 63 34 	call	0x68c6	; 0x68c6 <USART_RXComplete>
	receiveArray[RX_i_C0] = USART_RXBuffer_GetByte(&USART_C0_data);
    362c:	80 91 3f 2e 	lds	r24, 0x2E3F
    3630:	08 2f       	mov	r16, r24
    3632:	10 e0       	ldi	r17, 0x00	; 0
    3634:	82 e9       	ldi	r24, 0x92	; 146
    3636:	91 e2       	ldi	r25, 0x21	; 33
    3638:	0e 94 55 34 	call	0x68aa	; 0x68aa <USART_RXBuffer_GetByte>
    363c:	f8 01       	movw	r30, r16
    363e:	e2 59       	subi	r30, 0x92	; 146
    3640:	f6 4d       	sbci	r31, 0xD6	; 214
    3642:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_C0_data, receiveArray[RX_i_C0]);	//echo
	RX_i_C0++;
    3644:	80 91 3f 2e 	lds	r24, 0x2E3F
    3648:	8f 5f       	subi	r24, 0xFF	; 255
    364a:	80 93 3f 2e 	sts	0x2E3F, r24
	
	//vremenska zastita
	if (RX_i_C0 >= 1)
    364e:	80 91 3f 2e 	lds	r24, 0x2E3F
    3652:	88 23       	and	r24, r24
    3654:	19 f0       	breq	.+6      	; 0x365c <__vector_25+0x9a>
 		proveri_vreme_primanja = 1;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    365c:	80 91 6e 29 	lds	r24, 0x296E
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	09 f0       	breq	.+2      	; 0x3666 <__vector_25+0xa4>
    3664:	fe c0       	rjmp	.+508    	; 0x3862 <__vector_25+0x2a0>
	{
		if(RX_i_C0 == 1)								//stigla je cela poruka (2)
    3666:	80 91 3f 2e 	lds	r24, 0x2E3F
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	09 f0       	breq	.+2      	; 0x3670 <__vector_25+0xae>
    366e:	ac c7       	rjmp	.+3928   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3670:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    3674:	80 91 6e 29 	lds	r24, 0x296E
    3678:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    367c:	60 91 23 2e 	lds	r22, 0x2E23
    3680:	70 91 24 2e 	lds	r23, 0x2E24
    3684:	80 91 25 2e 	lds	r24, 0x2E25
    3688:	90 91 26 2e 	lds	r25, 0x2E26
    368c:	20 91 00 2e 	lds	r18, 0x2E00
    3690:	30 91 01 2e 	lds	r19, 0x2E01
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    369c:	bb 27       	eor	r27, r27
    369e:	57 fd       	sbrc	r21, 7
    36a0:	ba 95       	dec	r27
    36a2:	a5 2f       	mov	r26, r21
    36a4:	94 2f       	mov	r25, r20
    36a6:	83 2f       	mov	r24, r19
    36a8:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    36ac:	60 91 23 2e 	lds	r22, 0x2E23
    36b0:	70 91 24 2e 	lds	r23, 0x2E24
    36b4:	80 91 25 2e 	lds	r24, 0x2E25
    36b8:	90 91 26 2e 	lds	r25, 0x2E26
    36bc:	20 91 00 2e 	lds	r18, 0x2E00
    36c0:	30 91 01 2e 	lds	r19, 0x2E01
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    36cc:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    36d0:	60 91 02 2a 	lds	r22, 0x2A02
    36d4:	70 91 03 2a 	lds	r23, 0x2A03
    36d8:	80 91 04 2a 	lds	r24, 0x2A04
    36dc:	90 91 05 2a 	lds	r25, 0x2A05
    36e0:	20 91 00 2e 	lds	r18, 0x2E00
    36e4:	30 91 01 2e 	lds	r19, 0x2E01
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	50 e0       	ldi	r21, 0x00	; 0
    36ec:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    36f0:	bb 27       	eor	r27, r27
    36f2:	57 fd       	sbrc	r21, 7
    36f4:	ba 95       	dec	r27
    36f6:	a5 2f       	mov	r26, r21
    36f8:	94 2f       	mov	r25, r20
    36fa:	83 2f       	mov	r24, r19
    36fc:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    3700:	60 91 02 2a 	lds	r22, 0x2A02
    3704:	70 91 03 2a 	lds	r23, 0x2A03
    3708:	80 91 04 2a 	lds	r24, 0x2A04
    370c:	90 91 05 2a 	lds	r25, 0x2A05
    3710:	20 91 00 2e 	lds	r18, 0x2E00
    3714:	30 91 01 2e 	lds	r19, 0x2E01
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3720:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    3724:	20 91 83 32 	lds	r18, 0x3283
    3728:	30 91 84 32 	lds	r19, 0x3284
    372c:	40 91 85 32 	lds	r20, 0x3285
    3730:	50 91 86 32 	lds	r21, 0x3286
    3734:	c0 90 75 32 	lds	r12, 0x3275
    3738:	d0 90 76 32 	lds	r13, 0x3276
    373c:	e0 90 77 32 	lds	r14, 0x3277
    3740:	f0 90 78 32 	lds	r15, 0x3278
    3744:	a8 e6       	ldi	r26, 0x68	; 104
    3746:	b1 e0       	ldi	r27, 0x01	; 1
    3748:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    374c:	a7 01       	movw	r20, r14
    374e:	96 01       	movw	r18, r12
    3750:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3754:	bb 27       	eor	r27, r27
    3756:	57 fd       	sbrc	r21, 7
    3758:	ba 95       	dec	r27
    375a:	a5 2f       	mov	r26, r21
    375c:	94 2f       	mov	r25, r20
    375e:	83 2f       	mov	r24, r19
    3760:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    3764:	20 91 83 32 	lds	r18, 0x3283
    3768:	30 91 84 32 	lds	r19, 0x3284
    376c:	40 91 85 32 	lds	r20, 0x3285
    3770:	50 91 86 32 	lds	r21, 0x3286
    3774:	c0 90 75 32 	lds	r12, 0x3275
    3778:	d0 90 76 32 	lds	r13, 0x3276
    377c:	e0 90 77 32 	lds	r14, 0x3277
    3780:	f0 90 78 32 	lds	r15, 0x3278
    3784:	a8 e6       	ldi	r26, 0x68	; 104
    3786:	b1 e0       	ldi	r27, 0x01	; 1
    3788:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    378c:	a7 01       	movw	r20, r14
    378e:	96 01       	movw	r18, r12
    3790:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3794:	20 93 e3 28 	sts	0x28E3, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    3798:	60 91 12 2e 	lds	r22, 0x2E12
    379c:	70 91 13 2e 	lds	r23, 0x2E13
    37a0:	80 91 14 2e 	lds	r24, 0x2E14
    37a4:	90 91 15 2e 	lds	r25, 0x2E15
    37a8:	20 91 00 2e 	lds	r18, 0x2E00
    37ac:	30 91 01 2e 	lds	r19, 0x2E01
    37b0:	40 e0       	ldi	r20, 0x00	; 0
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    37b8:	bb 27       	eor	r27, r27
    37ba:	57 fd       	sbrc	r21, 7
    37bc:	ba 95       	dec	r27
    37be:	a5 2f       	mov	r26, r21
    37c0:	94 2f       	mov	r25, r20
    37c2:	83 2f       	mov	r24, r19
    37c4:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    37c8:	60 91 12 2e 	lds	r22, 0x2E12
    37cc:	70 91 13 2e 	lds	r23, 0x2E13
    37d0:	80 91 14 2e 	lds	r24, 0x2E14
    37d4:	90 91 15 2e 	lds	r25, 0x2E15
    37d8:	20 91 00 2e 	lds	r18, 0x2E00
    37dc:	30 91 01 2e 	lds	r19, 0x2E01
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    37e8:	20 93 e5 28 	sts	0x28E5, r18
				sendArray[9] = stigao_flag;											//stigao flag
    37ec:	80 91 06 20 	lds	r24, 0x2006
    37f0:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    37f4:	80 91 a0 24 	lds	r24, 0x24A0
    37f8:	90 91 a1 24 	lds	r25, 0x24A1
    37fc:	80 93 e7 28 	sts	0x28E7, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    3800:	80 91 c0 24 	lds	r24, 0x24C0
    3804:	90 91 c1 24 	lds	r25, 0x24C1
    3808:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    380c:	60 91 5a 2e 	lds	r22, 0x2E5A
    3810:	80 e2       	ldi	r24, 0x20	; 32
    3812:	92 e0       	ldi	r25, 0x02	; 2
    3814:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3818:	80 93 e9 28 	sts	0x28E9, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    381c:	60 91 5a 2e 	lds	r22, 0x2E5A
    3820:	88 e2       	ldi	r24, 0x28	; 40
    3822:	92 e0       	ldi	r25, 0x02	; 2
    3824:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3828:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    382c:	e0 e2       	ldi	r30, 0x20	; 32
    382e:	f6 e0       	ldi	r31, 0x06	; 6
    3830:	80 85       	ldd	r24, Z+8	; 0x08
    3832:	80 93 eb 28 	sts	0x28EB, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    3836:	00 e0       	ldi	r16, 0x00	; 0
    3838:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    383a:	f8 01       	movw	r30, r16
    383c:	e3 52       	subi	r30, 0x23	; 35
    383e:	f7 4d       	sbci	r31, 0xD7	; 215
    3840:	60 81       	ld	r22, Z
    3842:	82 e9       	ldi	r24, 0x92	; 146
    3844:	91 e2       	ldi	r25, 0x21	; 33
    3846:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    384a:	88 23       	and	r24, r24
    384c:	11 f0       	breq	.+4      	; 0x3852 <__vector_25+0x290>
						i++;
    384e:	0f 5f       	subi	r16, 0xFF	; 255
    3850:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    3852:	0f 30       	cpi	r16, 0x0F	; 15
    3854:	11 05       	cpc	r17, r1
    3856:	8c f3       	brlt	.-30     	; 0x383a <__vector_25+0x278>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_C0 = 0;
    3858:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda				
    385c:	10 92 3f 2e 	sts	0x2E3F, r1
    3860:	b3 c6       	rjmp	.+3430   	; 0x45c8 <__stack+0x5c9>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    3862:	80 91 6e 29 	lds	r24, 0x296E
    3866:	82 30       	cpi	r24, 0x02	; 2
    3868:	09 f0       	breq	.+2      	; 0x386c <__vector_25+0x2aa>
    386a:	bf c0       	rjmp	.+382    	; 0x39ea <__vector_25+0x428>
	{
		if(RX_i_C0 >= 5)							//stigla je cela poruka	(5 bajtova)
    386c:	80 91 3f 2e 	lds	r24, 0x2E3F
    3870:	85 30       	cpi	r24, 0x05	; 5
    3872:	08 f4       	brcc	.+2      	; 0x3876 <__vector_25+0x2b4>
    3874:	a9 c6       	rjmp	.+3410   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3876:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
    387a:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
    387e:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
    3882:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
    3886:	10 92 ae 24 	sts	0x24AE, r1
    388a:	10 92 af 24 	sts	0x24AF, r1
    388e:	10 92 b0 24 	sts	0x24B0, r1
    3892:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
    3896:	20 91 6f 29 	lds	r18, 0x296F
    389a:	40 91 ae 24 	lds	r20, 0x24AE
    389e:	50 91 af 24 	lds	r21, 0x24AF
    38a2:	60 91 b0 24 	lds	r22, 0x24B0
    38a6:	70 91 b1 24 	lds	r23, 0x24B1
    38aa:	92 2f       	mov	r25, r18
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	aa 27       	eor	r26, r26
    38b0:	97 fd       	sbrc	r25, 7
    38b2:	a0 95       	com	r26
    38b4:	ba 2f       	mov	r27, r26
    38b6:	84 2b       	or	r24, r20
    38b8:	95 2b       	or	r25, r21
    38ba:	a6 2b       	or	r26, r22
    38bc:	b7 2b       	or	r27, r23
    38be:	80 93 ae 24 	sts	0x24AE, r24
    38c2:	90 93 af 24 	sts	0x24AF, r25
    38c6:	a0 93 b0 24 	sts	0x24B0, r26
    38ca:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
    38ce:	20 91 70 29 	lds	r18, 0x2970
    38d2:	80 91 ae 24 	lds	r24, 0x24AE
    38d6:	90 91 af 24 	lds	r25, 0x24AF
    38da:	a0 91 b0 24 	lds	r26, 0x24B0
    38de:	b0 91 b1 24 	lds	r27, 0x24B1
    38e2:	82 2b       	or	r24, r18
    38e4:	80 93 ae 24 	sts	0x24AE, r24
    38e8:	90 93 af 24 	sts	0x24AF, r25
    38ec:	a0 93 b0 24 	sts	0x24B0, r26
    38f0:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    38f4:	a0 91 00 2e 	lds	r26, 0x2E00
    38f8:	b0 91 01 2e 	lds	r27, 0x2E01
    38fc:	20 91 ae 24 	lds	r18, 0x24AE
    3900:	30 91 af 24 	lds	r19, 0x24AF
    3904:	40 91 b0 24 	lds	r20, 0x24B0
    3908:	50 91 b1 24 	lds	r21, 0x24B1
    390c:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    3910:	60 93 ae 24 	sts	0x24AE, r22
    3914:	70 93 af 24 	sts	0x24AF, r23
    3918:	80 93 b0 24 	sts	0x24B0, r24
    391c:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
    3920:	10 92 0b 2e 	sts	0x2E0B, r1
    3924:	10 92 0c 2e 	sts	0x2E0C, r1
    3928:	10 92 0d 2e 	sts	0x2E0D, r1
    392c:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
    3930:	20 91 71 29 	lds	r18, 0x2971
    3934:	40 91 0b 2e 	lds	r20, 0x2E0B
    3938:	50 91 0c 2e 	lds	r21, 0x2E0C
    393c:	60 91 0d 2e 	lds	r22, 0x2E0D
    3940:	70 91 0e 2e 	lds	r23, 0x2E0E
    3944:	92 2f       	mov	r25, r18
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	aa 27       	eor	r26, r26
    394a:	97 fd       	sbrc	r25, 7
    394c:	a0 95       	com	r26
    394e:	ba 2f       	mov	r27, r26
    3950:	84 2b       	or	r24, r20
    3952:	95 2b       	or	r25, r21
    3954:	a6 2b       	or	r26, r22
    3956:	b7 2b       	or	r27, r23
    3958:	80 93 0b 2e 	sts	0x2E0B, r24
    395c:	90 93 0c 2e 	sts	0x2E0C, r25
    3960:	a0 93 0d 2e 	sts	0x2E0D, r26
    3964:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
    3968:	20 91 72 29 	lds	r18, 0x2972
    396c:	80 91 0b 2e 	lds	r24, 0x2E0B
    3970:	90 91 0c 2e 	lds	r25, 0x2E0C
    3974:	a0 91 0d 2e 	lds	r26, 0x2E0D
    3978:	b0 91 0e 2e 	lds	r27, 0x2E0E
    397c:	82 2b       	or	r24, r18
    397e:	80 93 0b 2e 	sts	0x2E0B, r24
    3982:	90 93 0c 2e 	sts	0x2E0C, r25
    3986:	a0 93 0d 2e 	sts	0x2E0D, r26
    398a:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    398e:	a0 91 00 2e 	lds	r26, 0x2E00
    3992:	b0 91 01 2e 	lds	r27, 0x2E01
    3996:	20 91 0b 2e 	lds	r18, 0x2E0B
    399a:	30 91 0c 2e 	lds	r19, 0x2E0C
    399e:	40 91 0d 2e 	lds	r20, 0x2E0D
    39a2:	50 91 0e 2e 	lds	r21, 0x2E0E
    39a6:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    39aa:	60 93 0b 2e 	sts	0x2E0B, r22
    39ae:	70 93 0c 2e 	sts	0x2E0C, r23
    39b2:	80 93 0d 2e 	sts	0x2E0D, r24
    39b6:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    39ba:	80 91 6e 29 	lds	r24, 0x296E
    39be:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
    39c2:	00 e0       	ldi	r16, 0x00	; 0
    39c4:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    39c6:	f8 01       	movw	r30, r16
    39c8:	e3 52       	subi	r30, 0x23	; 35
    39ca:	f7 4d       	sbci	r31, 0xD7	; 215
    39cc:	60 81       	ld	r22, Z
    39ce:	82 e9       	ldi	r24, 0x92	; 146
    39d0:	91 e2       	ldi	r25, 0x21	; 33
    39d2:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    39d6:	88 23       	and	r24, r24
    39d8:	11 f0       	breq	.+4      	; 0x39de <__vector_25+0x41c>
				{
					i++;
    39da:	0f 5f       	subi	r16, 0xFF	; 255
    39dc:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    39de:	10 16       	cp	r1, r16
    39e0:	11 06       	cpc	r1, r17
    39e2:	8c f7       	brge	.-30     	; 0x39c6 <__vector_25+0x404>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_C0 = 0;
    39e4:	10 92 3f 2e 	sts	0x2E3F, r1
    39e8:	ef c5       	rjmp	.+3038   	; 0x45c8 <__stack+0x5c9>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    39ea:	80 91 6e 29 	lds	r24, 0x296E
    39ee:	83 30       	cpi	r24, 0x03	; 3
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <__vector_25+0x432>
    39f2:	e3 c1       	rjmp	.+966    	; 0x3dba <__vector_25+0x7f8>
	{
		if(RX_i_C0 >= 11)							//stigla je cela poruka	(11)
    39f4:	80 91 3f 2e 	lds	r24, 0x2E3F
    39f8:	8b 30       	cpi	r24, 0x0B	; 11
    39fa:	08 f4       	brcc	.+2      	; 0x39fe <__vector_25+0x43c>
    39fc:	e5 c5       	rjmp	.+3018   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    39fe:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3a02:	80 91 6f 29 	lds	r24, 0x296F
    3a06:	8f 3f       	cpi	r24, 0xFF	; 255
    3a08:	29 f4       	brne	.+10     	; 0x3a14 <__vector_25+0x452>
    3a0a:	80 91 70 29 	lds	r24, 0x2970
    3a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <__vector_25+0x452>
    3a12:	53 c0       	rjmp	.+166    	; 0x3aba <__vector_25+0x4f8>
				{
					//ENABLE
					stop_PID_desni = 0;
    3a14:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
    3a18:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    3a1c:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
    3a20:	10 92 ae 24 	sts	0x24AE, r1
    3a24:	10 92 af 24 	sts	0x24AF, r1
    3a28:	10 92 b0 24 	sts	0x24B0, r1
    3a2c:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
    3a30:	20 91 6f 29 	lds	r18, 0x296F
    3a34:	40 91 ae 24 	lds	r20, 0x24AE
    3a38:	50 91 af 24 	lds	r21, 0x24AF
    3a3c:	60 91 b0 24 	lds	r22, 0x24B0
    3a40:	70 91 b1 24 	lds	r23, 0x24B1
    3a44:	92 2f       	mov	r25, r18
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	aa 27       	eor	r26, r26
    3a4a:	97 fd       	sbrc	r25, 7
    3a4c:	a0 95       	com	r26
    3a4e:	ba 2f       	mov	r27, r26
    3a50:	84 2b       	or	r24, r20
    3a52:	95 2b       	or	r25, r21
    3a54:	a6 2b       	or	r26, r22
    3a56:	b7 2b       	or	r27, r23
    3a58:	80 93 ae 24 	sts	0x24AE, r24
    3a5c:	90 93 af 24 	sts	0x24AF, r25
    3a60:	a0 93 b0 24 	sts	0x24B0, r26
    3a64:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
    3a68:	20 91 70 29 	lds	r18, 0x2970
    3a6c:	80 91 ae 24 	lds	r24, 0x24AE
    3a70:	90 91 af 24 	lds	r25, 0x24AF
    3a74:	a0 91 b0 24 	lds	r26, 0x24B0
    3a78:	b0 91 b1 24 	lds	r27, 0x24B1
    3a7c:	82 2b       	or	r24, r18
    3a7e:	80 93 ae 24 	sts	0x24AE, r24
    3a82:	90 93 af 24 	sts	0x24AF, r25
    3a86:	a0 93 b0 24 	sts	0x24B0, r26
    3a8a:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    3a8e:	a0 91 00 2e 	lds	r26, 0x2E00
    3a92:	b0 91 01 2e 	lds	r27, 0x2E01
    3a96:	20 91 ae 24 	lds	r18, 0x24AE
    3a9a:	30 91 af 24 	lds	r19, 0x24AF
    3a9e:	40 91 b0 24 	lds	r20, 0x24B0
    3aa2:	50 91 b1 24 	lds	r21, 0x24B1
    3aa6:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    3aaa:	60 93 ae 24 	sts	0x24AE, r22
    3aae:	70 93 af 24 	sts	0x24AF, r23
    3ab2:	80 93 b0 24 	sts	0x24B0, r24
    3ab6:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3aba:	80 91 71 29 	lds	r24, 0x2971
    3abe:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac0:	29 f4       	brne	.+10     	; 0x3acc <__vector_25+0x50a>
    3ac2:	80 91 72 29 	lds	r24, 0x2972
    3ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <__vector_25+0x50a>
    3aca:	53 c0       	rjmp	.+166    	; 0x3b72 <__vector_25+0x5b0>
				{		
					stop_PID_desni = 0;
    3acc:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
    3ad0:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    3ad4:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
    3ad8:	10 92 0b 2e 	sts	0x2E0B, r1
    3adc:	10 92 0c 2e 	sts	0x2E0C, r1
    3ae0:	10 92 0d 2e 	sts	0x2E0D, r1
    3ae4:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
    3ae8:	20 91 71 29 	lds	r18, 0x2971
    3aec:	40 91 0b 2e 	lds	r20, 0x2E0B
    3af0:	50 91 0c 2e 	lds	r21, 0x2E0C
    3af4:	60 91 0d 2e 	lds	r22, 0x2E0D
    3af8:	70 91 0e 2e 	lds	r23, 0x2E0E
    3afc:	92 2f       	mov	r25, r18
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	aa 27       	eor	r26, r26
    3b02:	97 fd       	sbrc	r25, 7
    3b04:	a0 95       	com	r26
    3b06:	ba 2f       	mov	r27, r26
    3b08:	84 2b       	or	r24, r20
    3b0a:	95 2b       	or	r25, r21
    3b0c:	a6 2b       	or	r26, r22
    3b0e:	b7 2b       	or	r27, r23
    3b10:	80 93 0b 2e 	sts	0x2E0B, r24
    3b14:	90 93 0c 2e 	sts	0x2E0C, r25
    3b18:	a0 93 0d 2e 	sts	0x2E0D, r26
    3b1c:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
    3b20:	20 91 72 29 	lds	r18, 0x2972
    3b24:	80 91 0b 2e 	lds	r24, 0x2E0B
    3b28:	90 91 0c 2e 	lds	r25, 0x2E0C
    3b2c:	a0 91 0d 2e 	lds	r26, 0x2E0D
    3b30:	b0 91 0e 2e 	lds	r27, 0x2E0E
    3b34:	82 2b       	or	r24, r18
    3b36:	80 93 0b 2e 	sts	0x2E0B, r24
    3b3a:	90 93 0c 2e 	sts	0x2E0C, r25
    3b3e:	a0 93 0d 2e 	sts	0x2E0D, r26
    3b42:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    3b46:	a0 91 00 2e 	lds	r26, 0x2E00
    3b4a:	b0 91 01 2e 	lds	r27, 0x2E01
    3b4e:	20 91 0b 2e 	lds	r18, 0x2E0B
    3b52:	30 91 0c 2e 	lds	r19, 0x2E0C
    3b56:	40 91 0d 2e 	lds	r20, 0x2E0D
    3b5a:	50 91 0e 2e 	lds	r21, 0x2E0E
    3b5e:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    3b62:	60 93 0b 2e 	sts	0x2E0B, r22
    3b66:	70 93 0c 2e 	sts	0x2E0C, r23
    3b6a:	80 93 0d 2e 	sts	0x2E0D, r24
    3b6e:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3b72:	80 91 73 29 	lds	r24, 0x2973
    3b76:	8f 3f       	cpi	r24, 0xFF	; 255
    3b78:	29 f4       	brne	.+10     	; 0x3b84 <__vector_25+0x5c2>
    3b7a:	80 91 74 29 	lds	r24, 0x2974
    3b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <__vector_25+0x5c2>
    3b82:	58 c0       	rjmp	.+176    	; 0x3c34 <__vector_25+0x672>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    3b84:	10 92 00 20 	sts	0x2000, r1
    3b88:	10 92 01 20 	sts	0x2001, r1
    3b8c:	10 92 02 20 	sts	0x2002, r1
    3b90:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
    3b94:	20 91 73 29 	lds	r18, 0x2973
    3b98:	40 91 00 20 	lds	r20, 0x2000
    3b9c:	50 91 01 20 	lds	r21, 0x2001
    3ba0:	60 91 02 20 	lds	r22, 0x2002
    3ba4:	70 91 03 20 	lds	r23, 0x2003
    3ba8:	92 2f       	mov	r25, r18
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	aa 27       	eor	r26, r26
    3bae:	97 fd       	sbrc	r25, 7
    3bb0:	a0 95       	com	r26
    3bb2:	ba 2f       	mov	r27, r26
    3bb4:	84 2b       	or	r24, r20
    3bb6:	95 2b       	or	r25, r21
    3bb8:	a6 2b       	or	r26, r22
    3bba:	b7 2b       	or	r27, r23
    3bbc:	80 93 00 20 	sts	0x2000, r24
    3bc0:	90 93 01 20 	sts	0x2001, r25
    3bc4:	a0 93 02 20 	sts	0x2002, r26
    3bc8:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    3bcc:	20 91 74 29 	lds	r18, 0x2974
    3bd0:	80 91 00 20 	lds	r24, 0x2000
    3bd4:	90 91 01 20 	lds	r25, 0x2001
    3bd8:	a0 91 02 20 	lds	r26, 0x2002
    3bdc:	b0 91 03 20 	lds	r27, 0x2003
    3be0:	82 2b       	or	r24, r18
    3be2:	80 93 00 20 	sts	0x2000, r24
    3be6:	90 93 01 20 	sts	0x2001, r25
    3bea:	a0 93 02 20 	sts	0x2002, r26
    3bee:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    3bf2:	20 91 00 20 	lds	r18, 0x2000
    3bf6:	30 91 01 20 	lds	r19, 0x2001
    3bfa:	40 91 02 20 	lds	r20, 0x2002
    3bfe:	50 91 03 20 	lds	r21, 0x2003
    3c02:	60 91 75 32 	lds	r22, 0x3275
    3c06:	70 91 76 32 	lds	r23, 0x3276
    3c0a:	80 91 77 32 	lds	r24, 0x3277
    3c0e:	90 91 78 32 	lds	r25, 0x3278
    3c12:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    3c16:	28 e6       	ldi	r18, 0x68	; 104
    3c18:	31 e0       	ldi	r19, 0x01	; 1
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3c22:	20 93 00 20 	sts	0x2000, r18
    3c26:	30 93 01 20 	sts	0x2001, r19
    3c2a:	40 93 02 20 	sts	0x2002, r20
    3c2e:	50 93 03 20 	sts	0x2003, r21
    3c32:	78 c0       	rjmp	.+240    	; 0x3d24 <__vector_25+0x762>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3c34:	80 91 75 29 	lds	r24, 0x2975
    3c38:	8f 3f       	cpi	r24, 0xFF	; 255
    3c3a:	29 f4       	brne	.+10     	; 0x3c46 <__vector_25+0x684>
    3c3c:	80 91 76 29 	lds	r24, 0x2976
    3c40:	8f 3f       	cpi	r24, 0xFF	; 255
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <__vector_25+0x684>
    3c44:	64 c0       	rjmp	.+200    	; 0x3d0e <__vector_25+0x74c>
				{
					teta_cilj_final = 0;
    3c46:	10 92 00 20 	sts	0x2000, r1
    3c4a:	10 92 01 20 	sts	0x2001, r1
    3c4e:	10 92 02 20 	sts	0x2002, r1
    3c52:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    3c56:	20 91 75 29 	lds	r18, 0x2975
    3c5a:	40 91 00 20 	lds	r20, 0x2000
    3c5e:	50 91 01 20 	lds	r21, 0x2001
    3c62:	60 91 02 20 	lds	r22, 0x2002
    3c66:	70 91 03 20 	lds	r23, 0x2003
    3c6a:	92 2f       	mov	r25, r18
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	aa 27       	eor	r26, r26
    3c70:	97 fd       	sbrc	r25, 7
    3c72:	a0 95       	com	r26
    3c74:	ba 2f       	mov	r27, r26
    3c76:	84 2b       	or	r24, r20
    3c78:	95 2b       	or	r25, r21
    3c7a:	a6 2b       	or	r26, r22
    3c7c:	b7 2b       	or	r27, r23
    3c7e:	80 93 00 20 	sts	0x2000, r24
    3c82:	90 93 01 20 	sts	0x2001, r25
    3c86:	a0 93 02 20 	sts	0x2002, r26
    3c8a:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    3c8e:	20 91 76 29 	lds	r18, 0x2976
    3c92:	80 91 00 20 	lds	r24, 0x2000
    3c96:	90 91 01 20 	lds	r25, 0x2001
    3c9a:	a0 91 02 20 	lds	r26, 0x2002
    3c9e:	b0 91 03 20 	lds	r27, 0x2003
    3ca2:	82 2b       	or	r24, r18
    3ca4:	80 93 00 20 	sts	0x2000, r24
    3ca8:	90 93 01 20 	sts	0x2001, r25
    3cac:	a0 93 02 20 	sts	0x2002, r26
    3cb0:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    3cb4:	20 91 00 20 	lds	r18, 0x2000
    3cb8:	30 91 01 20 	lds	r19, 0x2001
    3cbc:	40 91 02 20 	lds	r20, 0x2002
    3cc0:	50 91 03 20 	lds	r21, 0x2003
    3cc4:	60 91 75 32 	lds	r22, 0x3275
    3cc8:	70 91 76 32 	lds	r23, 0x3276
    3ccc:	80 91 77 32 	lds	r24, 0x3277
    3cd0:	90 91 78 32 	lds	r25, 0x3278
    3cd4:	c0 90 83 32 	lds	r12, 0x3283
    3cd8:	d0 90 84 32 	lds	r13, 0x3284
    3cdc:	e0 90 85 32 	lds	r14, 0x3285
    3ce0:	f0 90 86 32 	lds	r15, 0x3286
    3ce4:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    3ce8:	28 e6       	ldi	r18, 0x68	; 104
    3cea:	31 e0       	ldi	r19, 0x01	; 1
    3cec:	40 e0       	ldi	r20, 0x00	; 0
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3cf4:	c2 0e       	add	r12, r18
    3cf6:	d3 1e       	adc	r13, r19
    3cf8:	e4 1e       	adc	r14, r20
    3cfa:	f5 1e       	adc	r15, r21
    3cfc:	c0 92 00 20 	sts	0x2000, r12
    3d00:	d0 92 01 20 	sts	0x2001, r13
    3d04:	e0 92 02 20 	sts	0x2002, r14
    3d08:	f0 92 03 20 	sts	0x2003, r15
    3d0c:	0b c0       	rjmp	.+22     	; 0x3d24 <__vector_25+0x762>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    3d0e:	8f ef       	ldi	r24, 0xFF	; 255
    3d10:	9f ef       	ldi	r25, 0xFF	; 255
    3d12:	dc 01       	movw	r26, r24
    3d14:	80 93 00 20 	sts	0x2000, r24
    3d18:	90 93 01 20 	sts	0x2001, r25
    3d1c:	a0 93 02 20 	sts	0x2002, r26
    3d20:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    3d24:	80 91 77 29 	lds	r24, 0x2977
    3d28:	8f 3f       	cpi	r24, 0xFF	; 255
    3d2a:	c9 f0       	breq	.+50     	; 0x3d5e <__vector_25+0x79c>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    3d2c:	80 91 77 29 	lds	r24, 0x2977
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	9c 01       	movw	r18, r24
    3d34:	22 0f       	add	r18, r18
    3d36:	33 1f       	adc	r19, r19
    3d38:	82 0f       	add	r24, r18
    3d3a:	93 1f       	adc	r25, r19
    3d3c:	80 93 7f 32 	sts	0x327F, r24
    3d40:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    3d44:	80 91 7f 32 	lds	r24, 0x327F
    3d48:	90 91 80 32 	lds	r25, 0x3280
    3d4c:	99 23       	and	r25, r25
    3d4e:	0c f4       	brge	.+2      	; 0x3d52 <__vector_25+0x790>
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	95 95       	asr	r25
    3d54:	87 95       	ror	r24
    3d56:	80 93 61 2e 	sts	0x2E61, r24
    3d5a:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    3d5e:	80 91 78 29 	lds	r24, 0x2978
    3d62:	8f 3f       	cpi	r24, 0xFF	; 255
    3d64:	21 f0       	breq	.+8      	; 0x3d6e <__vector_25+0x7ac>
					smer_zadati = receiveArray[10];	
    3d66:	80 91 78 29 	lds	r24, 0x2978
    3d6a:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    3d6e:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    3d72:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    3d76:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    3d7a:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    3d7e:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    3d82:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    3d86:	80 91 6e 29 	lds	r24, 0x296E
    3d8a:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
    3d90:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3d92:	f8 01       	movw	r30, r16
    3d94:	e3 52       	subi	r30, 0x23	; 35
    3d96:	f7 4d       	sbci	r31, 0xD7	; 215
    3d98:	60 81       	ld	r22, Z
    3d9a:	82 e9       	ldi	r24, 0x92	; 146
    3d9c:	91 e2       	ldi	r25, 0x21	; 33
    3d9e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3da2:	88 23       	and	r24, r24
    3da4:	11 f0       	breq	.+4      	; 0x3daa <__vector_25+0x7e8>
					{
						i++;
    3da6:	0f 5f       	subi	r16, 0xFF	; 255
    3da8:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    3daa:	10 16       	cp	r1, r16
    3dac:	11 06       	cpc	r1, r17
    3dae:	8c f7       	brge	.-30     	; 0x3d92 <__vector_25+0x7d0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    3db0:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda	
    3db4:	10 92 3f 2e 	sts	0x2E3F, r1
    3db8:	07 c4       	rjmp	.+2062   	; 0x45c8 <__stack+0x5c9>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    3dba:	80 91 6e 29 	lds	r24, 0x296E
    3dbe:	84 30       	cpi	r24, 0x04	; 4
    3dc0:	09 f0       	breq	.+2      	; 0x3dc4 <__vector_25+0x802>
    3dc2:	75 c1       	rjmp	.+746    	; 0x40ae <__stack+0xaf>
	{
		if(RX_i_C0 >= 5)								//stigla je cela poruka
    3dc4:	80 91 3f 2e 	lds	r24, 0x2E3F
    3dc8:	85 30       	cpi	r24, 0x05	; 5
    3dca:	08 f4       	brcc	.+2      	; 0x3dce <__vector_25+0x80c>
    3dcc:	fd c3       	rjmp	.+2042   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3dce:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    3dd2:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    3dd6:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    3dda:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    3dde:	10 92 c5 28 	sts	0x28C5, r1
    3de2:	10 92 c6 28 	sts	0x28C6, r1
    3de6:	10 92 c7 28 	sts	0x28C7, r1
    3dea:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    3dee:	20 91 6f 29 	lds	r18, 0x296F
    3df2:	40 91 c5 28 	lds	r20, 0x28C5
    3df6:	50 91 c6 28 	lds	r21, 0x28C6
    3dfa:	60 91 c7 28 	lds	r22, 0x28C7
    3dfe:	70 91 c8 28 	lds	r23, 0x28C8
    3e02:	92 2f       	mov	r25, r18
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	aa 27       	eor	r26, r26
    3e08:	97 fd       	sbrc	r25, 7
    3e0a:	a0 95       	com	r26
    3e0c:	ba 2f       	mov	r27, r26
    3e0e:	84 2b       	or	r24, r20
    3e10:	95 2b       	or	r25, r21
    3e12:	a6 2b       	or	r26, r22
    3e14:	b7 2b       	or	r27, r23
    3e16:	80 93 c5 28 	sts	0x28C5, r24
    3e1a:	90 93 c6 28 	sts	0x28C6, r25
    3e1e:	a0 93 c7 28 	sts	0x28C7, r26
    3e22:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    3e26:	20 91 70 29 	lds	r18, 0x2970
    3e2a:	80 91 c5 28 	lds	r24, 0x28C5
    3e2e:	90 91 c6 28 	lds	r25, 0x28C6
    3e32:	a0 91 c7 28 	lds	r26, 0x28C7
    3e36:	b0 91 c8 28 	lds	r27, 0x28C8
    3e3a:	82 2b       	or	r24, r18
    3e3c:	80 93 c5 28 	sts	0x28C5, r24
    3e40:	90 93 c6 28 	sts	0x28C6, r25
    3e44:	a0 93 c7 28 	sts	0x28C7, r26
    3e48:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    3e4c:	a0 91 00 2e 	lds	r26, 0x2E00
    3e50:	b0 91 01 2e 	lds	r27, 0x2E01
    3e54:	20 91 c5 28 	lds	r18, 0x28C5
    3e58:	30 91 c6 28 	lds	r19, 0x28C6
    3e5c:	40 91 c7 28 	lds	r20, 0x28C7
    3e60:	50 91 c8 28 	lds	r21, 0x28C8
    3e64:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    3e68:	60 93 c5 28 	sts	0x28C5, r22
    3e6c:	70 93 c6 28 	sts	0x28C6, r23
    3e70:	80 93 c7 28 	sts	0x28C7, r24
    3e74:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    3e78:	10 92 16 2e 	sts	0x2E16, r1
    3e7c:	10 92 17 2e 	sts	0x2E17, r1
    3e80:	10 92 18 2e 	sts	0x2E18, r1
    3e84:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    3e88:	20 91 71 29 	lds	r18, 0x2971
    3e8c:	40 91 16 2e 	lds	r20, 0x2E16
    3e90:	50 91 17 2e 	lds	r21, 0x2E17
    3e94:	60 91 18 2e 	lds	r22, 0x2E18
    3e98:	70 91 19 2e 	lds	r23, 0x2E19
    3e9c:	92 2f       	mov	r25, r18
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	aa 27       	eor	r26, r26
    3ea2:	97 fd       	sbrc	r25, 7
    3ea4:	a0 95       	com	r26
    3ea6:	ba 2f       	mov	r27, r26
    3ea8:	84 2b       	or	r24, r20
    3eaa:	95 2b       	or	r25, r21
    3eac:	a6 2b       	or	r26, r22
    3eae:	b7 2b       	or	r27, r23
    3eb0:	80 93 16 2e 	sts	0x2E16, r24
    3eb4:	90 93 17 2e 	sts	0x2E17, r25
    3eb8:	a0 93 18 2e 	sts	0x2E18, r26
    3ebc:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    3ec0:	20 91 72 29 	lds	r18, 0x2972
    3ec4:	80 91 16 2e 	lds	r24, 0x2E16
    3ec8:	90 91 17 2e 	lds	r25, 0x2E17
    3ecc:	a0 91 18 2e 	lds	r26, 0x2E18
    3ed0:	b0 91 19 2e 	lds	r27, 0x2E19
    3ed4:	82 2b       	or	r24, r18
    3ed6:	80 93 16 2e 	sts	0x2E16, r24
    3eda:	90 93 17 2e 	sts	0x2E17, r25
    3ede:	a0 93 18 2e 	sts	0x2E18, r26
    3ee2:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    3ee6:	20 91 16 2e 	lds	r18, 0x2E16
    3eea:	30 91 17 2e 	lds	r19, 0x2E17
    3eee:	40 91 18 2e 	lds	r20, 0x2E18
    3ef2:	50 91 19 2e 	lds	r21, 0x2E19
    3ef6:	60 91 75 32 	lds	r22, 0x3275
    3efa:	70 91 76 32 	lds	r23, 0x3276
    3efe:	80 91 77 32 	lds	r24, 0x3277
    3f02:	90 91 78 32 	lds	r25, 0x3278
    3f06:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    3f0a:	28 e6       	ldi	r18, 0x68	; 104
    3f0c:	31 e0       	ldi	r19, 0x01	; 1
    3f0e:	40 e0       	ldi	r20, 0x00	; 0
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3f16:	20 93 16 2e 	sts	0x2E16, r18
    3f1a:	30 93 17 2e 	sts	0x2E17, r19
    3f1e:	40 93 18 2e 	sts	0x2E18, r20
    3f22:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
    3f26:	c0 90 83 32 	lds	r12, 0x3283
    3f2a:	d0 90 84 32 	lds	r13, 0x3284
    3f2e:	e0 90 85 32 	lds	r14, 0x3285
    3f32:	f0 90 86 32 	lds	r15, 0x3286
    3f36:	80 91 16 2e 	lds	r24, 0x2E16
    3f3a:	90 91 17 2e 	lds	r25, 0x2E17
    3f3e:	a0 91 18 2e 	lds	r26, 0x2E18
    3f42:	b0 91 19 2e 	lds	r27, 0x2E19
    3f46:	20 91 cf 28 	lds	r18, 0x28CF
    3f4a:	30 91 d0 28 	lds	r19, 0x28D0
    3f4e:	40 91 d1 28 	lds	r20, 0x28D1
    3f52:	50 91 d2 28 	lds	r21, 0x28D2
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	6c 0d       	add	r22, r12
    3f5c:	7d 1d       	adc	r23, r13
    3f5e:	8e 1d       	adc	r24, r14
    3f60:	9f 1d       	adc	r25, r15
    3f62:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3f66:	ca 01       	movw	r24, r20
    3f68:	b9 01       	movw	r22, r18
    3f6a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    3f6e:	2b ed       	ldi	r18, 0xDB	; 219
    3f70:	3f e0       	ldi	r19, 0x0F	; 15
    3f72:	49 e4       	ldi	r20, 0x49	; 73
    3f74:	50 e4       	ldi	r21, 0x40	; 64
    3f76:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    3f7a:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <cos>
    3f7e:	69 83       	std	Y+1, r22	; 0x01
    3f80:	7a 83       	std	Y+2, r23	; 0x02
    3f82:	8b 83       	std	Y+3, r24	; 0x03
    3f84:	9c 83       	std	Y+4, r25	; 0x04
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
    3f86:	c0 90 83 32 	lds	r12, 0x3283
    3f8a:	d0 90 84 32 	lds	r13, 0x3284
    3f8e:	e0 90 85 32 	lds	r14, 0x3285
    3f92:	f0 90 86 32 	lds	r15, 0x3286
    3f96:	80 91 16 2e 	lds	r24, 0x2E16
    3f9a:	90 91 17 2e 	lds	r25, 0x2E17
    3f9e:	a0 91 18 2e 	lds	r26, 0x2E18
    3fa2:	b0 91 19 2e 	lds	r27, 0x2E19
    3fa6:	20 91 cf 28 	lds	r18, 0x28CF
    3faa:	30 91 d0 28 	lds	r19, 0x28D0
    3fae:	40 91 d1 28 	lds	r20, 0x28D1
    3fb2:	50 91 d2 28 	lds	r21, 0x28D2
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	6c 0d       	add	r22, r12
    3fbc:	7d 1d       	adc	r23, r13
    3fbe:	8e 1d       	adc	r24, r14
    3fc0:	9f 1d       	adc	r25, r15
    3fc2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    3fc6:	ca 01       	movw	r24, r20
    3fc8:	b9 01       	movw	r22, r18
    3fca:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    3fce:	2b ed       	ldi	r18, 0xDB	; 219
    3fd0:	3f e0       	ldi	r19, 0x0F	; 15
    3fd2:	49 e4       	ldi	r20, 0x49	; 73
    3fd4:	50 e4       	ldi	r21, 0x40	; 64
    3fd6:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    3fda:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <sin>
    3fde:	4b 01       	movw	r8, r22
    3fe0:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    3fe2:	60 91 c5 28 	lds	r22, 0x28C5
    3fe6:	70 91 c6 28 	lds	r23, 0x28C6
    3fea:	80 91 c7 28 	lds	r24, 0x28C7
    3fee:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    3ff2:	40 90 c5 28 	lds	r4, 0x28C5
    3ff6:	50 90 c6 28 	lds	r5, 0x28C6
    3ffa:	60 90 c7 28 	lds	r6, 0x28C7
    3ffe:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    4002:	c0 90 23 2e 	lds	r12, 0x2E23
    4006:	d0 90 24 2e 	lds	r13, 0x2E24
    400a:	e0 90 25 2e 	lds	r14, 0x2E25
    400e:	f0 90 26 2e 	lds	r15, 0x2E26
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    4012:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4016:	29 81       	ldd	r18, Y+1	; 0x01
    4018:	3a 81       	ldd	r19, Y+2	; 0x02
    401a:	4b 81       	ldd	r20, Y+3	; 0x03
    401c:	5c 81       	ldd	r21, Y+4	; 0x04
    401e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    4022:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    4026:	c6 0e       	add	r12, r22
    4028:	d7 1e       	adc	r13, r23
    402a:	e8 1e       	adc	r14, r24
    402c:	f9 1e       	adc	r15, r25
    402e:	c0 92 ae 24 	sts	0x24AE, r12
    4032:	d0 92 af 24 	sts	0x24AF, r13
    4036:	e0 92 b0 24 	sts	0x24B0, r14
    403a:	f0 92 b1 24 	sts	0x24B1, r15
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    403e:	c0 90 02 2a 	lds	r12, 0x2A02
    4042:	d0 90 03 2a 	lds	r13, 0x2A03
    4046:	e0 90 04 2a 	lds	r14, 0x2A04
    404a:	f0 90 05 2a 	lds	r15, 0x2A05
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    404e:	c3 01       	movw	r24, r6
    4050:	b2 01       	movw	r22, r4
    4052:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4056:	a5 01       	movw	r20, r10
    4058:	94 01       	movw	r18, r8
    405a:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    405e:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    4062:	c6 0e       	add	r12, r22
    4064:	d7 1e       	adc	r13, r23
    4066:	e8 1e       	adc	r14, r24
    4068:	f9 1e       	adc	r15, r25
    406a:	c0 92 0b 2e 	sts	0x2E0B, r12
    406e:	d0 92 0c 2e 	sts	0x2E0C, r13
    4072:	e0 92 0d 2e 	sts	0x2E0D, r14
    4076:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    407a:	80 91 6e 29 	lds	r24, 0x296E
    407e:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    4082:	00 e0       	ldi	r16, 0x00	; 0
    4084:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4086:	f8 01       	movw	r30, r16
    4088:	e3 52       	subi	r30, 0x23	; 35
    408a:	f7 4d       	sbci	r31, 0xD7	; 215
    408c:	60 81       	ld	r22, Z
    408e:	82 e9       	ldi	r24, 0x92	; 146
    4090:	91 e2       	ldi	r25, 0x21	; 33
    4092:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4096:	88 23       	and	r24, r24
    4098:	11 f0       	breq	.+4      	; 0x409e <__stack+0x9f>
					{
						i++;
    409a:	0f 5f       	subi	r16, 0xFF	; 255
    409c:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    409e:	10 16       	cp	r1, r16
    40a0:	11 06       	cpc	r1, r17
    40a2:	8c f7       	brge	.-30     	; 0x4086 <__stack+0x87>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    40a4:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    40a8:	10 92 3f 2e 	sts	0x2E3F, r1
    40ac:	8d c2       	rjmp	.+1306   	; 0x45c8 <__stack+0x5c9>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    40ae:	80 91 6e 29 	lds	r24, 0x296E
    40b2:	85 30       	cpi	r24, 0x05	; 5
    40b4:	09 f0       	breq	.+2      	; 0x40b8 <__stack+0xb9>
    40b6:	6e c0       	rjmp	.+220    	; 0x4194 <__stack+0x195>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    40b8:	80 91 3f 2e 	lds	r24, 0x2E3F
    40bc:	83 30       	cpi	r24, 0x03	; 3
    40be:	08 f4       	brcc	.+2      	; 0x40c2 <__stack+0xc3>
    40c0:	83 c2       	rjmp	.+1286   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    40c2:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    40cc:	80 91 6f 29 	lds	r24, 0x296F
    40d0:	88 23       	and	r24, r24
    40d2:	8c f4       	brge	.+34     	; 0x40f6 <__stack+0xf7>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    40d4:	80 91 6f 29 	lds	r24, 0x296F
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	9c 01       	movw	r18, r24
    40dc:	22 0f       	add	r18, r18
    40de:	33 1f       	adc	r19, r19
    40e0:	22 0f       	add	r18, r18
    40e2:	33 1f       	adc	r19, r19
    40e4:	82 0f       	add	r24, r18
    40e6:	93 1f       	adc	r25, r19
    40e8:	80 58       	subi	r24, 0x80	; 128
    40ea:	92 40       	sbci	r25, 0x02	; 2
    40ec:	80 93 7b 2e 	sts	0x2E7B, r24
    40f0:	90 93 7c 2e 	sts	0x2E7C, r25
    40f4:	10 c0       	rjmp	.+32     	; 0x4116 <__stack+0x117>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    40f6:	80 91 6f 29 	lds	r24, 0x296F
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	9c 01       	movw	r18, r24
    40fe:	22 0f       	add	r18, r18
    4100:	33 1f       	adc	r19, r19
    4102:	22 0f       	add	r18, r18
    4104:	33 1f       	adc	r19, r19
    4106:	82 0f       	add	r24, r18
    4108:	93 1f       	adc	r25, r19
    410a:	80 58       	subi	r24, 0x80	; 128
    410c:	92 40       	sbci	r25, 0x02	; 2
    410e:	80 93 7b 2e 	sts	0x2E7B, r24
    4112:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    4116:	80 91 70 29 	lds	r24, 0x2970
    411a:	88 23       	and	r24, r24
    411c:	8c f4       	brge	.+34     	; 0x4140 <__stack+0x141>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    411e:	80 91 70 29 	lds	r24, 0x2970
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	9c 01       	movw	r18, r24
    4126:	22 0f       	add	r18, r18
    4128:	33 1f       	adc	r19, r19
    412a:	22 0f       	add	r18, r18
    412c:	33 1f       	adc	r19, r19
    412e:	82 0f       	add	r24, r18
    4130:	93 1f       	adc	r25, r19
    4132:	80 58       	subi	r24, 0x80	; 128
    4134:	92 40       	sbci	r25, 0x02	; 2
    4136:	80 93 79 2e 	sts	0x2E79, r24
    413a:	90 93 7a 2e 	sts	0x2E7A, r25
    413e:	10 c0       	rjmp	.+32     	; 0x4160 <__stack+0x161>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    4140:	80 91 70 29 	lds	r24, 0x2970
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9c 01       	movw	r18, r24
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	82 0f       	add	r24, r18
    4152:	93 1f       	adc	r25, r19
    4154:	80 58       	subi	r24, 0x80	; 128
    4156:	92 40       	sbci	r25, 0x02	; 2
    4158:	80 93 79 2e 	sts	0x2E79, r24
    415c:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4160:	80 91 6e 29 	lds	r24, 0x296E
    4164:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    4168:	00 e0       	ldi	r16, 0x00	; 0
    416a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    416c:	f8 01       	movw	r30, r16
    416e:	e3 52       	subi	r30, 0x23	; 35
    4170:	f7 4d       	sbci	r31, 0xD7	; 215
    4172:	60 81       	ld	r22, Z
    4174:	82 e9       	ldi	r24, 0x92	; 146
    4176:	91 e2       	ldi	r25, 0x21	; 33
    4178:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    417c:	88 23       	and	r24, r24
    417e:	11 f0       	breq	.+4      	; 0x4184 <__stack+0x185>
					{
						i++;
    4180:	0f 5f       	subi	r16, 0xFF	; 255
    4182:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4184:	10 16       	cp	r1, r16
    4186:	11 06       	cpc	r1, r17
    4188:	8c f7       	brge	.-30     	; 0x416c <__stack+0x16d>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    418a:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    418e:	10 92 3f 2e 	sts	0x2E3F, r1
    4192:	1a c2       	rjmp	.+1076   	; 0x45c8 <__stack+0x5c9>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    4194:	80 91 6e 29 	lds	r24, 0x296E
    4198:	86 30       	cpi	r24, 0x06	; 6
    419a:	09 f0       	breq	.+2      	; 0x419e <__stack+0x19f>
    419c:	56 c0       	rjmp	.+172    	; 0x424a <__stack+0x24b>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    419e:	80 91 3f 2e 	lds	r24, 0x2E3F
    41a2:	87 30       	cpi	r24, 0x07	; 7
    41a4:	08 f4       	brcc	.+2      	; 0x41a8 <__stack+0x1a9>
    41a6:	10 c2       	rjmp	.+1056   	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    41a8:	10 92 fb 2d 	sts	0x2DFB, r1
// 			for(i=0; i<= 4; i++)					//racunanje CHC
// 			CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    41ac:	e0 e4       	ldi	r30, 0x40	; 64
    41ae:	f6 e0       	ldi	r31, 0x06	; 6
    41b0:	94 81       	ldd	r25, Z+4	; 0x04
    41b2:	4f e6       	ldi	r20, 0x6F	; 111
    41b4:	59 e2       	ldi	r21, 0x29	; 41
    41b6:	da 01       	movw	r26, r20
    41b8:	8c 91       	ld	r24, X
    41ba:	60 e7       	ldi	r22, 0x70	; 112
    41bc:	79 e2       	ldi	r23, 0x29	; 41
    41be:	db 01       	movw	r26, r22
    41c0:	2c 91       	ld	r18, X
    41c2:	82 23       	and	r24, r18
    41c4:	89 2b       	or	r24, r25
    41c6:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    41c8:	94 81       	ldd	r25, Z+4	; 0x04
    41ca:	da 01       	movw	r26, r20
    41cc:	8c 91       	ld	r24, X
    41ce:	db 01       	movw	r26, r22
    41d0:	2c 91       	ld	r18, X
    41d2:	82 27       	eor	r24, r18
    41d4:	80 95       	com	r24
    41d6:	89 23       	and	r24, r25
    41d8:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    41da:	80 91 71 29 	lds	r24, 0x2971
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	88 58       	subi	r24, 0x88	; 136
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	e0 e0       	ldi	r30, 0x00	; 0
    41e6:	fb e0       	ldi	r31, 0x0B	; 11
    41e8:	80 a7       	std	Z+40, r24	; 0x28
    41ea:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    41ec:	80 91 72 29 	lds	r24, 0x2972
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	88 58       	subi	r24, 0x88	; 136
    41f4:	9f 4f       	sbci	r25, 0xFF	; 255
    41f6:	82 a7       	std	Z+42, r24	; 0x2a
    41f8:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    41fa:	80 91 73 29 	lds	r24, 0x2973
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	88 58       	subi	r24, 0x88	; 136
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	84 a7       	std	Z+44, r24	; 0x2c
    4206:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    4208:	80 91 74 29 	lds	r24, 0x2974
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	88 58       	subi	r24, 0x88	; 136
    4210:	9f 4f       	sbci	r25, 0xFF	; 255
    4212:	86 a7       	std	Z+46, r24	; 0x2e
    4214:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4216:	80 91 6e 29 	lds	r24, 0x296E
    421a:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    421e:	00 e0       	ldi	r16, 0x00	; 0
    4220:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4222:	f8 01       	movw	r30, r16
    4224:	e3 52       	subi	r30, 0x23	; 35
    4226:	f7 4d       	sbci	r31, 0xD7	; 215
    4228:	60 81       	ld	r22, Z
    422a:	82 e9       	ldi	r24, 0x92	; 146
    422c:	91 e2       	ldi	r25, 0x21	; 33
    422e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4232:	88 23       	and	r24, r24
    4234:	11 f0       	breq	.+4      	; 0x423a <__stack+0x23b>
					{
						i++;
    4236:	0f 5f       	subi	r16, 0xFF	; 255
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    423a:	10 16       	cp	r1, r16
    423c:	11 06       	cpc	r1, r17
    423e:	8c f7       	brge	.-30     	; 0x4222 <__stack+0x223>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4240:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4244:	10 92 3f 2e 	sts	0x2E3F, r1
    4248:	bf c1       	rjmp	.+894    	; 0x45c8 <__stack+0x5c9>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    424a:	80 91 6e 29 	lds	r24, 0x296E
    424e:	87 30       	cpi	r24, 0x07	; 7
    4250:	09 f0       	breq	.+2      	; 0x4254 <__stack+0x255>
    4252:	7d c1       	rjmp	.+762    	; 0x454e <__stack+0x54f>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    4254:	80 91 3f 2e 	lds	r24, 0x2E3F
    4258:	87 30       	cpi	r24, 0x07	; 7
    425a:	08 f4       	brcc	.+2      	; 0x425e <__stack+0x25f>
    425c:	b5 c1       	rjmp	.+874    	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    425e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4262:	80 91 6f 29 	lds	r24, 0x296F
    4266:	8f 3f       	cpi	r24, 0xFF	; 255
    4268:	29 f4       	brne	.+10     	; 0x4274 <__stack+0x275>
    426a:	80 91 70 29 	lds	r24, 0x2970
    426e:	8f 3f       	cpi	r24, 0xFF	; 255
    4270:	09 f4       	brne	.+2      	; 0x4274 <__stack+0x275>
    4272:	6d c0       	rjmp	.+218    	; 0x434e <__stack+0x34f>
				{
					X_pos = 0;
    4274:	10 92 23 2e 	sts	0x2E23, r1
    4278:	10 92 24 2e 	sts	0x2E24, r1
    427c:	10 92 25 2e 	sts	0x2E25, r1
    4280:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    4284:	20 91 6f 29 	lds	r18, 0x296F
    4288:	40 91 23 2e 	lds	r20, 0x2E23
    428c:	50 91 24 2e 	lds	r21, 0x2E24
    4290:	60 91 25 2e 	lds	r22, 0x2E25
    4294:	70 91 26 2e 	lds	r23, 0x2E26
    4298:	92 2f       	mov	r25, r18
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	aa 27       	eor	r26, r26
    429e:	97 fd       	sbrc	r25, 7
    42a0:	a0 95       	com	r26
    42a2:	ba 2f       	mov	r27, r26
    42a4:	84 2b       	or	r24, r20
    42a6:	95 2b       	or	r25, r21
    42a8:	a6 2b       	or	r26, r22
    42aa:	b7 2b       	or	r27, r23
    42ac:	80 93 23 2e 	sts	0x2E23, r24
    42b0:	90 93 24 2e 	sts	0x2E24, r25
    42b4:	a0 93 25 2e 	sts	0x2E25, r26
    42b8:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    42bc:	20 91 70 29 	lds	r18, 0x2970
    42c0:	80 91 23 2e 	lds	r24, 0x2E23
    42c4:	90 91 24 2e 	lds	r25, 0x2E24
    42c8:	a0 91 25 2e 	lds	r26, 0x2E25
    42cc:	b0 91 26 2e 	lds	r27, 0x2E26
    42d0:	82 2b       	or	r24, r18
    42d2:	80 93 23 2e 	sts	0x2E23, r24
    42d6:	90 93 24 2e 	sts	0x2E24, r25
    42da:	a0 93 25 2e 	sts	0x2E25, r26
    42de:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    42e2:	a0 91 00 2e 	lds	r26, 0x2E00
    42e6:	b0 91 01 2e 	lds	r27, 0x2E01
    42ea:	20 91 23 2e 	lds	r18, 0x2E23
    42ee:	30 91 24 2e 	lds	r19, 0x2E24
    42f2:	40 91 25 2e 	lds	r20, 0x2E25
    42f6:	50 91 26 2e 	lds	r21, 0x2E26
    42fa:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    42fe:	60 93 23 2e 	sts	0x2E23, r22
    4302:	70 93 24 2e 	sts	0x2E24, r23
    4306:	80 93 25 2e 	sts	0x2E25, r24
    430a:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    430e:	80 91 23 2e 	lds	r24, 0x2E23
    4312:	90 91 24 2e 	lds	r25, 0x2E24
    4316:	a0 91 25 2e 	lds	r26, 0x2E25
    431a:	b0 91 26 2e 	lds	r27, 0x2E26
    431e:	80 93 ae 24 	sts	0x24AE, r24
    4322:	90 93 af 24 	sts	0x24AF, r25
    4326:	a0 93 b0 24 	sts	0x24B0, r26
    432a:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    432e:	80 91 23 2e 	lds	r24, 0x2E23
    4332:	90 91 24 2e 	lds	r25, 0x2E24
    4336:	a0 91 25 2e 	lds	r26, 0x2E25
    433a:	b0 91 26 2e 	lds	r27, 0x2E26
    433e:	80 93 31 2e 	sts	0x2E31, r24
    4342:	90 93 32 2e 	sts	0x2E32, r25
    4346:	a0 93 33 2e 	sts	0x2E33, r26
    434a:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    434e:	80 91 71 29 	lds	r24, 0x2971
    4352:	8f 3f       	cpi	r24, 0xFF	; 255
    4354:	29 f4       	brne	.+10     	; 0x4360 <__stack+0x361>
    4356:	80 91 72 29 	lds	r24, 0x2972
    435a:	8f 3f       	cpi	r24, 0xFF	; 255
    435c:	09 f4       	brne	.+2      	; 0x4360 <__stack+0x361>
    435e:	6d c0       	rjmp	.+218    	; 0x443a <__stack+0x43b>
				{
					Y_pos = 0;
    4360:	10 92 02 2a 	sts	0x2A02, r1
    4364:	10 92 03 2a 	sts	0x2A03, r1
    4368:	10 92 04 2a 	sts	0x2A04, r1
    436c:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    4370:	20 91 71 29 	lds	r18, 0x2971
    4374:	40 91 02 2a 	lds	r20, 0x2A02
    4378:	50 91 03 2a 	lds	r21, 0x2A03
    437c:	60 91 04 2a 	lds	r22, 0x2A04
    4380:	70 91 05 2a 	lds	r23, 0x2A05
    4384:	92 2f       	mov	r25, r18
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	aa 27       	eor	r26, r26
    438a:	97 fd       	sbrc	r25, 7
    438c:	a0 95       	com	r26
    438e:	ba 2f       	mov	r27, r26
    4390:	84 2b       	or	r24, r20
    4392:	95 2b       	or	r25, r21
    4394:	a6 2b       	or	r26, r22
    4396:	b7 2b       	or	r27, r23
    4398:	80 93 02 2a 	sts	0x2A02, r24
    439c:	90 93 03 2a 	sts	0x2A03, r25
    43a0:	a0 93 04 2a 	sts	0x2A04, r26
    43a4:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    43a8:	20 91 72 29 	lds	r18, 0x2972
    43ac:	80 91 02 2a 	lds	r24, 0x2A02
    43b0:	90 91 03 2a 	lds	r25, 0x2A03
    43b4:	a0 91 04 2a 	lds	r26, 0x2A04
    43b8:	b0 91 05 2a 	lds	r27, 0x2A05
    43bc:	82 2b       	or	r24, r18
    43be:	80 93 02 2a 	sts	0x2A02, r24
    43c2:	90 93 03 2a 	sts	0x2A03, r25
    43c6:	a0 93 04 2a 	sts	0x2A04, r26
    43ca:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    43ce:	a0 91 00 2e 	lds	r26, 0x2E00
    43d2:	b0 91 01 2e 	lds	r27, 0x2E01
    43d6:	20 91 0b 2e 	lds	r18, 0x2E0B
    43da:	30 91 0c 2e 	lds	r19, 0x2E0C
    43de:	40 91 0d 2e 	lds	r20, 0x2E0D
    43e2:	50 91 0e 2e 	lds	r21, 0x2E0E
    43e6:	0e 94 97 38 	call	0x712e	; 0x712e <__muluhisi3>
    43ea:	60 93 02 2a 	sts	0x2A02, r22
    43ee:	70 93 03 2a 	sts	0x2A03, r23
    43f2:	80 93 04 2a 	sts	0x2A04, r24
    43f6:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    43fa:	80 91 02 2a 	lds	r24, 0x2A02
    43fe:	90 91 03 2a 	lds	r25, 0x2A03
    4402:	a0 91 04 2a 	lds	r26, 0x2A04
    4406:	b0 91 05 2a 	lds	r27, 0x2A05
    440a:	80 93 0b 2e 	sts	0x2E0B, r24
    440e:	90 93 0c 2e 	sts	0x2E0C, r25
    4412:	a0 93 0d 2e 	sts	0x2E0D, r26
    4416:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    441a:	80 91 02 2a 	lds	r24, 0x2A02
    441e:	90 91 03 2a 	lds	r25, 0x2A03
    4422:	a0 91 04 2a 	lds	r26, 0x2A04
    4426:	b0 91 05 2a 	lds	r27, 0x2A05
    442a:	80 93 70 2e 	sts	0x2E70, r24
    442e:	90 93 71 2e 	sts	0x2E71, r25
    4432:	a0 93 72 2e 	sts	0x2E72, r26
    4436:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    443a:	80 91 73 29 	lds	r24, 0x2973
    443e:	8f 3f       	cpi	r24, 0xFF	; 255
    4440:	29 f4       	brne	.+10     	; 0x444c <__stack+0x44d>
    4442:	80 91 74 29 	lds	r24, 0x2974
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	09 f4       	brne	.+2      	; 0x444c <__stack+0x44d>
    444a:	67 c0       	rjmp	.+206    	; 0x451a <__stack+0x51b>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    444c:	10 92 83 32 	sts	0x3283, r1
    4450:	10 92 84 32 	sts	0x3284, r1
    4454:	10 92 85 32 	sts	0x3285, r1
    4458:	10 92 86 32 	sts	0x3286, r1
					teta |= ((int)receiveArray[5]) << 8;
    445c:	20 91 73 29 	lds	r18, 0x2973
    4460:	40 91 83 32 	lds	r20, 0x3283
    4464:	50 91 84 32 	lds	r21, 0x3284
    4468:	60 91 85 32 	lds	r22, 0x3285
    446c:	70 91 86 32 	lds	r23, 0x3286
    4470:	92 2f       	mov	r25, r18
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	aa 27       	eor	r26, r26
    4476:	97 fd       	sbrc	r25, 7
    4478:	a0 95       	com	r26
    447a:	ba 2f       	mov	r27, r26
    447c:	84 2b       	or	r24, r20
    447e:	95 2b       	or	r25, r21
    4480:	a6 2b       	or	r26, r22
    4482:	b7 2b       	or	r27, r23
    4484:	80 93 83 32 	sts	0x3283, r24
    4488:	90 93 84 32 	sts	0x3284, r25
    448c:	a0 93 85 32 	sts	0x3285, r26
    4490:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    4494:	20 91 74 29 	lds	r18, 0x2974
    4498:	80 91 83 32 	lds	r24, 0x3283
    449c:	90 91 84 32 	lds	r25, 0x3284
    44a0:	a0 91 85 32 	lds	r26, 0x3285
    44a4:	b0 91 86 32 	lds	r27, 0x3286
    44a8:	82 2b       	or	r24, r18
    44aa:	80 93 83 32 	sts	0x3283, r24
    44ae:	90 93 84 32 	sts	0x3284, r25
    44b2:	a0 93 85 32 	sts	0x3285, r26
    44b6:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    44ba:	20 91 83 32 	lds	r18, 0x3283
    44be:	30 91 84 32 	lds	r19, 0x3284
    44c2:	40 91 85 32 	lds	r20, 0x3285
    44c6:	50 91 86 32 	lds	r21, 0x3286
    44ca:	60 91 75 32 	lds	r22, 0x3275
    44ce:	70 91 76 32 	lds	r23, 0x3276
    44d2:	80 91 77 32 	lds	r24, 0x3277
    44d6:	90 91 78 32 	lds	r25, 0x3278
    44da:	0e 94 38 38 	call	0x7070	; 0x7070 <__mulsi3>
    44de:	28 e6       	ldi	r18, 0x68	; 104
    44e0:	31 e0       	ldi	r19, 0x01	; 1
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    44ea:	20 93 83 32 	sts	0x3283, r18
    44ee:	30 93 84 32 	sts	0x3284, r19
    44f2:	40 93 85 32 	sts	0x3285, r20
    44f6:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    44fa:	80 91 83 32 	lds	r24, 0x3283
    44fe:	90 91 84 32 	lds	r25, 0x3284
    4502:	a0 91 85 32 	lds	r26, 0x3285
    4506:	b0 91 86 32 	lds	r27, 0x3286
    450a:	80 93 cc 24 	sts	0x24CC, r24
    450e:	90 93 cd 24 	sts	0x24CD, r25
    4512:	a0 93 ce 24 	sts	0x24CE, r26
    4516:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    451a:	80 91 6e 29 	lds	r24, 0x296E
    451e:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    4522:	00 e0       	ldi	r16, 0x00	; 0
    4524:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4526:	f8 01       	movw	r30, r16
    4528:	e3 52       	subi	r30, 0x23	; 35
    452a:	f7 4d       	sbci	r31, 0xD7	; 215
    452c:	60 81       	ld	r22, Z
    452e:	82 e9       	ldi	r24, 0x92	; 146
    4530:	91 e2       	ldi	r25, 0x21	; 33
    4532:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4536:	88 23       	and	r24, r24
    4538:	11 f0       	breq	.+4      	; 0x453e <__stack+0x53f>
					{
						i++;
    453a:	0f 5f       	subi	r16, 0xFF	; 255
    453c:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    453e:	10 16       	cp	r1, r16
    4540:	11 06       	cpc	r1, r17
    4542:	8c f7       	brge	.-30     	; 0x4526 <__stack+0x527>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4544:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4548:	10 92 3f 2e 	sts	0x2E3F, r1
    454c:	3d c0       	rjmp	.+122    	; 0x45c8 <__stack+0x5c9>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    454e:	80 91 6e 29 	lds	r24, 0x296E
    4552:	88 30       	cpi	r24, 0x08	; 8
    4554:	c9 f5       	brne	.+114    	; 0x45c8 <__stack+0x5c9>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    4556:	80 91 3f 2e 	lds	r24, 0x2E3F
    455a:	83 30       	cpi	r24, 0x03	; 3
    455c:	a8 f1       	brcs	.+106    	; 0x45c8 <__stack+0x5c9>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    455e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    4562:	80 91 6f 29 	lds	r24, 0x296F
    4566:	81 30       	cpi	r24, 0x01	; 1
    4568:	39 f4       	brne	.+14     	; 0x4578 <__stack+0x579>
				{
					stop_PID_levi = 1;
    456a:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    456e:	10 92 7b 2e 	sts	0x2E7B, r1
    4572:	10 92 7c 2e 	sts	0x2E7C, r1
    4576:	02 c0       	rjmp	.+4      	; 0x457c <__stack+0x57d>
				}				
				else
					stop_PID_levi = 0;
    4578:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    457c:	80 91 70 29 	lds	r24, 0x2970
    4580:	81 30       	cpi	r24, 0x01	; 1
    4582:	39 f4       	brne	.+14     	; 0x4592 <__stack+0x593>
				{
					stop_PID_desni = 1;
    4584:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    4588:	10 92 79 2e 	sts	0x2E79, r1
    458c:	10 92 7a 2e 	sts	0x2E7A, r1
    4590:	02 c0       	rjmp	.+4      	; 0x4596 <__stack+0x597>
				}					
				else
					stop_PID_desni = 0;
    4592:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4596:	80 91 6e 29 	lds	r24, 0x296E
    459a:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    459e:	00 e0       	ldi	r16, 0x00	; 0
    45a0:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    45a2:	f8 01       	movw	r30, r16
    45a4:	e3 52       	subi	r30, 0x23	; 35
    45a6:	f7 4d       	sbci	r31, 0xD7	; 215
    45a8:	60 81       	ld	r22, Z
    45aa:	82 e9       	ldi	r24, 0x92	; 146
    45ac:	91 e2       	ldi	r25, 0x21	; 33
    45ae:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    45b2:	88 23       	and	r24, r24
    45b4:	11 f0       	breq	.+4      	; 0x45ba <__stack+0x5bb>
					{
						i++;
    45b6:	0f 5f       	subi	r16, 0xFF	; 255
    45b8:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    45ba:	10 16       	cp	r1, r16
    45bc:	11 06       	cpc	r1, r17
    45be:	8c f7       	brge	.-30     	; 0x45a2 <__stack+0x5a3>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    45c0:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    45c4:	10 92 3f 2e 	sts	0x2E3F, r1
		}
	}
}
    45c8:	24 96       	adiw	r28, 0x04	; 4
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	df 91       	pop	r29
    45d0:	cf 91       	pop	r28
    45d2:	ff 91       	pop	r31
    45d4:	ef 91       	pop	r30
    45d6:	bf 91       	pop	r27
    45d8:	af 91       	pop	r26
    45da:	9f 91       	pop	r25
    45dc:	8f 91       	pop	r24
    45de:	7f 91       	pop	r23
    45e0:	6f 91       	pop	r22
    45e2:	5f 91       	pop	r21
    45e4:	4f 91       	pop	r20
    45e6:	3f 91       	pop	r19
    45e8:	2f 91       	pop	r18
    45ea:	1f 91       	pop	r17
    45ec:	0f 91       	pop	r16
    45ee:	ff 90       	pop	r15
    45f0:	ef 90       	pop	r14
    45f2:	df 90       	pop	r13
    45f4:	cf 90       	pop	r12
    45f6:	bf 90       	pop	r11
    45f8:	af 90       	pop	r10
    45fa:	9f 90       	pop	r9
    45fc:	8f 90       	pop	r8
    45fe:	7f 90       	pop	r7
    4600:	6f 90       	pop	r6
    4602:	5f 90       	pop	r5
    4604:	4f 90       	pop	r4
    4606:	0f 90       	pop	r0
    4608:	0b be       	out	0x3b, r0	; 59
    460a:	0f 90       	pop	r0
    460c:	0a be       	out	0x3a, r0	; 58
    460e:	0f 90       	pop	r0
    4610:	09 be       	out	0x39, r0	; 57
    4612:	0f 90       	pop	r0
    4614:	08 be       	out	0x38, r0	; 56
    4616:	0f 90       	pop	r0
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	0f 90       	pop	r0
    461c:	1f 90       	pop	r1
    461e:	18 95       	reti

00004620 <__vector_77>:

//DESNI PASIVNi QDEC
ISR(TCD0_OVF_vect)
{
    4620:	1f 92       	push	r1
    4622:	0f 92       	push	r0
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	0f 92       	push	r0
    4628:	11 24       	eor	r1, r1
    462a:	08 b6       	in	r0, 0x38	; 56
    462c:	0f 92       	push	r0
    462e:	18 be       	out	0x38, r1	; 56
    4630:	0b b6       	in	r0, 0x3b	; 59
    4632:	0f 92       	push	r0
    4634:	1b be       	out	0x3b, r1	; 59
    4636:	8f 93       	push	r24
    4638:	ef 93       	push	r30
    463a:	ff 93       	push	r31
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 0)
    463c:	e0 e0       	ldi	r30, 0x00	; 0
    463e:	f9 e0       	ldi	r31, 0x09	; 9
    4640:	81 85       	ldd	r24, Z+9	; 0x09
    4642:	80 fd       	sbrc	r24, 0
    4644:	03 c0       	rjmp	.+6      	; 0x464c <__vector_77+0x2c>
		PASIVNI_QDEC_OWF_R = 1;
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	80 93 f7 2d 	sts	0x2DF7, r24
	
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 1)
    464c:	e0 e0       	ldi	r30, 0x00	; 0
    464e:	f9 e0       	ldi	r31, 0x09	; 9
    4650:	81 85       	ldd	r24, Z+9	; 0x09
    4652:	80 ff       	sbrs	r24, 0
    4654:	03 c0       	rjmp	.+6      	; 0x465c <__vector_77+0x3c>
		PASIVNI_QDEC_OWF_R = 2;
    4656:	82 e0       	ldi	r24, 0x02	; 2
    4658:	80 93 f7 2d 	sts	0x2DF7, r24
}
    465c:	ff 91       	pop	r31
    465e:	ef 91       	pop	r30
    4660:	8f 91       	pop	r24
    4662:	0f 90       	pop	r0
    4664:	0b be       	out	0x3b, r0	; 59
    4666:	0f 90       	pop	r0
    4668:	08 be       	out	0x38, r0	; 56
    466a:	0f 90       	pop	r0
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	0f 90       	pop	r0
    4670:	1f 90       	pop	r1
    4672:	18 95       	reti

00004674 <__vector_83>:
//LEVI PASIVNI QDEC
ISR(TCD1_OVF_vect)
{
    4674:	1f 92       	push	r1
    4676:	0f 92       	push	r0
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
    467e:	08 b6       	in	r0, 0x38	; 56
    4680:	0f 92       	push	r0
    4682:	18 be       	out	0x38, r1	; 56
    4684:	0b b6       	in	r0, 0x3b	; 59
    4686:	0f 92       	push	r0
    4688:	1b be       	out	0x3b, r1	; 59
    468a:	8f 93       	push	r24
    468c:	ef 93       	push	r30
    468e:	ff 93       	push	r31
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 0)
    4690:	e0 e4       	ldi	r30, 0x40	; 64
    4692:	f9 e0       	ldi	r31, 0x09	; 9
    4694:	81 85       	ldd	r24, Z+9	; 0x09
    4696:	80 fd       	sbrc	r24, 0
    4698:	03 c0       	rjmp	.+6      	; 0x46a0 <__vector_83+0x2c>
		PASIVNI_QDEC_OWF_L = 1;
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	80 93 22 2e 	sts	0x2E22, r24
	
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 1)
    46a0:	e0 e4       	ldi	r30, 0x40	; 64
    46a2:	f9 e0       	ldi	r31, 0x09	; 9
    46a4:	81 85       	ldd	r24, Z+9	; 0x09
    46a6:	80 ff       	sbrs	r24, 0
    46a8:	03 c0       	rjmp	.+6      	; 0x46b0 <__vector_83+0x3c>
		PASIVNI_QDEC_OWF_L = 2;
    46aa:	82 e0       	ldi	r24, 0x02	; 2
    46ac:	80 93 22 2e 	sts	0x2E22, r24
}
    46b0:	ff 91       	pop	r31
    46b2:	ef 91       	pop	r30
    46b4:	8f 91       	pop	r24
    46b6:	0f 90       	pop	r0
    46b8:	0b be       	out	0x3b, r0	; 59
    46ba:	0f 90       	pop	r0
    46bc:	08 be       	out	0x38, r0	; 56
    46be:	0f 90       	pop	r0
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	0f 90       	pop	r0
    46c4:	1f 90       	pop	r1
    46c6:	18 95       	reti

000046c8 <__vector_59>:
	//return;
//}


ISR(USARTE0_DRE_vect)
{
    46c8:	1f 92       	push	r1
    46ca:	0f 92       	push	r0
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	0f 92       	push	r0
    46d0:	11 24       	eor	r1, r1
    46d2:	08 b6       	in	r0, 0x38	; 56
    46d4:	0f 92       	push	r0
    46d6:	18 be       	out	0x38, r1	; 56
    46d8:	09 b6       	in	r0, 0x39	; 57
    46da:	0f 92       	push	r0
    46dc:	19 be       	out	0x39, r1	; 57
    46de:	0b b6       	in	r0, 0x3b	; 59
    46e0:	0f 92       	push	r0
    46e2:	1b be       	out	0x3b, r1	; 59
    46e4:	2f 93       	push	r18
    46e6:	3f 93       	push	r19
    46e8:	4f 93       	push	r20
    46ea:	5f 93       	push	r21
    46ec:	6f 93       	push	r22
    46ee:	7f 93       	push	r23
    46f0:	8f 93       	push	r24
    46f2:	9f 93       	push	r25
    46f4:	af 93       	push	r26
    46f6:	bf 93       	push	r27
    46f8:	ef 93       	push	r30
    46fa:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E0_data);
    46fc:	89 e1       	ldi	r24, 0x19	; 25
    46fe:	93 e2       	ldi	r25, 0x23	; 35
    4700:	0e 94 81 34 	call	0x6902	; 0x6902 <USART_DataRegEmpty>
}
    4704:	ff 91       	pop	r31
    4706:	ef 91       	pop	r30
    4708:	bf 91       	pop	r27
    470a:	af 91       	pop	r26
    470c:	9f 91       	pop	r25
    470e:	8f 91       	pop	r24
    4710:	7f 91       	pop	r23
    4712:	6f 91       	pop	r22
    4714:	5f 91       	pop	r21
    4716:	4f 91       	pop	r20
    4718:	3f 91       	pop	r19
    471a:	2f 91       	pop	r18
    471c:	0f 90       	pop	r0
    471e:	0b be       	out	0x3b, r0	; 59
    4720:	0f 90       	pop	r0
    4722:	09 be       	out	0x39, r0	; 57
    4724:	0f 90       	pop	r0
    4726:	08 be       	out	0x38, r0	; 56
    4728:	0f 90       	pop	r0
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	0f 90       	pop	r0
    472e:	1f 90       	pop	r1
    4730:	18 95       	reti

00004732 <__vector_62>:
ISR(USARTE1_DRE_vect)
{
    4732:	1f 92       	push	r1
    4734:	0f 92       	push	r0
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	0f 92       	push	r0
    473a:	11 24       	eor	r1, r1
    473c:	08 b6       	in	r0, 0x38	; 56
    473e:	0f 92       	push	r0
    4740:	18 be       	out	0x38, r1	; 56
    4742:	09 b6       	in	r0, 0x39	; 57
    4744:	0f 92       	push	r0
    4746:	19 be       	out	0x39, r1	; 57
    4748:	0b b6       	in	r0, 0x3b	; 59
    474a:	0f 92       	push	r0
    474c:	1b be       	out	0x3b, r1	; 59
    474e:	2f 93       	push	r18
    4750:	3f 93       	push	r19
    4752:	4f 93       	push	r20
    4754:	5f 93       	push	r21
    4756:	6f 93       	push	r22
    4758:	7f 93       	push	r23
    475a:	8f 93       	push	r24
    475c:	9f 93       	push	r25
    475e:	af 93       	push	r26
    4760:	bf 93       	push	r27
    4762:	ef 93       	push	r30
    4764:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E1_data);
    4766:	8b e0       	ldi	r24, 0x0B	; 11
    4768:	90 e2       	ldi	r25, 0x20	; 32
    476a:	0e 94 81 34 	call	0x6902	; 0x6902 <USART_DataRegEmpty>
}
    476e:	ff 91       	pop	r31
    4770:	ef 91       	pop	r30
    4772:	bf 91       	pop	r27
    4774:	af 91       	pop	r26
    4776:	9f 91       	pop	r25
    4778:	8f 91       	pop	r24
    477a:	7f 91       	pop	r23
    477c:	6f 91       	pop	r22
    477e:	5f 91       	pop	r21
    4780:	4f 91       	pop	r20
    4782:	3f 91       	pop	r19
    4784:	2f 91       	pop	r18
    4786:	0f 90       	pop	r0
    4788:	0b be       	out	0x3b, r0	; 59
    478a:	0f 90       	pop	r0
    478c:	09 be       	out	0x39, r0	; 57
    478e:	0f 90       	pop	r0
    4790:	08 be       	out	0x38, r0	; 56
    4792:	0f 90       	pop	r0
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	0f 90       	pop	r0
    4798:	1f 90       	pop	r1
    479a:	18 95       	reti

0000479c <__vector_26>:
ISR(USARTC0_DRE_vect)
{
    479c:	1f 92       	push	r1
    479e:	0f 92       	push	r0
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	0f 92       	push	r0
    47a4:	11 24       	eor	r1, r1
    47a6:	08 b6       	in	r0, 0x38	; 56
    47a8:	0f 92       	push	r0
    47aa:	18 be       	out	0x38, r1	; 56
    47ac:	09 b6       	in	r0, 0x39	; 57
    47ae:	0f 92       	push	r0
    47b0:	19 be       	out	0x39, r1	; 57
    47b2:	0b b6       	in	r0, 0x3b	; 59
    47b4:	0f 92       	push	r0
    47b6:	1b be       	out	0x3b, r1	; 59
    47b8:	2f 93       	push	r18
    47ba:	3f 93       	push	r19
    47bc:	4f 93       	push	r20
    47be:	5f 93       	push	r21
    47c0:	6f 93       	push	r22
    47c2:	7f 93       	push	r23
    47c4:	8f 93       	push	r24
    47c6:	9f 93       	push	r25
    47c8:	af 93       	push	r26
    47ca:	bf 93       	push	r27
    47cc:	ef 93       	push	r30
    47ce:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_C0_data);
    47d0:	82 e9       	ldi	r24, 0x92	; 146
    47d2:	91 e2       	ldi	r25, 0x21	; 33
    47d4:	0e 94 81 34 	call	0x6902	; 0x6902 <USART_DataRegEmpty>
}
    47d8:	ff 91       	pop	r31
    47da:	ef 91       	pop	r30
    47dc:	bf 91       	pop	r27
    47de:	af 91       	pop	r26
    47e0:	9f 91       	pop	r25
    47e2:	8f 91       	pop	r24
    47e4:	7f 91       	pop	r23
    47e6:	6f 91       	pop	r22
    47e8:	5f 91       	pop	r21
    47ea:	4f 91       	pop	r20
    47ec:	3f 91       	pop	r19
    47ee:	2f 91       	pop	r18
    47f0:	0f 90       	pop	r0
    47f2:	0b be       	out	0x3b, r0	; 59
    47f4:	0f 90       	pop	r0
    47f6:	09 be       	out	0x39, r0	; 57
    47f8:	0f 90       	pop	r0
    47fa:	08 be       	out	0x38, r0	; 56
    47fc:	0f 90       	pop	r0
    47fe:	0f be       	out	0x3f, r0	; 63
    4800:	0f 90       	pop	r0
    4802:	1f 90       	pop	r1
    4804:	18 95       	reti

00004806 <__vector_34>:

//Interrupt na taster
ISR(PORTB_INT0_vect)
{
    4806:	1f 92       	push	r1
    4808:	0f 92       	push	r0
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	0f 92       	push	r0
    480e:	11 24       	eor	r1, r1
    4810:	08 b6       	in	r0, 0x38	; 56
    4812:	0f 92       	push	r0
    4814:	18 be       	out	0x38, r1	; 56
    4816:	09 b6       	in	r0, 0x39	; 57
    4818:	0f 92       	push	r0
    481a:	19 be       	out	0x39, r1	; 57
    481c:	0b b6       	in	r0, 0x3b	; 59
    481e:	0f 92       	push	r0
    4820:	1b be       	out	0x3b, r1	; 59
    4822:	2f 93       	push	r18
    4824:	3f 93       	push	r19
    4826:	4f 93       	push	r20
    4828:	5f 93       	push	r21
    482a:	6f 93       	push	r22
    482c:	7f 93       	push	r23
    482e:	8f 93       	push	r24
    4830:	9f 93       	push	r25
    4832:	af 93       	push	r26
    4834:	bf 93       	push	r27
    4836:	ef 93       	push	r30
    4838:	ff 93       	push	r31
	PORT_TogglePins(&PORTC, 0xFF);
    483a:	8f ef       	ldi	r24, 0xFF	; 255
    483c:	e0 e4       	ldi	r30, 0x40	; 64
    483e:	f6 e0       	ldi	r31, 0x06	; 6
    4840:	87 83       	std	Z+7, r24	; 0x07
	//PORT_TogglePins(&PORTF, 0x08);
	//USART_TXBuffer_PutByte(&USART_C0_data, 43);	//+
	
	broj = motor_sample_L16; //ispis zeljene promenljive
    4842:	80 91 4a 2e 	lds	r24, 0x2E4A
    4846:	90 91 4b 2e 	lds	r25, 0x2E4B
    484a:	80 93 08 2e 	sts	0x2E08, r24
    484e:	90 93 09 2e 	sts	0x2E09, r25
	
	if(broj	> 0)	
    4852:	80 91 08 2e 	lds	r24, 0x2E08
    4856:	90 91 09 2e 	lds	r25, 0x2E09
    485a:	18 16       	cp	r1, r24
    485c:	19 06       	cpc	r1, r25
    485e:	34 f4       	brge	.+12     	; 0x486c <__vector_34+0x66>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4860:	6b e2       	ldi	r22, 0x2B	; 43
    4862:	8b e0       	ldi	r24, 0x0B	; 11
    4864:	90 e2       	ldi	r25, 0x20	; 32
    4866:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
    486a:	11 c0       	rjmp	.+34     	; 0x488e <__vector_34+0x88>
	else if(broj < 0)	
    486c:	80 91 08 2e 	lds	r24, 0x2E08
    4870:	90 91 09 2e 	lds	r25, 0x2E09
    4874:	99 23       	and	r25, r25
    4876:	34 f4       	brge	.+12     	; 0x4884 <__vector_34+0x7e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4878:	6d e2       	ldi	r22, 0x2D	; 45
    487a:	8b e0       	ldi	r24, 0x0B	; 11
    487c:	90 e2       	ldi	r25, 0x20	; 32
    487e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
    4882:	05 c0       	rjmp	.+10     	; 0x488e <__vector_34+0x88>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    4884:	60 e2       	ldi	r22, 0x20	; 32
    4886:	8b e0       	ldi	r24, 0x0B	; 11
    4888:	90 e2       	ldi	r25, 0x20	; 32
    488a:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviziramo broj
    488e:	80 91 08 2e 	lds	r24, 0x2E08
    4892:	90 91 09 2e 	lds	r25, 0x2E09
    4896:	99 23       	and	r25, r25
    4898:	5c f4       	brge	.+22     	; 0x48b0 <__vector_34+0xaa>
		broj = broj * (-1);	
    489a:	80 91 08 2e 	lds	r24, 0x2E08
    489e:	90 91 09 2e 	lds	r25, 0x2E09
    48a2:	91 95       	neg	r25
    48a4:	81 95       	neg	r24
    48a6:	91 09       	sbc	r25, r1
    48a8:	80 93 08 2e 	sts	0x2E08, r24
    48ac:	90 93 09 2e 	sts	0x2E09, r25
	broj1 = broj % 10 | 0x30;	
    48b0:	80 91 08 2e 	lds	r24, 0x2E08
    48b4:	90 91 09 2e 	lds	r25, 0x2E09
    48b8:	2a e0       	ldi	r18, 0x0A	; 10
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	b9 01       	movw	r22, r18
    48be:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    48c2:	80 63       	ori	r24, 0x30	; 48
    48c4:	80 93 44 2e 	sts	0x2E44, r24
    48c8:	90 93 45 2e 	sts	0x2E45, r25
	broj = broj / 10;
    48cc:	80 91 08 2e 	lds	r24, 0x2E08
    48d0:	90 91 09 2e 	lds	r25, 0x2E09
    48d4:	b9 01       	movw	r22, r18
    48d6:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    48da:	60 93 08 2e 	sts	0x2E08, r22
    48de:	70 93 09 2e 	sts	0x2E09, r23
	broj10 = broj % 10 | 0x30;
    48e2:	80 91 08 2e 	lds	r24, 0x2E08
    48e6:	90 91 09 2e 	lds	r25, 0x2E09
    48ea:	b9 01       	movw	r22, r18
    48ec:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    48f0:	80 63       	ori	r24, 0x30	; 48
    48f2:	80 93 73 32 	sts	0x3273, r24
    48f6:	90 93 74 32 	sts	0x3274, r25
	broj = broj / 10;
    48fa:	80 91 08 2e 	lds	r24, 0x2E08
    48fe:	90 91 09 2e 	lds	r25, 0x2E09
    4902:	b9 01       	movw	r22, r18
    4904:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4908:	60 93 08 2e 	sts	0x2E08, r22
    490c:	70 93 09 2e 	sts	0x2E09, r23
	broj100 = broj % 10 | 0x30;
    4910:	80 91 08 2e 	lds	r24, 0x2E08
    4914:	90 91 09 2e 	lds	r25, 0x2E09
    4918:	b9 01       	movw	r22, r18
    491a:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    491e:	80 63       	ori	r24, 0x30	; 48
    4920:	80 93 37 2e 	sts	0x2E37, r24
    4924:	90 93 38 2e 	sts	0x2E38, r25
	broj = broj / 10;
    4928:	80 91 08 2e 	lds	r24, 0x2E08
    492c:	90 91 09 2e 	lds	r25, 0x2E09
    4930:	b9 01       	movw	r22, r18
    4932:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4936:	60 93 08 2e 	sts	0x2E08, r22
    493a:	70 93 09 2e 	sts	0x2E09, r23
	broj1000 = broj % 10 | 0x30;
    493e:	80 91 08 2e 	lds	r24, 0x2E08
    4942:	90 91 09 2e 	lds	r25, 0x2E09
    4946:	b9 01       	movw	r22, r18
    4948:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    494c:	80 63       	ori	r24, 0x30	; 48
    494e:	80 93 d7 28 	sts	0x28D7, r24
    4952:	90 93 d8 28 	sts	0x28D8, r25
	broj = broj / 10;
    4956:	80 91 08 2e 	lds	r24, 0x2E08
    495a:	90 91 09 2e 	lds	r25, 0x2E09
    495e:	b9 01       	movw	r22, r18
    4960:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4964:	60 93 08 2e 	sts	0x2E08, r22
    4968:	70 93 09 2e 	sts	0x2E09, r23
	broj10000 = broj % 10 | 0x30;
    496c:	80 91 08 2e 	lds	r24, 0x2E08
    4970:	90 91 09 2e 	lds	r25, 0x2E09
    4974:	b9 01       	movw	r22, r18
    4976:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    497a:	80 63       	ori	r24, 0x30	; 48
    497c:	80 93 c3 28 	sts	0x28C3, r24
    4980:	90 93 c4 28 	sts	0x28C4, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4984:	60 91 c3 28 	lds	r22, 0x28C3
    4988:	70 91 c4 28 	lds	r23, 0x28C4
    498c:	8b e0       	ldi	r24, 0x0B	; 11
    498e:	90 e2       	ldi	r25, 0x20	; 32
    4990:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4994:	60 91 d7 28 	lds	r22, 0x28D7
    4998:	70 91 d8 28 	lds	r23, 0x28D8
    499c:	8b e0       	ldi	r24, 0x0B	; 11
    499e:	90 e2       	ldi	r25, 0x20	; 32
    49a0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    49a4:	60 91 37 2e 	lds	r22, 0x2E37
    49a8:	70 91 38 2e 	lds	r23, 0x2E38
    49ac:	8b e0       	ldi	r24, 0x0B	; 11
    49ae:	90 e2       	ldi	r25, 0x20	; 32
    49b0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    49b4:	60 91 73 32 	lds	r22, 0x3273
    49b8:	70 91 74 32 	lds	r23, 0x3274
    49bc:	8b e0       	ldi	r24, 0x0B	; 11
    49be:	90 e2       	ldi	r25, 0x20	; 32
    49c0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    49c4:	60 91 44 2e 	lds	r22, 0x2E44
    49c8:	70 91 45 2e 	lds	r23, 0x2E45
    49cc:	8b e0       	ldi	r24, 0x0B	; 11
    49ce:	90 e2       	ldi	r25, 0x20	; 32
    49d0:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49d4:	60 e2       	ldi	r22, 0x20	; 32
    49d6:	8b e0       	ldi	r24, 0x0B	; 11
    49d8:	90 e2       	ldi	r25, 0x20	; 32
    49da:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 0x3A);	//:
    49de:	6a e3       	ldi	r22, 0x3A	; 58
    49e0:	8b e0       	ldi	r24, 0x0B	; 11
    49e2:	90 e2       	ldi	r25, 0x20	; 32
    49e4:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49e8:	60 e2       	ldi	r22, 0x20	; 32
    49ea:	8b e0       	ldi	r24, 0x0B	; 11
    49ec:	90 e2       	ldi	r25, 0x20	; 32
    49ee:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	
	
	broj = motor_sample_R16;	//ispis zeljene promenljive
    49f2:	80 91 63 2e 	lds	r24, 0x2E63
    49f6:	90 91 64 2e 	lds	r25, 0x2E64
    49fa:	80 93 08 2e 	sts	0x2E08, r24
    49fe:	90 93 09 2e 	sts	0x2E09, r25
	
	if(broj	> 0)	
    4a02:	80 91 08 2e 	lds	r24, 0x2E08
    4a06:	90 91 09 2e 	lds	r25, 0x2E09
    4a0a:	18 16       	cp	r1, r24
    4a0c:	19 06       	cpc	r1, r25
    4a0e:	34 f4       	brge	.+12     	; 0x4a1c <__vector_34+0x216>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4a10:	6b e2       	ldi	r22, 0x2B	; 43
    4a12:	8b e0       	ldi	r24, 0x0B	; 11
    4a14:	90 e2       	ldi	r25, 0x20	; 32
    4a16:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
    4a1a:	11 c0       	rjmp	.+34     	; 0x4a3e <__vector_34+0x238>
	else if(broj < 0)	
    4a1c:	80 91 08 2e 	lds	r24, 0x2E08
    4a20:	90 91 09 2e 	lds	r25, 0x2E09
    4a24:	99 23       	and	r25, r25
    4a26:	34 f4       	brge	.+12     	; 0x4a34 <__vector_34+0x22e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4a28:	6d e2       	ldi	r22, 0x2D	; 45
    4a2a:	8b e0       	ldi	r24, 0x0B	; 11
    4a2c:	90 e2       	ldi	r25, 0x20	; 32
    4a2e:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
    4a32:	05 c0       	rjmp	.+10     	; 0x4a3e <__vector_34+0x238>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space	
    4a34:	60 e2       	ldi	r22, 0x20	; 32
    4a36:	8b e0       	ldi	r24, 0x0B	; 11
    4a38:	90 e2       	ldi	r25, 0x20	; 32
    4a3a:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviramo broj
    4a3e:	80 91 08 2e 	lds	r24, 0x2E08
    4a42:	90 91 09 2e 	lds	r25, 0x2E09
    4a46:	99 23       	and	r25, r25
    4a48:	5c f4       	brge	.+22     	; 0x4a60 <__vector_34+0x25a>
		broj = broj * (-1);
    4a4a:	80 91 08 2e 	lds	r24, 0x2E08
    4a4e:	90 91 09 2e 	lds	r25, 0x2E09
    4a52:	91 95       	neg	r25
    4a54:	81 95       	neg	r24
    4a56:	91 09       	sbc	r25, r1
    4a58:	80 93 08 2e 	sts	0x2E08, r24
    4a5c:	90 93 09 2e 	sts	0x2E09, r25
	broj1 = broj % 10 | 0x30;	
    4a60:	80 91 08 2e 	lds	r24, 0x2E08
    4a64:	90 91 09 2e 	lds	r25, 0x2E09
    4a68:	2a e0       	ldi	r18, 0x0A	; 10
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	b9 01       	movw	r22, r18
    4a6e:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4a72:	80 63       	ori	r24, 0x30	; 48
    4a74:	80 93 44 2e 	sts	0x2E44, r24
    4a78:	90 93 45 2e 	sts	0x2E45, r25
	broj = broj / 10;
    4a7c:	80 91 08 2e 	lds	r24, 0x2E08
    4a80:	90 91 09 2e 	lds	r25, 0x2E09
    4a84:	b9 01       	movw	r22, r18
    4a86:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4a8a:	60 93 08 2e 	sts	0x2E08, r22
    4a8e:	70 93 09 2e 	sts	0x2E09, r23
	broj10 = broj % 10 | 0x30;
    4a92:	80 91 08 2e 	lds	r24, 0x2E08
    4a96:	90 91 09 2e 	lds	r25, 0x2E09
    4a9a:	b9 01       	movw	r22, r18
    4a9c:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4aa0:	80 63       	ori	r24, 0x30	; 48
    4aa2:	80 93 73 32 	sts	0x3273, r24
    4aa6:	90 93 74 32 	sts	0x3274, r25
	broj = broj / 10;	
    4aaa:	80 91 08 2e 	lds	r24, 0x2E08
    4aae:	90 91 09 2e 	lds	r25, 0x2E09
    4ab2:	b9 01       	movw	r22, r18
    4ab4:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4ab8:	60 93 08 2e 	sts	0x2E08, r22
    4abc:	70 93 09 2e 	sts	0x2E09, r23
	broj100 = broj % 10 | 0x30;
    4ac0:	80 91 08 2e 	lds	r24, 0x2E08
    4ac4:	90 91 09 2e 	lds	r25, 0x2E09
    4ac8:	b9 01       	movw	r22, r18
    4aca:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4ace:	80 63       	ori	r24, 0x30	; 48
    4ad0:	80 93 37 2e 	sts	0x2E37, r24
    4ad4:	90 93 38 2e 	sts	0x2E38, r25
	broj = broj / 10;
    4ad8:	80 91 08 2e 	lds	r24, 0x2E08
    4adc:	90 91 09 2e 	lds	r25, 0x2E09
    4ae0:	b9 01       	movw	r22, r18
    4ae2:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4ae6:	60 93 08 2e 	sts	0x2E08, r22
    4aea:	70 93 09 2e 	sts	0x2E09, r23
	broj1000 = broj % 10 | 0x30;
    4aee:	80 91 08 2e 	lds	r24, 0x2E08
    4af2:	90 91 09 2e 	lds	r25, 0x2E09
    4af6:	b9 01       	movw	r22, r18
    4af8:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4afc:	80 63       	ori	r24, 0x30	; 48
    4afe:	80 93 d7 28 	sts	0x28D7, r24
    4b02:	90 93 d8 28 	sts	0x28D8, r25
	broj = broj / 10;
    4b06:	80 91 08 2e 	lds	r24, 0x2E08
    4b0a:	90 91 09 2e 	lds	r25, 0x2E09
    4b0e:	b9 01       	movw	r22, r18
    4b10:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4b14:	60 93 08 2e 	sts	0x2E08, r22
    4b18:	70 93 09 2e 	sts	0x2E09, r23
	broj10000 = broj % 10 | 0x30;
    4b1c:	80 91 08 2e 	lds	r24, 0x2E08
    4b20:	90 91 09 2e 	lds	r25, 0x2E09
    4b24:	b9 01       	movw	r22, r18
    4b26:	0e 94 47 38 	call	0x708e	; 0x708e <__divmodhi4>
    4b2a:	80 63       	ori	r24, 0x30	; 48
    4b2c:	80 93 c3 28 	sts	0x28C3, r24
    4b30:	90 93 c4 28 	sts	0x28C4, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4b34:	60 91 c3 28 	lds	r22, 0x28C3
    4b38:	70 91 c4 28 	lds	r23, 0x28C4
    4b3c:	8b e0       	ldi	r24, 0x0B	; 11
    4b3e:	90 e2       	ldi	r25, 0x20	; 32
    4b40:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4b44:	60 91 d7 28 	lds	r22, 0x28D7
    4b48:	70 91 d8 28 	lds	r23, 0x28D8
    4b4c:	8b e0       	ldi	r24, 0x0B	; 11
    4b4e:	90 e2       	ldi	r25, 0x20	; 32
    4b50:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    4b54:	60 91 37 2e 	lds	r22, 0x2E37
    4b58:	70 91 38 2e 	lds	r23, 0x2E38
    4b5c:	8b e0       	ldi	r24, 0x0B	; 11
    4b5e:	90 e2       	ldi	r25, 0x20	; 32
    4b60:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    4b64:	60 91 73 32 	lds	r22, 0x3273
    4b68:	70 91 74 32 	lds	r23, 0x3274
    4b6c:	8b e0       	ldi	r24, 0x0B	; 11
    4b6e:	90 e2       	ldi	r25, 0x20	; 32
    4b70:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    4b74:	60 91 44 2e 	lds	r22, 0x2E44
    4b78:	70 91 45 2e 	lds	r23, 0x2E45
    4b7c:	8b e0       	ldi	r24, 0x0B	; 11
    4b7e:	90 e2       	ldi	r25, 0x20	; 32
    4b80:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 13);	//CR
    4b84:	6d e0       	ldi	r22, 0x0D	; 13
    4b86:	8b e0       	ldi	r24, 0x0B	; 11
    4b88:	90 e2       	ldi	r25, 0x20	; 32
    4b8a:	0e 94 36 34 	call	0x686c	; 0x686c <USART_TXBuffer_PutByte>
}
    4b8e:	ff 91       	pop	r31
    4b90:	ef 91       	pop	r30
    4b92:	bf 91       	pop	r27
    4b94:	af 91       	pop	r26
    4b96:	9f 91       	pop	r25
    4b98:	8f 91       	pop	r24
    4b9a:	7f 91       	pop	r23
    4b9c:	6f 91       	pop	r22
    4b9e:	5f 91       	pop	r21
    4ba0:	4f 91       	pop	r20
    4ba2:	3f 91       	pop	r19
    4ba4:	2f 91       	pop	r18
    4ba6:	0f 90       	pop	r0
    4ba8:	0b be       	out	0x3b, r0	; 59
    4baa:	0f 90       	pop	r0
    4bac:	09 be       	out	0x39, r0	; 57
    4bae:	0f 90       	pop	r0
    4bb0:	08 be       	out	0x38, r0	; 56
    4bb2:	0f 90       	pop	r0
    4bb4:	0f be       	out	0x3f, r0	; 63
    4bb6:	0f 90       	pop	r0
    4bb8:	1f 90       	pop	r1
    4bba:	18 95       	reti

00004bbc <Racunanje_trenutne_pozicije>:
krug180,
krug360;


void Racunanje_trenutne_pozicije(void)
{
    4bbc:	4f 92       	push	r4
    4bbe:	5f 92       	push	r5
    4bc0:	6f 92       	push	r6
    4bc2:	7f 92       	push	r7
    4bc4:	8f 92       	push	r8
    4bc6:	9f 92       	push	r9
    4bc8:	af 92       	push	r10
    4bca:	bf 92       	push	r11
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
	//uzimanje stanja enkodera
	count_L = TCD1.CNT;
    4bd4:	e0 e4       	ldi	r30, 0x40	; 64
    4bd6:	f9 e0       	ldi	r31, 0x09	; 9
    4bd8:	80 a1       	ldd	r24, Z+32	; 0x20
    4bda:	91 a1       	ldd	r25, Z+33	; 0x21
    4bdc:	80 93 7d 32 	sts	0x327D, r24
    4be0:	90 93 7e 32 	sts	0x327E, r25
	count_R = TCD0.CNT;
    4be4:	e0 e0       	ldi	r30, 0x00	; 0
    4be6:	f9 e0       	ldi	r31, 0x09	; 9
    4be8:	80 a1       	ldd	r24, Z+32	; 0x20
    4bea:	91 a1       	ldd	r25, Z+33	; 0x21
    4bec:	a0 e0       	ldi	r26, 0x00	; 0
    4bee:	b0 e0       	ldi	r27, 0x00	; 0
    4bf0:	80 93 1e 2e 	sts	0x2E1E, r24
    4bf4:	90 93 1f 2e 	sts	0x2E1F, r25
    4bf8:	a0 93 20 2e 	sts	0x2E20, r26
    4bfc:	b0 93 21 2e 	sts	0x2E21, r27
	
	//desni enkoder
	if(PASIVNI_QDEC_OWF_R == 0)
    4c00:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c04:	81 11       	cpse	r24, r1
    4c06:	17 c0       	rjmp	.+46     	; 0x4c36 <Racunanje_trenutne_pozicije+0x7a>
	{
		sample_R16 = (count_R - last_count_R);
    4c08:	40 91 1e 2e 	lds	r20, 0x2E1E
    4c0c:	50 91 1f 2e 	lds	r21, 0x2E1F
    4c10:	60 91 20 2e 	lds	r22, 0x2E20
    4c14:	70 91 21 2e 	lds	r23, 0x2E21
    4c18:	80 91 ee 29 	lds	r24, 0x29EE
    4c1c:	90 91 ef 29 	lds	r25, 0x29EF
    4c20:	a0 91 f0 29 	lds	r26, 0x29F0
    4c24:	b0 91 f1 29 	lds	r27, 0x29F1
    4c28:	48 1b       	sub	r20, r24
    4c2a:	59 0b       	sbc	r21, r25
    4c2c:	40 93 c0 24 	sts	0x24C0, r20
    4c30:	50 93 c1 24 	sts	0x24C1, r21
    4c34:	3b c0       	rjmp	.+118    	; 0x4cac <Racunanje_trenutne_pozicije+0xf0>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_R == 1)
    4c36:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c3a:	81 30       	cpi	r24, 0x01	; 1
    4c3c:	c9 f4       	brne	.+50     	; 0x4c70 <Racunanje_trenutne_pozicije+0xb4>
		{
			sample_R16 = count_R + ~(last_count_R);
    4c3e:	40 91 ee 29 	lds	r20, 0x29EE
    4c42:	50 91 ef 29 	lds	r21, 0x29EF
    4c46:	60 91 f0 29 	lds	r22, 0x29F0
    4c4a:	70 91 f1 29 	lds	r23, 0x29F1
    4c4e:	80 91 1e 2e 	lds	r24, 0x2E1E
    4c52:	90 91 1f 2e 	lds	r25, 0x2E1F
    4c56:	a0 91 20 2e 	lds	r26, 0x2E20
    4c5a:	b0 91 21 2e 	lds	r27, 0x2E21
    4c5e:	40 95       	com	r20
    4c60:	50 95       	com	r21
    4c62:	84 0f       	add	r24, r20
    4c64:	95 1f       	adc	r25, r21
    4c66:	80 93 c0 24 	sts	0x24C0, r24
    4c6a:	90 93 c1 24 	sts	0x24C1, r25
    4c6e:	1c c0       	rjmp	.+56     	; 0x4ca8 <Racunanje_trenutne_pozicije+0xec>
		}
		else if(PASIVNI_QDEC_OWF_R == 2)
    4c70:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c74:	82 30       	cpi	r24, 0x02	; 2
    4c76:	c1 f4       	brne	.+48     	; 0x4ca8 <Racunanje_trenutne_pozicije+0xec>
		{
			sample_R16 = -(last_count_R + ~(count_R));
    4c78:	40 91 1e 2e 	lds	r20, 0x2E1E
    4c7c:	50 91 1f 2e 	lds	r21, 0x2E1F
    4c80:	60 91 20 2e 	lds	r22, 0x2E20
    4c84:	70 91 21 2e 	lds	r23, 0x2E21
    4c88:	80 91 ee 29 	lds	r24, 0x29EE
    4c8c:	90 91 ef 29 	lds	r25, 0x29EF
    4c90:	a0 91 f0 29 	lds	r26, 0x29F0
    4c94:	b0 91 f1 29 	lds	r27, 0x29F1
    4c98:	4f 5f       	subi	r20, 0xFF	; 255
    4c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c9c:	48 1b       	sub	r20, r24
    4c9e:	59 0b       	sbc	r21, r25
    4ca0:	40 93 c0 24 	sts	0x24C0, r20
    4ca4:	50 93 c1 24 	sts	0x24C1, r21
		}
		
		PASIVNI_QDEC_OWF_R = 0;
    4ca8:	10 92 f7 2d 	sts	0x2DF7, r1
	}
	
	//levi enkoder
	if(PASIVNI_QDEC_OWF_L == 0)
    4cac:	80 91 22 2e 	lds	r24, 0x2E22
    4cb0:	81 11       	cpse	r24, r1
    4cb2:	0f c0       	rjmp	.+30     	; 0x4cd2 <Racunanje_trenutne_pozicije+0x116>
	{
		sample_L16 = (count_L - last_count_L);
    4cb4:	80 91 7d 32 	lds	r24, 0x327D
    4cb8:	90 91 7e 32 	lds	r25, 0x327E
    4cbc:	20 91 2d 2e 	lds	r18, 0x2E2D
    4cc0:	30 91 2e 2e 	lds	r19, 0x2E2E
    4cc4:	82 1b       	sub	r24, r18
    4cc6:	93 0b       	sbc	r25, r19
    4cc8:	80 93 a0 24 	sts	0x24A0, r24
    4ccc:	90 93 a1 24 	sts	0x24A1, r25
    4cd0:	2a c0       	rjmp	.+84     	; 0x4d26 <Racunanje_trenutne_pozicije+0x16a>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_L == 1)
    4cd2:	80 91 22 2e 	lds	r24, 0x2E22
    4cd6:	81 30       	cpi	r24, 0x01	; 1
    4cd8:	89 f4       	brne	.+34     	; 0x4cfc <Racunanje_trenutne_pozicije+0x140>
		{
			sample_L16 = count_L + ~(last_count_L);
    4cda:	80 91 2d 2e 	lds	r24, 0x2E2D
    4cde:	90 91 2e 2e 	lds	r25, 0x2E2E
    4ce2:	20 91 7d 32 	lds	r18, 0x327D
    4ce6:	30 91 7e 32 	lds	r19, 0x327E
    4cea:	80 95       	com	r24
    4cec:	90 95       	com	r25
    4cee:	82 0f       	add	r24, r18
    4cf0:	93 1f       	adc	r25, r19
    4cf2:	80 93 a0 24 	sts	0x24A0, r24
    4cf6:	90 93 a1 24 	sts	0x24A1, r25
    4cfa:	13 c0       	rjmp	.+38     	; 0x4d22 <Racunanje_trenutne_pozicije+0x166>
		} 
		else if(PASIVNI_QDEC_OWF_L == 2)
    4cfc:	80 91 22 2e 	lds	r24, 0x2E22
    4d00:	82 30       	cpi	r24, 0x02	; 2
    4d02:	79 f4       	brne	.+30     	; 0x4d22 <Racunanje_trenutne_pozicije+0x166>
		{
			sample_L16 = -(last_count_L + ~(count_L));
    4d04:	80 91 7d 32 	lds	r24, 0x327D
    4d08:	90 91 7e 32 	lds	r25, 0x327E
    4d0c:	20 91 2d 2e 	lds	r18, 0x2E2D
    4d10:	30 91 2e 2e 	lds	r19, 0x2E2E
    4d14:	01 96       	adiw	r24, 0x01	; 1
    4d16:	82 1b       	sub	r24, r18
    4d18:	93 0b       	sbc	r25, r19
    4d1a:	80 93 a0 24 	sts	0x24A0, r24
    4d1e:	90 93 a1 24 	sts	0x24A1, r25
		}
		
		PASIVNI_QDEC_OWF_L = 0;
    4d22:	10 92 22 2e 	sts	0x2E22, r1
	}
	
	
	//osvezavanje last_ promenjive
	last_count_R = count_R;
    4d26:	80 91 1e 2e 	lds	r24, 0x2E1E
    4d2a:	90 91 1f 2e 	lds	r25, 0x2E1F
    4d2e:	a0 91 20 2e 	lds	r26, 0x2E20
    4d32:	b0 91 21 2e 	lds	r27, 0x2E21
    4d36:	80 93 ee 29 	sts	0x29EE, r24
    4d3a:	90 93 ef 29 	sts	0x29EF, r25
    4d3e:	a0 93 f0 29 	sts	0x29F0, r26
    4d42:	b0 93 f1 29 	sts	0x29F1, r27
	last_count_L = count_L;
    4d46:	80 91 7d 32 	lds	r24, 0x327D
    4d4a:	90 91 7e 32 	lds	r25, 0x327E
    4d4e:	80 93 2d 2e 	sts	0x2E2D, r24
    4d52:	90 93 2e 2e 	sts	0x2E2E, r25
	
	//potrebne vrednosti za trigonometriju
	translacija_10ms = (sample_R16 + sample_L16);
    4d56:	20 91 c0 24 	lds	r18, 0x24C0
    4d5a:	30 91 c1 24 	lds	r19, 0x24C1
    4d5e:	80 91 a0 24 	lds	r24, 0x24A0
    4d62:	90 91 a1 24 	lds	r25, 0x24A1
    4d66:	82 0f       	add	r24, r18
    4d68:	93 1f       	adc	r25, r19
    4d6a:	80 93 f2 29 	sts	0x29F2, r24
    4d6e:	90 93 f3 29 	sts	0x29F3, r25
	rotacija_10ms = (sample_R16 - sample_L16);
    4d72:	80 91 c0 24 	lds	r24, 0x24C0
    4d76:	90 91 c1 24 	lds	r25, 0x24C1
    4d7a:	20 91 a0 24 	lds	r18, 0x24A0
    4d7e:	30 91 a1 24 	lds	r19, 0x24A1
    4d82:	82 1b       	sub	r24, r18
    4d84:	93 0b       	sbc	r25, r19
    4d86:	80 93 87 32 	sts	0x3287, r24
    4d8a:	90 93 88 32 	sts	0x3288, r25
	teta += rotacija_10ms;
    4d8e:	80 91 87 32 	lds	r24, 0x3287
    4d92:	90 91 88 32 	lds	r25, 0x3288
    4d96:	40 91 83 32 	lds	r20, 0x3283
    4d9a:	50 91 84 32 	lds	r21, 0x3284
    4d9e:	60 91 85 32 	lds	r22, 0x3285
    4da2:	70 91 86 32 	lds	r23, 0x3286
    4da6:	aa 27       	eor	r26, r26
    4da8:	97 fd       	sbrc	r25, 7
    4daa:	a0 95       	com	r26
    4dac:	ba 2f       	mov	r27, r26
    4dae:	84 0f       	add	r24, r20
    4db0:	95 1f       	adc	r25, r21
    4db2:	a6 1f       	adc	r26, r22
    4db4:	b7 1f       	adc	r27, r23
    4db6:	80 93 83 32 	sts	0x3283, r24
    4dba:	90 93 84 32 	sts	0x3284, r25
    4dbe:	a0 93 85 32 	sts	0x3285, r26
    4dc2:	b0 93 86 32 	sts	0x3286, r27
	translacija += ((long)(translacija_10ms));
    4dc6:	80 91 f2 29 	lds	r24, 0x29F2
    4dca:	90 91 f3 29 	lds	r25, 0x29F3
    4dce:	40 91 b4 24 	lds	r20, 0x24B4
    4dd2:	50 91 b5 24 	lds	r21, 0x24B5
    4dd6:	60 91 b6 24 	lds	r22, 0x24B6
    4dda:	70 91 b7 24 	lds	r23, 0x24B7
    4dde:	aa 27       	eor	r26, r26
    4de0:	97 fd       	sbrc	r25, 7
    4de2:	a0 95       	com	r26
    4de4:	ba 2f       	mov	r27, r26
    4de6:	84 0f       	add	r24, r20
    4de8:	95 1f       	adc	r25, r21
    4dea:	a6 1f       	adc	r26, r22
    4dec:	b7 1f       	adc	r27, r23
    4dee:	80 93 b4 24 	sts	0x24B4, r24
    4df2:	90 93 b5 24 	sts	0x24B5, r25
    4df6:	a0 93 b6 24 	sts	0x24B6, r26
    4dfa:	b0 93 b7 24 	sts	0x24B7, r27
	
	//ako predje ceo krug u pozitivnom smeru  //PROVERI OVO
	if(teta >= krug360)
    4dfe:	40 91 83 32 	lds	r20, 0x3283
    4e02:	50 91 84 32 	lds	r21, 0x3284
    4e06:	60 91 85 32 	lds	r22, 0x3285
    4e0a:	70 91 86 32 	lds	r23, 0x3286
    4e0e:	80 91 75 32 	lds	r24, 0x3275
    4e12:	90 91 76 32 	lds	r25, 0x3276
    4e16:	a0 91 77 32 	lds	r26, 0x3277
    4e1a:	b0 91 78 32 	lds	r27, 0x3278
    4e1e:	48 17       	cp	r20, r24
    4e20:	59 07       	cpc	r21, r25
    4e22:	6a 07       	cpc	r22, r26
    4e24:	7b 07       	cpc	r23, r27
    4e26:	e4 f0       	brlt	.+56     	; 0x4e60 <Racunanje_trenutne_pozicije+0x2a4>
		teta -= krug360;
    4e28:	80 91 83 32 	lds	r24, 0x3283
    4e2c:	90 91 84 32 	lds	r25, 0x3284
    4e30:	a0 91 85 32 	lds	r26, 0x3285
    4e34:	b0 91 86 32 	lds	r27, 0x3286
    4e38:	40 91 75 32 	lds	r20, 0x3275
    4e3c:	50 91 76 32 	lds	r21, 0x3276
    4e40:	60 91 77 32 	lds	r22, 0x3277
    4e44:	70 91 78 32 	lds	r23, 0x3278
    4e48:	84 1b       	sub	r24, r20
    4e4a:	95 0b       	sbc	r25, r21
    4e4c:	a6 0b       	sbc	r26, r22
    4e4e:	b7 0b       	sbc	r27, r23
    4e50:	80 93 83 32 	sts	0x3283, r24
    4e54:	90 93 84 32 	sts	0x3284, r25
    4e58:	a0 93 85 32 	sts	0x3285, r26
    4e5c:	b0 93 86 32 	sts	0x3286, r27
	
	//ako predje u negativan smer
	if(teta < 0)
    4e60:	80 91 83 32 	lds	r24, 0x3283
    4e64:	90 91 84 32 	lds	r25, 0x3284
    4e68:	a0 91 85 32 	lds	r26, 0x3285
    4e6c:	b0 91 86 32 	lds	r27, 0x3286
    4e70:	bb 23       	and	r27, r27
    4e72:	e4 f4       	brge	.+56     	; 0x4eac <Racunanje_trenutne_pozicije+0x2f0>
		teta += krug360;	
    4e74:	40 91 83 32 	lds	r20, 0x3283
    4e78:	50 91 84 32 	lds	r21, 0x3284
    4e7c:	60 91 85 32 	lds	r22, 0x3285
    4e80:	70 91 86 32 	lds	r23, 0x3286
    4e84:	80 91 75 32 	lds	r24, 0x3275
    4e88:	90 91 76 32 	lds	r25, 0x3276
    4e8c:	a0 91 77 32 	lds	r26, 0x3277
    4e90:	b0 91 78 32 	lds	r27, 0x3278
    4e94:	84 0f       	add	r24, r20
    4e96:	95 1f       	adc	r25, r21
    4e98:	a6 1f       	adc	r26, r22
    4e9a:	b7 1f       	adc	r27, r23
    4e9c:	80 93 83 32 	sts	0x3283, r24
    4ea0:	90 93 84 32 	sts	0x3284, r25
    4ea4:	a0 93 85 32 	sts	0x3285, r26
    4ea8:	b0 93 86 32 	sts	0x3286, r27
	
	//racunanje pozicije
	double X_pos_cos, Y_pos_sin;
	X_pos_cos = cos(((double)teta / krug180) * M_PI);
    4eac:	60 91 83 32 	lds	r22, 0x3283
    4eb0:	70 91 84 32 	lds	r23, 0x3284
    4eb4:	80 91 85 32 	lds	r24, 0x3285
    4eb8:	90 91 86 32 	lds	r25, 0x3286
    4ebc:	c0 90 cf 28 	lds	r12, 0x28CF
    4ec0:	d0 90 d0 28 	lds	r13, 0x28D0
    4ec4:	e0 90 d1 28 	lds	r14, 0x28D1
    4ec8:	f0 90 d2 28 	lds	r15, 0x28D2
    4ecc:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4ed0:	4b 01       	movw	r8, r22
    4ed2:	5c 01       	movw	r10, r24
    4ed4:	c7 01       	movw	r24, r14
    4ed6:	b6 01       	movw	r22, r12
    4ed8:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4edc:	9b 01       	movw	r18, r22
    4ede:	ac 01       	movw	r20, r24
    4ee0:	c5 01       	movw	r24, r10
    4ee2:	b4 01       	movw	r22, r8
    4ee4:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
    4ee8:	2b ed       	ldi	r18, 0xDB	; 219
    4eea:	3f e0       	ldi	r19, 0x0F	; 15
    4eec:	49 e4       	ldi	r20, 0x49	; 73
    4eee:	50 e4       	ldi	r21, 0x40	; 64
    4ef0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    4ef4:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <cos>
    4ef8:	2b 01       	movw	r4, r22
    4efa:	3c 01       	movw	r6, r24
	Y_pos_sin = sin(((double)teta / krug180) * M_PI);
    4efc:	60 91 83 32 	lds	r22, 0x3283
    4f00:	70 91 84 32 	lds	r23, 0x3284
    4f04:	80 91 85 32 	lds	r24, 0x3285
    4f08:	90 91 86 32 	lds	r25, 0x3286
    4f0c:	c0 90 cf 28 	lds	r12, 0x28CF
    4f10:	d0 90 d0 28 	lds	r13, 0x28D0
    4f14:	e0 90 d1 28 	lds	r14, 0x28D1
    4f18:	f0 90 d2 28 	lds	r15, 0x28D2
    4f1c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4f20:	4b 01       	movw	r8, r22
    4f22:	5c 01       	movw	r10, r24
    4f24:	c7 01       	movw	r24, r14
    4f26:	b6 01       	movw	r22, r12
    4f28:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4f2c:	9b 01       	movw	r18, r22
    4f2e:	ac 01       	movw	r20, r24
    4f30:	c5 01       	movw	r24, r10
    4f32:	b4 01       	movw	r22, r8
    4f34:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
    4f38:	2b ed       	ldi	r18, 0xDB	; 219
    4f3a:	3f e0       	ldi	r19, 0x0F	; 15
    4f3c:	49 e4       	ldi	r20, 0x49	; 73
    4f3e:	50 e4       	ldi	r21, 0x40	; 64
    4f40:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    4f44:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <sin>
    4f48:	4b 01       	movw	r8, r22
    4f4a:	5c 01       	movw	r10, r24
	X_pos += (int)(((double)translacija_10ms * X_pos_cos));
    4f4c:	60 91 f2 29 	lds	r22, 0x29F2
    4f50:	70 91 f3 29 	lds	r23, 0x29F3
    4f54:	c0 90 23 2e 	lds	r12, 0x2E23
    4f58:	d0 90 24 2e 	lds	r13, 0x2E24
    4f5c:	e0 90 25 2e 	lds	r14, 0x2E25
    4f60:	f0 90 26 2e 	lds	r15, 0x2E26
    4f64:	88 27       	eor	r24, r24
    4f66:	77 fd       	sbrc	r23, 7
    4f68:	80 95       	com	r24
    4f6a:	98 2f       	mov	r25, r24
    4f6c:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4f70:	a3 01       	movw	r20, r6
    4f72:	92 01       	movw	r18, r4
    4f74:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    4f78:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	aa 27       	eor	r26, r26
    4f80:	97 fd       	sbrc	r25, 7
    4f82:	a0 95       	com	r26
    4f84:	ba 2f       	mov	r27, r26
    4f86:	c8 0e       	add	r12, r24
    4f88:	d9 1e       	adc	r13, r25
    4f8a:	ea 1e       	adc	r14, r26
    4f8c:	fb 1e       	adc	r15, r27
    4f8e:	c0 92 23 2e 	sts	0x2E23, r12
    4f92:	d0 92 24 2e 	sts	0x2E24, r13
    4f96:	e0 92 25 2e 	sts	0x2E25, r14
    4f9a:	f0 92 26 2e 	sts	0x2E26, r15
	Y_pos += (int)(((double)translacija_10ms * Y_pos_sin));
    4f9e:	60 91 f2 29 	lds	r22, 0x29F2
    4fa2:	70 91 f3 29 	lds	r23, 0x29F3
    4fa6:	c0 90 02 2a 	lds	r12, 0x2A02
    4faa:	d0 90 03 2a 	lds	r13, 0x2A03
    4fae:	e0 90 04 2a 	lds	r14, 0x2A04
    4fb2:	f0 90 05 2a 	lds	r15, 0x2A05
    4fb6:	88 27       	eor	r24, r24
    4fb8:	77 fd       	sbrc	r23, 7
    4fba:	80 95       	com	r24
    4fbc:	98 2f       	mov	r25, r24
    4fbe:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    4fc2:	a5 01       	movw	r20, r10
    4fc4:	94 01       	movw	r18, r8
    4fc6:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    4fca:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    4fce:	cb 01       	movw	r24, r22
    4fd0:	aa 27       	eor	r26, r26
    4fd2:	97 fd       	sbrc	r25, 7
    4fd4:	a0 95       	com	r26
    4fd6:	ba 2f       	mov	r27, r26
    4fd8:	c8 0e       	add	r12, r24
    4fda:	d9 1e       	adc	r13, r25
    4fdc:	ea 1e       	adc	r14, r26
    4fde:	fb 1e       	adc	r15, r27
    4fe0:	c0 92 02 2a 	sts	0x2A02, r12
    4fe4:	d0 92 03 2a 	sts	0x2A03, r13
    4fe8:	e0 92 04 2a 	sts	0x2A04, r14
    4fec:	f0 92 05 2a 	sts	0x2A05, r15
}
    4ff0:	ff 90       	pop	r15
    4ff2:	ef 90       	pop	r14
    4ff4:	df 90       	pop	r13
    4ff6:	cf 90       	pop	r12
    4ff8:	bf 90       	pop	r11
    4ffa:	af 90       	pop	r10
    4ffc:	9f 90       	pop	r9
    4ffe:	8f 90       	pop	r8
    5000:	7f 90       	pop	r7
    5002:	6f 90       	pop	r6
    5004:	5f 90       	pop	r5
    5006:	4f 90       	pop	r4
    5008:	08 95       	ret

0000500a <Pracenje_pravca>:

void Pracenje_pravca(void) 
{
    500a:	4f 92       	push	r4
    500c:	5f 92       	push	r5
    500e:	6f 92       	push	r6
    5010:	7f 92       	push	r7
    5012:	8f 92       	push	r8
    5014:	9f 92       	push	r9
    5016:	af 92       	push	r10
    5018:	bf 92       	push	r11
    501a:	cf 92       	push	r12
    501c:	df 92       	push	r13
    501e:	ef 92       	push	r14
    5020:	ff 92       	push	r15
    5022:	0f 93       	push	r16
    5024:	1f 93       	push	r17
    5026:	cf 93       	push	r28
    5028:	df 93       	push	r29
	//Ulaz X_cilj i Y_cilj
	//Izlaz je teta_cilj i rastojanje_cilj
	double X_razlika, Y_razlika, XY_zbir, teta_razlika, teta_cilj_radian;
	
	//ako stignu nove zadate koordinate
	if (X_cilj_stari != X_cilj || Y_cilj_stari != Y_cilj)	
    502a:	40 91 31 2e 	lds	r20, 0x2E31
    502e:	50 91 32 2e 	lds	r21, 0x2E32
    5032:	60 91 33 2e 	lds	r22, 0x2E33
    5036:	70 91 34 2e 	lds	r23, 0x2E34
    503a:	80 91 ae 24 	lds	r24, 0x24AE
    503e:	90 91 af 24 	lds	r25, 0x24AF
    5042:	a0 91 b0 24 	lds	r26, 0x24B0
    5046:	b0 91 b1 24 	lds	r27, 0x24B1
    504a:	48 17       	cp	r20, r24
    504c:	59 07       	cpc	r21, r25
    504e:	6a 07       	cpc	r22, r26
    5050:	7b 07       	cpc	r23, r27
    5052:	a9 f4       	brne	.+42     	; 0x507e <Pracenje_pravca+0x74>
    5054:	40 91 70 2e 	lds	r20, 0x2E70
    5058:	50 91 71 2e 	lds	r21, 0x2E71
    505c:	60 91 72 2e 	lds	r22, 0x2E72
    5060:	70 91 73 2e 	lds	r23, 0x2E73
    5064:	80 91 0b 2e 	lds	r24, 0x2E0B
    5068:	90 91 0c 2e 	lds	r25, 0x2E0C
    506c:	a0 91 0d 2e 	lds	r26, 0x2E0D
    5070:	b0 91 0e 2e 	lds	r27, 0x2E0E
    5074:	48 17       	cp	r20, r24
    5076:	59 07       	cpc	r21, r25
    5078:	6a 07       	cpc	r22, r26
    507a:	7b 07       	cpc	r23, r27
    507c:	71 f0       	breq	.+28     	; 0x509a <Pracenje_pravca+0x90>
	{
		rezervni_ugao = krug45;	//precizno se pozicioniramo u mestu
    507e:	80 91 c8 24 	lds	r24, 0x24C8
    5082:	90 91 c9 24 	lds	r25, 0x24C9
    5086:	a0 91 ca 24 	lds	r26, 0x24CA
    508a:	b0 91 cb 24 	lds	r27, 0x24CB
    508e:	80 93 2f 2e 	sts	0x2E2F, r24
    5092:	90 93 30 2e 	sts	0x2E30, r25
		stigao_flag = 0;
    5096:	10 92 06 20 	sts	0x2006, r1
	}
	X_cilj_stari = X_cilj;
    509a:	80 91 ae 24 	lds	r24, 0x24AE
    509e:	90 91 af 24 	lds	r25, 0x24AF
    50a2:	a0 91 b0 24 	lds	r26, 0x24B0
    50a6:	b0 91 b1 24 	lds	r27, 0x24B1
    50aa:	80 93 31 2e 	sts	0x2E31, r24
    50ae:	90 93 32 2e 	sts	0x2E32, r25
    50b2:	a0 93 33 2e 	sts	0x2E33, r26
    50b6:	b0 93 34 2e 	sts	0x2E34, r27
	Y_cilj_stari = Y_cilj;
    50ba:	80 91 0b 2e 	lds	r24, 0x2E0B
    50be:	90 91 0c 2e 	lds	r25, 0x2E0C
    50c2:	a0 91 0d 2e 	lds	r26, 0x2E0D
    50c6:	b0 91 0e 2e 	lds	r27, 0x2E0E
    50ca:	80 93 70 2e 	sts	0x2E70, r24
    50ce:	90 93 71 2e 	sts	0x2E71, r25
    50d2:	a0 93 72 2e 	sts	0x2E72, r26
    50d6:	b0 93 73 2e 	sts	0x2E73, r27
	
	X_razlika = (X_cilj - X_pos);
    50da:	40 91 ae 24 	lds	r20, 0x24AE
    50de:	50 91 af 24 	lds	r21, 0x24AF
    50e2:	60 91 b0 24 	lds	r22, 0x24B0
    50e6:	70 91 b1 24 	lds	r23, 0x24B1
    50ea:	80 91 23 2e 	lds	r24, 0x2E23
    50ee:	90 91 24 2e 	lds	r25, 0x2E24
    50f2:	a0 91 25 2e 	lds	r26, 0x2E25
    50f6:	b0 91 26 2e 	lds	r27, 0x2E26
    50fa:	8a 01       	movw	r16, r20
    50fc:	9b 01       	movw	r18, r22
    50fe:	08 1b       	sub	r16, r24
    5100:	19 0b       	sbc	r17, r25
    5102:	2a 0b       	sbc	r18, r26
    5104:	3b 0b       	sbc	r19, r27
    5106:	c9 01       	movw	r24, r18
    5108:	b8 01       	movw	r22, r16
    510a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    510e:	c6 2e       	mov	r12, r22
    5110:	d7 2e       	mov	r13, r23
    5112:	e8 2e       	mov	r14, r24
    5114:	f9 2e       	mov	r15, r25
	Y_razlika = (Y_cilj - Y_pos);
    5116:	40 91 0b 2e 	lds	r20, 0x2E0B
    511a:	50 91 0c 2e 	lds	r21, 0x2E0C
    511e:	60 91 0d 2e 	lds	r22, 0x2E0D
    5122:	70 91 0e 2e 	lds	r23, 0x2E0E
    5126:	80 91 02 2a 	lds	r24, 0x2A02
    512a:	90 91 03 2a 	lds	r25, 0x2A03
    512e:	a0 91 04 2a 	lds	r26, 0x2A04
    5132:	b0 91 05 2a 	lds	r27, 0x2A05
    5136:	8a 01       	movw	r16, r20
    5138:	9b 01       	movw	r18, r22
    513a:	08 1b       	sub	r16, r24
    513c:	19 0b       	sbc	r17, r25
    513e:	2a 0b       	sbc	r18, r26
    5140:	3b 0b       	sbc	r19, r27
    5142:	c9 01       	movw	r24, r18
    5144:	b8 01       	movw	r22, r16
    5146:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    514a:	06 2f       	mov	r16, r22
    514c:	17 2f       	mov	r17, r23
    514e:	d8 2f       	mov	r29, r24
    5150:	c9 2f       	mov	r28, r25
	X_razlika *= X_razlika;
    5152:	2c 2d       	mov	r18, r12
    5154:	3d 2d       	mov	r19, r13
    5156:	4e 2d       	mov	r20, r14
    5158:	5f 2d       	mov	r21, r15
    515a:	6c 2d       	mov	r22, r12
    515c:	7d 2d       	mov	r23, r13
    515e:	8e 2d       	mov	r24, r14
    5160:	9f 2d       	mov	r25, r15
    5162:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    5166:	6b 01       	movw	r12, r22
    5168:	7c 01       	movw	r14, r24
	Y_razlika *= Y_razlika;
    516a:	20 2f       	mov	r18, r16
    516c:	31 2f       	mov	r19, r17
    516e:	4d 2f       	mov	r20, r29
    5170:	5c 2f       	mov	r21, r28
    5172:	60 2f       	mov	r22, r16
    5174:	71 2f       	mov	r23, r17
    5176:	8d 2f       	mov	r24, r29
    5178:	9c 2f       	mov	r25, r28
    517a:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    517e:	9b 01       	movw	r18, r22
    5180:	ac 01       	movw	r20, r24
	XY_zbir = X_razlika + Y_razlika;
    5182:	c7 01       	movw	r24, r14
    5184:	b6 01       	movw	r22, r12
    5186:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
	rastojanje_cilj_temp = sqrt(XY_zbir);
    518a:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <sqrt>
    518e:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    5192:	60 93 12 2e 	sts	0x2E12, r22
    5196:	70 93 13 2e 	sts	0x2E13, r23
    519a:	80 93 14 2e 	sts	0x2E14, r24
    519e:	90 93 15 2e 	sts	0x2E15, r25
	
	//ako je veca preostala distanca veca od 10 cm onda se radi korrekcija
	if(rastojanje_cilj_temp > (metar / 10))  // metar/12
    51a2:	60 91 d3 24 	lds	r22, 0x24D3
    51a6:	70 91 d4 24 	lds	r23, 0x24D4
    51aa:	80 91 d5 24 	lds	r24, 0x24D5
    51ae:	90 91 d6 24 	lds	r25, 0x24D6
    51b2:	c0 90 12 2e 	lds	r12, 0x2E12
    51b6:	d0 90 13 2e 	lds	r13, 0x2E13
    51ba:	e0 90 14 2e 	lds	r14, 0x2E14
    51be:	f0 90 15 2e 	lds	r15, 0x2E15
    51c2:	2a e0       	ldi	r18, 0x0A	; 10
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	40 e0       	ldi	r20, 0x00	; 0
    51c8:	50 e0       	ldi	r21, 0x00	; 0
    51ca:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    51ce:	2c 15       	cp	r18, r12
    51d0:	3d 05       	cpc	r19, r13
    51d2:	4e 05       	cpc	r20, r14
    51d4:	5f 05       	cpc	r21, r15
    51d6:	0c f0       	brlt	.+2      	; 0x51da <Pracenje_pravca+0x1d0>
    51d8:	3f c1       	rjmp	.+638    	; 0x5458 <Pracenje_pravca+0x44e>
	{
		rastojanje_cilj = rastojanje_cilj_temp;
    51da:	80 91 12 2e 	lds	r24, 0x2E12
    51de:	90 91 13 2e 	lds	r25, 0x2E13
    51e2:	a0 91 14 2e 	lds	r26, 0x2E14
    51e6:	b0 91 15 2e 	lds	r27, 0x2E15
    51ea:	80 93 69 2e 	sts	0x2E69, r24
    51ee:	90 93 6a 2e 	sts	0x2E6A, r25
    51f2:	a0 93 6b 2e 	sts	0x2E6B, r26
    51f6:	b0 93 6c 2e 	sts	0x2E6C, r27
		translacija = 0;
    51fa:	10 92 b4 24 	sts	0x24B4, r1
    51fe:	10 92 b5 24 	sts	0x24B5, r1
    5202:	10 92 b6 24 	sts	0x24B6, r1
    5206:	10 92 b7 24 	sts	0x24B7, r1
		vreme_pozicioniranja = 0;
    520a:	10 92 5c 2e 	sts	0x2E5C, r1
    520e:	10 92 5d 2e 	sts	0x2E5D, r1
		stigao_flag = 0;
    5212:	10 92 06 20 	sts	0x2006, r1
		
		X_razlika = (X_cilj - X_pos);
    5216:	40 91 ae 24 	lds	r20, 0x24AE
    521a:	50 91 af 24 	lds	r21, 0x24AF
    521e:	60 91 b0 24 	lds	r22, 0x24B0
    5222:	70 91 b1 24 	lds	r23, 0x24B1
    5226:	80 91 23 2e 	lds	r24, 0x2E23
    522a:	90 91 24 2e 	lds	r25, 0x2E24
    522e:	a0 91 25 2e 	lds	r26, 0x2E25
    5232:	b0 91 26 2e 	lds	r27, 0x2E26
		Y_razlika = (Y_cilj - Y_pos);
    5236:	40 90 0b 2e 	lds	r4, 0x2E0B
    523a:	50 90 0c 2e 	lds	r5, 0x2E0C
    523e:	60 90 0d 2e 	lds	r6, 0x2E0D
    5242:	70 90 0e 2e 	lds	r7, 0x2E0E
    5246:	80 90 02 2a 	lds	r8, 0x2A02
    524a:	90 90 03 2a 	lds	r9, 0x2A03
    524e:	a0 90 04 2a 	lds	r10, 0x2A04
    5252:	b0 90 05 2a 	lds	r11, 0x2A05
		rastojanje_cilj = rastojanje_cilj_temp;
		translacija = 0;
		vreme_pozicioniranja = 0;
		stigao_flag = 0;
		
		X_razlika = (X_cilj - X_pos);
    5256:	8a 01       	movw	r16, r20
    5258:	9b 01       	movw	r18, r22
    525a:	08 1b       	sub	r16, r24
    525c:	19 0b       	sbc	r17, r25
    525e:	2a 0b       	sbc	r18, r26
    5260:	3b 0b       	sbc	r19, r27
    5262:	c9 01       	movw	r24, r18
    5264:	b8 01       	movw	r22, r16
    5266:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    526a:	6b 01       	movw	r12, r22
    526c:	7c 01       	movw	r14, r24
		Y_razlika = (Y_cilj - Y_pos);
    526e:	c3 01       	movw	r24, r6
    5270:	b2 01       	movw	r22, r4
    5272:	68 19       	sub	r22, r8
    5274:	79 09       	sbc	r23, r9
    5276:	8a 09       	sbc	r24, r10
    5278:	9b 09       	sbc	r25, r11
    527a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
		teta_cilj_radian = atan2((double)(Y_razlika), (double)(X_razlika));
    527e:	a7 01       	movw	r20, r14
    5280:	96 01       	movw	r18, r12
    5282:	0e 94 56 35 	call	0x6aac	; 0x6aac <atan2>
    5286:	6b 01       	movw	r12, r22
    5288:	7c 01       	movw	r14, r24
		
		teta_cilj = (signed long)((teta_cilj_radian * krug180) / M_PI);
    528a:	60 91 cf 28 	lds	r22, 0x28CF
    528e:	70 91 d0 28 	lds	r23, 0x28D0
    5292:	80 91 d1 28 	lds	r24, 0x28D1
    5296:	90 91 d2 28 	lds	r25, 0x28D2
    529a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    529e:	a7 01       	movw	r20, r14
    52a0:	96 01       	movw	r18, r12
    52a2:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    52a6:	2b ed       	ldi	r18, 0xDB	; 219
    52a8:	3f e0       	ldi	r19, 0x0F	; 15
    52aa:	49 e4       	ldi	r20, 0x49	; 73
    52ac:	50 e4       	ldi	r21, 0x40	; 64
    52ae:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
    52b2:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    52b6:	60 93 cc 24 	sts	0x24CC, r22
    52ba:	70 93 cd 24 	sts	0x24CD, r23
    52be:	80 93 ce 24 	sts	0x24CE, r24
    52c2:	90 93 cf 24 	sts	0x24CF, r25
		
		//Za automatsko kontanje rikverca po uglu
		if((smer_zadati) == 0)	//Sam bira smer
    52c6:	80 91 5e 29 	lds	r24, 0x295E
    52ca:	81 11       	cpse	r24, r1
    52cc:	73 c0       	rjmp	.+230    	; 0x53b4 <Pracenje_pravca+0x3aa>
		{
			teta_razlika = teta - teta_cilj;
    52ce:	40 91 83 32 	lds	r20, 0x3283
    52d2:	50 91 84 32 	lds	r21, 0x3284
    52d6:	60 91 85 32 	lds	r22, 0x3285
    52da:	70 91 86 32 	lds	r23, 0x3286
    52de:	80 91 cc 24 	lds	r24, 0x24CC
    52e2:	90 91 cd 24 	lds	r25, 0x24CD
    52e6:	a0 91 ce 24 	lds	r26, 0x24CE
    52ea:	b0 91 cf 24 	lds	r27, 0x24CF
    52ee:	8a 01       	movw	r16, r20
    52f0:	9b 01       	movw	r18, r22
    52f2:	08 1b       	sub	r16, r24
    52f4:	19 0b       	sbc	r17, r25
    52f6:	2a 0b       	sbc	r18, r26
    52f8:	3b 0b       	sbc	r19, r27
    52fa:	c9 01       	movw	r24, r18
    52fc:	b8 01       	movw	r22, r16
    52fe:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    5302:	06 2f       	mov	r16, r22
    5304:	17 2f       	mov	r17, r23
    5306:	d8 2f       	mov	r29, r24
    5308:	c9 2f       	mov	r28, r25
			if(teta_razlika > (krug90) || teta_razlika < (-krug90))
    530a:	60 91 7e 2e 	lds	r22, 0x2E7E
    530e:	70 91 7f 2e 	lds	r23, 0x2E7F
    5312:	80 91 80 2e 	lds	r24, 0x2E80
    5316:	90 91 81 2e 	lds	r25, 0x2E81
    531a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    531e:	9b 01       	movw	r18, r22
    5320:	ac 01       	movw	r20, r24
    5322:	60 2f       	mov	r22, r16
    5324:	71 2f       	mov	r23, r17
    5326:	8d 2f       	mov	r24, r29
    5328:	9c 2f       	mov	r25, r28
    532a:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <__gesf2>
    532e:	18 16       	cp	r1, r24
    5330:	ec f0       	brlt	.+58     	; 0x536c <Pracenje_pravca+0x362>
    5332:	80 91 7e 2e 	lds	r24, 0x2E7E
    5336:	90 91 7f 2e 	lds	r25, 0x2E7F
    533a:	a0 91 80 2e 	lds	r26, 0x2E80
    533e:	b0 91 81 2e 	lds	r27, 0x2E81
    5342:	9c 01       	movw	r18, r24
    5344:	ad 01       	movw	r20, r26
    5346:	66 27       	eor	r22, r22
    5348:	77 27       	eor	r23, r23
    534a:	cb 01       	movw	r24, r22
    534c:	62 1b       	sub	r22, r18
    534e:	73 0b       	sbc	r23, r19
    5350:	84 0b       	sbc	r24, r20
    5352:	95 0b       	sbc	r25, r21
    5354:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    5358:	9b 01       	movw	r18, r22
    535a:	ac 01       	movw	r20, r24
    535c:	60 2f       	mov	r22, r16
    535e:	71 2f       	mov	r23, r17
    5360:	8d 2f       	mov	r24, r29
    5362:	9c 2f       	mov	r25, r28
    5364:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <__cmpsf2>
    5368:	88 23       	and	r24, r24
    536a:	04 f5       	brge	.+64     	; 0x53ac <Pracenje_pravca+0x3a2>
			{
				smer_trenutni = -1;
    536c:	8f ef       	ldi	r24, 0xFF	; 255
    536e:	80 93 78 2e 	sts	0x2E78, r24
				teta_cilj -= krug180;
    5372:	80 91 cc 24 	lds	r24, 0x24CC
    5376:	90 91 cd 24 	lds	r25, 0x24CD
    537a:	a0 91 ce 24 	lds	r26, 0x24CE
    537e:	b0 91 cf 24 	lds	r27, 0x24CF
    5382:	40 91 cf 28 	lds	r20, 0x28CF
    5386:	50 91 d0 28 	lds	r21, 0x28D0
    538a:	60 91 d1 28 	lds	r22, 0x28D1
    538e:	70 91 d2 28 	lds	r23, 0x28D2
    5392:	84 1b       	sub	r24, r20
    5394:	95 0b       	sbc	r25, r21
    5396:	a6 0b       	sbc	r26, r22
    5398:	b7 0b       	sbc	r27, r23
    539a:	80 93 cc 24 	sts	0x24CC, r24
    539e:	90 93 cd 24 	sts	0x24CD, r25
    53a2:	a0 93 ce 24 	sts	0x24CE, r26
    53a6:	b0 93 cf 24 	sts	0x24CF, r27
    53aa:	2e c0       	rjmp	.+92     	; 0x5408 <Pracenje_pravca+0x3fe>
			}	
			else
			{
				smer_trenutni = 1;
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	80 93 78 2e 	sts	0x2E78, r24
    53b2:	2a c0       	rjmp	.+84     	; 0x5408 <Pracenje_pravca+0x3fe>
			}
		}
		else if(smer_zadati == 1)	//Samo napred
    53b4:	80 91 5e 29 	lds	r24, 0x295E
    53b8:	81 30       	cpi	r24, 0x01	; 1
    53ba:	19 f4       	brne	.+6      	; 0x53c2 <Pracenje_pravca+0x3b8>
		{
			smer_trenutni = 1; //1
    53bc:	80 93 78 2e 	sts	0x2E78, r24
    53c0:	23 c0       	rjmp	.+70     	; 0x5408 <Pracenje_pravca+0x3fe>
		}
		else if(smer_zadati == 2)	//Samo nazad
    53c2:	80 91 5e 29 	lds	r24, 0x295E
    53c6:	82 30       	cpi	r24, 0x02	; 2
    53c8:	f9 f4       	brne	.+62     	; 0x5408 <Pracenje_pravca+0x3fe>
		{
			smer_trenutni = -1; //-1
    53ca:	8f ef       	ldi	r24, 0xFF	; 255
    53cc:	80 93 78 2e 	sts	0x2E78, r24
			teta_cilj -= krug180;
    53d0:	80 91 cc 24 	lds	r24, 0x24CC
    53d4:	90 91 cd 24 	lds	r25, 0x24CD
    53d8:	a0 91 ce 24 	lds	r26, 0x24CE
    53dc:	b0 91 cf 24 	lds	r27, 0x24CF
    53e0:	40 91 cf 28 	lds	r20, 0x28CF
    53e4:	50 91 d0 28 	lds	r21, 0x28D0
    53e8:	60 91 d1 28 	lds	r22, 0x28D1
    53ec:	70 91 d2 28 	lds	r23, 0x28D2
    53f0:	84 1b       	sub	r24, r20
    53f2:	95 0b       	sbc	r25, r21
    53f4:	a6 0b       	sbc	r26, r22
    53f6:	b7 0b       	sbc	r27, r23
    53f8:	80 93 cc 24 	sts	0x24CC, r24
    53fc:	90 93 cd 24 	sts	0x24CD, r25
    5400:	a0 93 ce 24 	sts	0x24CE, r26
    5404:	b0 93 cf 24 	sts	0x24CF, r27
		}
	
		if(teta_cilj < 0)
    5408:	80 91 cc 24 	lds	r24, 0x24CC
    540c:	90 91 cd 24 	lds	r25, 0x24CD
    5410:	a0 91 ce 24 	lds	r26, 0x24CE
    5414:	b0 91 cf 24 	lds	r27, 0x24CF
    5418:	bb 23       	and	r27, r27
    541a:	0c f0       	brlt	.+2      	; 0x541e <Pracenje_pravca+0x414>
    541c:	53 c0       	rjmp	.+166    	; 0x54c4 <Pracenje_pravca+0x4ba>
			teta_cilj += krug360;
    541e:	40 91 cc 24 	lds	r20, 0x24CC
    5422:	50 91 cd 24 	lds	r21, 0x24CD
    5426:	60 91 ce 24 	lds	r22, 0x24CE
    542a:	70 91 cf 24 	lds	r23, 0x24CF
    542e:	80 91 75 32 	lds	r24, 0x3275
    5432:	90 91 76 32 	lds	r25, 0x3276
    5436:	a0 91 77 32 	lds	r26, 0x3277
    543a:	b0 91 78 32 	lds	r27, 0x3278
    543e:	84 0f       	add	r24, r20
    5440:	95 1f       	adc	r25, r21
    5442:	a6 1f       	adc	r26, r22
    5444:	b7 1f       	adc	r27, r23
    5446:	80 93 cc 24 	sts	0x24CC, r24
    544a:	90 93 cd 24 	sts	0x24CD, r25
    544e:	a0 93 ce 24 	sts	0x24CE, r26
    5452:	b0 93 cf 24 	sts	0x24CF, r27
    5456:	36 c0       	rjmp	.+108    	; 0x54c4 <Pracenje_pravca+0x4ba>
	}
	else if (vreme_pozicioniranja >= 300)	//stigli smo do cilja
    5458:	80 91 5c 2e 	lds	r24, 0x2E5C
    545c:	90 91 5d 2e 	lds	r25, 0x2E5D
    5460:	8c 32       	cpi	r24, 0x2C	; 44
    5462:	91 40       	sbci	r25, 0x01	; 1
    5464:	78 f1       	brcs	.+94     	; 0x54c4 <Pracenje_pravca+0x4ba>
	{
		if (stigao_flag == 0)
    5466:	80 91 06 20 	lds	r24, 0x2006
    546a:	81 11       	cpse	r24, r1
    546c:	03 c0       	rjmp	.+6      	; 0x5474 <Pracenje_pravca+0x46a>
		{
			stigao_flag = 1;
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	80 93 06 20 	sts	0x2006, r24
//  			USART_TXBuffer_PutByte(&USART_E1_data, 79);	//O
//  			USART_TXBuffer_PutByte(&USART_E1_data, 75);	//K
//  			USART_TXBuffer_PutByte(&USART_E1_data, 33);	//!
		}
		
		if (teta_cilj_final != 0xFFFFFFFF)	//ako treba zauzmemo krajnji ugao
    5474:	80 91 00 20 	lds	r24, 0x2000
    5478:	90 91 01 20 	lds	r25, 0x2001
    547c:	a0 91 02 20 	lds	r26, 0x2002
    5480:	b0 91 03 20 	lds	r27, 0x2003
    5484:	8f 3f       	cpi	r24, 0xFF	; 255
    5486:	9f 4f       	sbci	r25, 0xFF	; 255
    5488:	af 4f       	sbci	r26, 0xFF	; 255
    548a:	bf 4f       	sbci	r27, 0xFF	; 255
    548c:	d9 f0       	breq	.+54     	; 0x54c4 <Pracenje_pravca+0x4ba>
		{
			teta_cilj = teta_cilj_final;
    548e:	80 91 00 20 	lds	r24, 0x2000
    5492:	90 91 01 20 	lds	r25, 0x2001
    5496:	a0 91 02 20 	lds	r26, 0x2002
    549a:	b0 91 03 20 	lds	r27, 0x2003
    549e:	80 93 cc 24 	sts	0x24CC, r24
    54a2:	90 93 cd 24 	sts	0x24CD, r25
    54a6:	a0 93 ce 24 	sts	0x24CE, r26
    54aa:	b0 93 cf 24 	sts	0x24CF, r27
			teta_cilj_final = 0xFFFFFFFF;	//postavlja se na FF, da sledeci put ne bi se izvrsavao
    54ae:	8f ef       	ldi	r24, 0xFF	; 255
    54b0:	9f ef       	ldi	r25, 0xFF	; 255
    54b2:	dc 01       	movw	r26, r24
    54b4:	80 93 00 20 	sts	0x2000, r24
    54b8:	90 93 01 20 	sts	0x2001, r25
    54bc:	a0 93 02 20 	sts	0x2002, r26
    54c0:	b0 93 03 20 	sts	0x2003, r27
		}		
	}
}
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	ef 90       	pop	r14
    54d0:	df 90       	pop	r13
    54d2:	cf 90       	pop	r12
    54d4:	bf 90       	pop	r11
    54d6:	af 90       	pop	r10
    54d8:	9f 90       	pop	r9
    54da:	8f 90       	pop	r8
    54dc:	7f 90       	pop	r7
    54de:	6f 90       	pop	r6
    54e0:	5f 90       	pop	r5
    54e2:	4f 90       	pop	r4
    54e4:	08 95       	ret

000054e6 <PID_pravolinijski>:

void PID_pravolinijski(void)
{	
    54e6:	4f 92       	push	r4
    54e8:	5f 92       	push	r5
    54ea:	6f 92       	push	r6
    54ec:	7f 92       	push	r7
    54ee:	8f 92       	push	r8
    54f0:	9f 92       	push	r9
    54f2:	af 92       	push	r10
    54f4:	bf 92       	push	r11
    54f6:	cf 92       	push	r12
    54f8:	df 92       	push	r13
    54fa:	ef 92       	push	r14
    54fc:	ff 92       	push	r15
    54fe:	0f 93       	push	r16
    5500:	1f 93       	push	r17
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
    550a:	2c 97       	sbiw	r28, 0x0c	; 12
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	de bf       	out	0x3e, r29	; 62
	pozicija_greska = rastojanje_cilj * smer_trenutni - translacija;
    5510:	a0 91 78 2e 	lds	r26, 0x2E78
    5514:	20 91 69 2e 	lds	r18, 0x2E69
    5518:	30 91 6a 2e 	lds	r19, 0x2E6A
    551c:	40 91 6b 2e 	lds	r20, 0x2E6B
    5520:	50 91 6c 2e 	lds	r21, 0x2E6C
    5524:	c0 90 b4 24 	lds	r12, 0x24B4
    5528:	d0 90 b5 24 	lds	r13, 0x24B5
    552c:	e0 90 b6 24 	lds	r14, 0x24B6
    5530:	f0 90 b7 24 	lds	r15, 0x24B7
    5534:	bb 27       	eor	r27, r27
    5536:	a7 fd       	sbrc	r26, 7
    5538:	b0 95       	com	r27
    553a:	0e 94 a1 38 	call	0x7142	; 0x7142 <__mulshisi3>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	8c 19       	sub	r24, r12
    5544:	9d 09       	sbc	r25, r13
    5546:	ae 09       	sbc	r26, r14
    5548:	bf 09       	sbc	r27, r15
    554a:	80 93 4c 2e 	sts	0x2E4C, r24
    554e:	90 93 4d 2e 	sts	0x2E4D, r25
    5552:	a0 93 4e 2e 	sts	0x2E4E, r26
    5556:	b0 93 4f 2e 	sts	0x2E4F, r27
	dif_error_pravolinijski = PID_pozicija - PID_pozicija_pret;	
    555a:	80 91 fe 29 	lds	r24, 0x29FE
    555e:	90 91 ff 29 	lds	r25, 0x29FF
    5562:	a0 91 00 2a 	lds	r26, 0x2A00
    5566:	b0 91 01 2a 	lds	r27, 0x2A01
    556a:	40 91 cb 28 	lds	r20, 0x28CB
    556e:	50 91 cc 28 	lds	r21, 0x28CC
    5572:	60 91 cd 28 	lds	r22, 0x28CD
    5576:	70 91 ce 28 	lds	r23, 0x28CE
    557a:	84 1b       	sub	r24, r20
    557c:	95 0b       	sbc	r25, r21
    557e:	a6 0b       	sbc	r26, r22
    5580:	b7 0b       	sbc	r27, r23
    5582:	80 93 f3 2d 	sts	0x2DF3, r24
    5586:	90 93 f4 2d 	sts	0x2DF4, r25
    558a:	a0 93 f5 2d 	sts	0x2DF5, r26
    558e:	b0 93 f6 2d 	sts	0x2DF6, r27
	pozicija_greska_sum += pozicija_greska;
    5592:	40 91 02 2e 	lds	r20, 0x2E02
    5596:	50 91 03 2e 	lds	r21, 0x2E03
    559a:	60 91 04 2e 	lds	r22, 0x2E04
    559e:	70 91 05 2e 	lds	r23, 0x2E05
    55a2:	80 91 4c 2e 	lds	r24, 0x2E4C
    55a6:	90 91 4d 2e 	lds	r25, 0x2E4D
    55aa:	a0 91 4e 2e 	lds	r26, 0x2E4E
    55ae:	b0 91 4f 2e 	lds	r27, 0x2E4F
    55b2:	84 0f       	add	r24, r20
    55b4:	95 1f       	adc	r25, r21
    55b6:	a6 1f       	adc	r26, r22
    55b8:	b7 1f       	adc	r27, r23
    55ba:	80 93 02 2e 	sts	0x2E02, r24
    55be:	90 93 03 2e 	sts	0x2E03, r25
    55c2:	a0 93 04 2e 	sts	0x2E04, r26
    55c6:	b0 93 05 2e 	sts	0x2E05, r27
	
	//anti wind-up
	if(pozicija_greska_sum > 200)
    55ca:	80 91 02 2e 	lds	r24, 0x2E02
    55ce:	90 91 03 2e 	lds	r25, 0x2E03
    55d2:	a0 91 04 2e 	lds	r26, 0x2E04
    55d6:	b0 91 05 2e 	lds	r27, 0x2E05
    55da:	89 3c       	cpi	r24, 0xC9	; 201
    55dc:	91 05       	cpc	r25, r1
    55de:	a1 05       	cpc	r26, r1
    55e0:	b1 05       	cpc	r27, r1
    55e2:	6c f0       	brlt	.+26     	; 0x55fe <PID_pravolinijski+0x118>
		pozicija_greska_sum = 200;
    55e4:	88 ec       	ldi	r24, 0xC8	; 200
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	a0 e0       	ldi	r26, 0x00	; 0
    55ea:	b0 e0       	ldi	r27, 0x00	; 0
    55ec:	80 93 02 2e 	sts	0x2E02, r24
    55f0:	90 93 03 2e 	sts	0x2E03, r25
    55f4:	a0 93 04 2e 	sts	0x2E04, r26
    55f8:	b0 93 05 2e 	sts	0x2E05, r27
    55fc:	19 c0       	rjmp	.+50     	; 0x5630 <PID_pravolinijski+0x14a>
	else if(pozicija_greska_sum < -200)
    55fe:	80 91 02 2e 	lds	r24, 0x2E02
    5602:	90 91 03 2e 	lds	r25, 0x2E03
    5606:	a0 91 04 2e 	lds	r26, 0x2E04
    560a:	b0 91 05 2e 	lds	r27, 0x2E05
    560e:	88 33       	cpi	r24, 0x38	; 56
    5610:	9f 4f       	sbci	r25, 0xFF	; 255
    5612:	af 4f       	sbci	r26, 0xFF	; 255
    5614:	bf 4f       	sbci	r27, 0xFF	; 255
    5616:	64 f4       	brge	.+24     	; 0x5630 <PID_pravolinijski+0x14a>
		pozicija_greska_sum = -200;
    5618:	88 e3       	ldi	r24, 0x38	; 56
    561a:	9f ef       	ldi	r25, 0xFF	; 255
    561c:	af ef       	ldi	r26, 0xFF	; 255
    561e:	bf ef       	ldi	r27, 0xFF	; 255
    5620:	80 93 02 2e 	sts	0x2E02, r24
    5624:	90 93 03 2e 	sts	0x2E03, r25
    5628:	a0 93 04 2e 	sts	0x2E04, r26
    562c:	b0 93 05 2e 	sts	0x2E05, r27
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5630:	60 91 4c 2e 	lds	r22, 0x2E4C
    5634:	70 91 4d 2e 	lds	r23, 0x2E4D
    5638:	80 91 4e 2e 	lds	r24, 0x2E4E
    563c:	90 91 4f 2e 	lds	r25, 0x2E4F
    5640:	80 90 6a 29 	lds	r8, 0x296A
    5644:	90 90 6b 29 	lds	r9, 0x296B
    5648:	a0 90 6c 29 	lds	r10, 0x296C
    564c:	b0 90 6d 29 	lds	r11, 0x296D
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5650:	20 91 f3 2d 	lds	r18, 0x2DF3
    5654:	30 91 f4 2d 	lds	r19, 0x2DF4
    5658:	40 91 f5 2d 	lds	r20, 0x2DF5
    565c:	50 91 f6 2d 	lds	r21, 0x2DF6
    5660:	29 83       	std	Y+1, r18	; 0x01
    5662:	3a 83       	std	Y+2, r19	; 0x02
    5664:	4b 83       	std	Y+3, r20	; 0x03
    5666:	5c 83       	std	Y+4, r21	; 0x04
    5668:	40 90 bf 28 	lds	r4, 0x28BF
    566c:	50 90 c0 28 	lds	r5, 0x28C0
    5670:	60 90 c1 28 	lds	r6, 0x28C1
    5674:	70 90 c2 28 	lds	r7, 0x28C2
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5678:	c0 90 02 2e 	lds	r12, 0x2E02
    567c:	d0 90 03 2e 	lds	r13, 0x2E03
    5680:	e0 90 04 2e 	lds	r14, 0x2E04
    5684:	f0 90 05 2e 	lds	r15, 0x2E05
    5688:	20 91 79 32 	lds	r18, 0x3279
    568c:	30 91 7a 32 	lds	r19, 0x327A
    5690:	40 91 7b 32 	lds	r20, 0x327B
    5694:	50 91 7c 32 	lds	r21, 0x327C
    5698:	2d 83       	std	Y+5, r18	; 0x05
    569a:	3e 83       	std	Y+6, r19	; 0x06
    569c:	4f 83       	std	Y+7, r20	; 0x07
    569e:	58 87       	std	Y+8, r21	; 0x08
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    56a0:	20 91 d3 24 	lds	r18, 0x24D3
    56a4:	30 91 d4 24 	lds	r19, 0x24D4
    56a8:	40 91 d5 24 	lds	r20, 0x24D5
    56ac:	50 91 d6 24 	lds	r21, 0x24D6
    56b0:	29 87       	std	Y+9, r18	; 0x09
    56b2:	3a 87       	std	Y+10, r19	; 0x0a
    56b4:	4b 87       	std	Y+11, r20	; 0x0b
    56b6:	5c 87       	std	Y+12, r21	; 0x0c
    56b8:	00 91 7f 32 	lds	r16, 0x327F
    56bc:	10 91 80 32 	lds	r17, 0x3280
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56c0:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    56c4:	a5 01       	movw	r20, r10
    56c6:	94 01       	movw	r18, r8
    56c8:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    56cc:	4b 01       	movw	r8, r22
    56ce:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    56d0:	69 81       	ldd	r22, Y+1	; 0x01
    56d2:	7a 81       	ldd	r23, Y+2	; 0x02
    56d4:	8b 81       	ldd	r24, Y+3	; 0x03
    56d6:	9c 81       	ldd	r25, Y+4	; 0x04
    56d8:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    56dc:	a3 01       	movw	r20, r6
    56de:	92 01       	movw	r18, r4
    56e0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    56e4:	9b 01       	movw	r18, r22
    56e6:	ac 01       	movw	r20, r24
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56e8:	c5 01       	movw	r24, r10
    56ea:	b4 01       	movw	r22, r8
    56ec:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    56f0:	4b 01       	movw	r8, r22
    56f2:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    56f4:	c7 01       	movw	r24, r14
    56f6:	b6 01       	movw	r22, r12
    56f8:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    56fc:	2d 81       	ldd	r18, Y+5	; 0x05
    56fe:	3e 81       	ldd	r19, Y+6	; 0x06
    5700:	4f 81       	ldd	r20, Y+7	; 0x07
    5702:	58 85       	ldd	r21, Y+8	; 0x08
    5704:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    5708:	9b 01       	movw	r18, r22
    570a:	ac 01       	movw	r20, r24
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    570c:	c5 01       	movw	r24, r10
    570e:	b4 01       	movw	r22, r8
    5710:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    5714:	6b 01       	movw	r12, r22
    5716:	7c 01       	movw	r14, r24
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    5718:	69 85       	ldd	r22, Y+9	; 0x09
    571a:	7a 85       	ldd	r23, Y+10	; 0x0a
    571c:	8b 85       	ldd	r24, Y+11	; 0x0b
    571e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5720:	95 95       	asr	r25
    5722:	87 95       	ror	r24
    5724:	77 95       	ror	r23
    5726:	67 95       	ror	r22
    5728:	98 01       	movw	r18, r16
    572a:	44 27       	eor	r20, r20
    572c:	37 fd       	sbrc	r19, 7
    572e:	40 95       	com	r20
    5730:	54 2f       	mov	r21, r20
    5732:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    5736:	ca 01       	movw	r24, r20
    5738:	b9 01       	movw	r22, r18
    573a:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__floatsisf>
    573e:	9b 01       	movw	r18, r22
    5740:	ac 01       	movw	r20, r24
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5742:	c7 01       	movw	r24, r14
    5744:	b6 01       	movw	r22, r12
    5746:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <__divsf3>
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    574a:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__fixsfsi>
    574e:	60 93 fe 29 	sts	0x29FE, r22
    5752:	70 93 ff 29 	sts	0x29FF, r23
    5756:	80 93 00 2a 	sts	0x2A00, r24
    575a:	90 93 01 2a 	sts	0x2A01, r25
	//if(PID_pozicija < -modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = -modifikovana_zeljena_pravolinijska_brzina;
	//if(PID_pozicija > modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = modifikovana_zeljena_pravolinijska_brzina;
		
	if(PID_pozicija < -zeljena_pravolinijska_brzina)
    575e:	40 91 7f 32 	lds	r20, 0x327F
    5762:	50 91 80 32 	lds	r21, 0x3280
    5766:	80 91 fe 29 	lds	r24, 0x29FE
    576a:	90 91 ff 29 	lds	r25, 0x29FF
    576e:	a0 91 00 2a 	lds	r26, 0x2A00
    5772:	b0 91 01 2a 	lds	r27, 0x2A01
    5776:	51 95       	neg	r21
    5778:	41 95       	neg	r20
    577a:	51 09       	sbc	r21, r1
    577c:	66 27       	eor	r22, r22
    577e:	57 fd       	sbrc	r21, 7
    5780:	60 95       	com	r22
    5782:	76 2f       	mov	r23, r22
    5784:	84 17       	cp	r24, r20
    5786:	95 07       	cpc	r25, r21
    5788:	a6 07       	cpc	r26, r22
    578a:	b7 07       	cpc	r27, r23
    578c:	9c f4       	brge	.+38     	; 0x57b4 <PID_pravolinijski+0x2ce>
		PID_pozicija = -zeljena_pravolinijska_brzina;
    578e:	80 91 7f 32 	lds	r24, 0x327F
    5792:	90 91 80 32 	lds	r25, 0x3280
    5796:	91 95       	neg	r25
    5798:	81 95       	neg	r24
    579a:	91 09       	sbc	r25, r1
    579c:	aa 27       	eor	r26, r26
    579e:	97 fd       	sbrc	r25, 7
    57a0:	a0 95       	com	r26
    57a2:	ba 2f       	mov	r27, r26
    57a4:	80 93 fe 29 	sts	0x29FE, r24
    57a8:	90 93 ff 29 	sts	0x29FF, r25
    57ac:	a0 93 00 2a 	sts	0x2A00, r26
    57b0:	b0 93 01 2a 	sts	0x2A01, r27
	if(PID_pozicija > zeljena_pravolinijska_brzina)
    57b4:	40 91 7f 32 	lds	r20, 0x327F
    57b8:	50 91 80 32 	lds	r21, 0x3280
    57bc:	80 91 fe 29 	lds	r24, 0x29FE
    57c0:	90 91 ff 29 	lds	r25, 0x29FF
    57c4:	a0 91 00 2a 	lds	r26, 0x2A00
    57c8:	b0 91 01 2a 	lds	r27, 0x2A01
    57cc:	66 27       	eor	r22, r22
    57ce:	57 fd       	sbrc	r21, 7
    57d0:	60 95       	com	r22
    57d2:	76 2f       	mov	r23, r22
    57d4:	48 17       	cp	r20, r24
    57d6:	59 07       	cpc	r21, r25
    57d8:	6a 07       	cpc	r22, r26
    57da:	7b 07       	cpc	r23, r27
    57dc:	84 f4       	brge	.+32     	; 0x57fe <PID_pravolinijski+0x318>
		PID_pozicija = zeljena_pravolinijska_brzina;
    57de:	80 91 7f 32 	lds	r24, 0x327F
    57e2:	90 91 80 32 	lds	r25, 0x3280
    57e6:	aa 27       	eor	r26, r26
    57e8:	97 fd       	sbrc	r25, 7
    57ea:	a0 95       	com	r26
    57ec:	ba 2f       	mov	r27, r26
    57ee:	80 93 fe 29 	sts	0x29FE, r24
    57f2:	90 93 ff 29 	sts	0x29FF, r25
    57f6:	a0 93 00 2a 	sts	0x2A00, r26
    57fa:	b0 93 01 2a 	sts	0x2A01, r27
		
		
	//ubrzavanje po rampi
	if(PID_pozicija < 0)
    57fe:	80 91 fe 29 	lds	r24, 0x29FE
    5802:	90 91 ff 29 	lds	r25, 0x29FF
    5806:	a0 91 00 2a 	lds	r26, 0x2A00
    580a:	b0 91 01 2a 	lds	r27, 0x2A01
    580e:	bb 23       	and	r27, r27
    5810:	0c f0       	brlt	.+2      	; 0x5814 <PID_pravolinijski+0x32e>
    5812:	53 c0       	rjmp	.+166    	; 0x58ba <PID_pravolinijski+0x3d4>
	{
		if(PID_pozicija_pret > PID_pozicija)	//UBRZANJE U MINUS
    5814:	40 91 cb 28 	lds	r20, 0x28CB
    5818:	50 91 cc 28 	lds	r21, 0x28CC
    581c:	60 91 cd 28 	lds	r22, 0x28CD
    5820:	70 91 ce 28 	lds	r23, 0x28CE
    5824:	80 91 fe 29 	lds	r24, 0x29FE
    5828:	90 91 ff 29 	lds	r25, 0x29FF
    582c:	a0 91 00 2a 	lds	r26, 0x2A00
    5830:	b0 91 01 2a 	lds	r27, 0x2A01
    5834:	84 17       	cp	r24, r20
    5836:	95 07       	cpc	r25, r21
    5838:	a6 07       	cpc	r26, r22
    583a:	b7 07       	cpc	r27, r23
    583c:	0c f0       	brlt	.+2      	; 0x5840 <PID_pravolinijski+0x35a>
    583e:	8d c0       	rjmp	.+282    	; 0x595a <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    5840:	40 91 fe 29 	lds	r20, 0x29FE
    5844:	50 91 ff 29 	lds	r21, 0x29FF
    5848:	60 91 00 2a 	lds	r22, 0x2A00
    584c:	70 91 01 2a 	lds	r23, 0x2A01
    5850:	80 91 cb 28 	lds	r24, 0x28CB
    5854:	90 91 cc 28 	lds	r25, 0x28CC
    5858:	a0 91 cd 28 	lds	r26, 0x28CD
    585c:	b0 91 ce 28 	lds	r27, 0x28CE
    5860:	20 91 d0 24 	lds	r18, 0x24D0
    5864:	30 91 d1 24 	lds	r19, 0x24D1
    5868:	55 23       	and	r21, r21
    586a:	1c f4       	brge	.+6      	; 0x5872 <PID_pravolinijski+0x38c>
    586c:	51 95       	neg	r21
    586e:	41 95       	neg	r20
    5870:	51 09       	sbc	r21, r1
    5872:	99 23       	and	r25, r25
    5874:	1c f4       	brge	.+6      	; 0x587c <PID_pravolinijski+0x396>
    5876:	91 95       	neg	r25
    5878:	81 95       	neg	r24
    587a:	91 09       	sbc	r25, r1
    587c:	48 1b       	sub	r20, r24
    587e:	59 0b       	sbc	r21, r25
    5880:	24 17       	cp	r18, r20
    5882:	35 07       	cpc	r19, r21
    5884:	08 f0       	brcs	.+2      	; 0x5888 <PID_pravolinijski+0x3a2>
    5886:	69 c0       	rjmp	.+210    	; 0x595a <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret - Accel_PID_pos;
    5888:	80 91 cb 28 	lds	r24, 0x28CB
    588c:	90 91 cc 28 	lds	r25, 0x28CC
    5890:	a0 91 cd 28 	lds	r26, 0x28CD
    5894:	b0 91 ce 28 	lds	r27, 0x28CE
    5898:	20 91 d0 24 	lds	r18, 0x24D0
    589c:	30 91 d1 24 	lds	r19, 0x24D1
    58a0:	82 1b       	sub	r24, r18
    58a2:	93 0b       	sbc	r25, r19
    58a4:	a1 09       	sbc	r26, r1
    58a6:	b1 09       	sbc	r27, r1
    58a8:	80 93 fe 29 	sts	0x29FE, r24
    58ac:	90 93 ff 29 	sts	0x29FF, r25
    58b0:	a0 93 00 2a 	sts	0x2A00, r26
    58b4:	b0 93 01 2a 	sts	0x2A01, r27
    58b8:	50 c0       	rjmp	.+160    	; 0x595a <PID_pravolinijski+0x474>
		}
	}
	else
	{
		if(PID_pozicija_pret < PID_pozicija)	//UBRZANJE U PLUS
    58ba:	40 91 cb 28 	lds	r20, 0x28CB
    58be:	50 91 cc 28 	lds	r21, 0x28CC
    58c2:	60 91 cd 28 	lds	r22, 0x28CD
    58c6:	70 91 ce 28 	lds	r23, 0x28CE
    58ca:	80 91 fe 29 	lds	r24, 0x29FE
    58ce:	90 91 ff 29 	lds	r25, 0x29FF
    58d2:	a0 91 00 2a 	lds	r26, 0x2A00
    58d6:	b0 91 01 2a 	lds	r27, 0x2A01
    58da:	48 17       	cp	r20, r24
    58dc:	59 07       	cpc	r21, r25
    58de:	6a 07       	cpc	r22, r26
    58e0:	7b 07       	cpc	r23, r27
    58e2:	dc f5       	brge	.+118    	; 0x595a <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    58e4:	40 91 fe 29 	lds	r20, 0x29FE
    58e8:	50 91 ff 29 	lds	r21, 0x29FF
    58ec:	60 91 00 2a 	lds	r22, 0x2A00
    58f0:	70 91 01 2a 	lds	r23, 0x2A01
    58f4:	80 91 cb 28 	lds	r24, 0x28CB
    58f8:	90 91 cc 28 	lds	r25, 0x28CC
    58fc:	a0 91 cd 28 	lds	r26, 0x28CD
    5900:	b0 91 ce 28 	lds	r27, 0x28CE
    5904:	20 91 d0 24 	lds	r18, 0x24D0
    5908:	30 91 d1 24 	lds	r19, 0x24D1
    590c:	55 23       	and	r21, r21
    590e:	1c f4       	brge	.+6      	; 0x5916 <PID_pravolinijski+0x430>
    5910:	51 95       	neg	r21
    5912:	41 95       	neg	r20
    5914:	51 09       	sbc	r21, r1
    5916:	99 23       	and	r25, r25
    5918:	1c f4       	brge	.+6      	; 0x5920 <PID_pravolinijski+0x43a>
    591a:	91 95       	neg	r25
    591c:	81 95       	neg	r24
    591e:	91 09       	sbc	r25, r1
    5920:	48 1b       	sub	r20, r24
    5922:	59 0b       	sbc	r21, r25
    5924:	24 17       	cp	r18, r20
    5926:	35 07       	cpc	r19, r21
    5928:	c0 f4       	brcc	.+48     	; 0x595a <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret + Accel_PID_pos;
    592a:	20 91 d0 24 	lds	r18, 0x24D0
    592e:	30 91 d1 24 	lds	r19, 0x24D1
    5932:	80 91 cb 28 	lds	r24, 0x28CB
    5936:	90 91 cc 28 	lds	r25, 0x28CC
    593a:	a0 91 cd 28 	lds	r26, 0x28CD
    593e:	b0 91 ce 28 	lds	r27, 0x28CE
    5942:	82 0f       	add	r24, r18
    5944:	93 1f       	adc	r25, r19
    5946:	a1 1d       	adc	r26, r1
    5948:	b1 1d       	adc	r27, r1
    594a:	80 93 fe 29 	sts	0x29FE, r24
    594e:	90 93 ff 29 	sts	0x29FF, r25
    5952:	a0 93 00 2a 	sts	0x2A00, r26
    5956:	b0 93 01 2a 	sts	0x2A01, r27
		}
	}
	PID_pozicija_pret = PID_pozicija;
    595a:	80 91 fe 29 	lds	r24, 0x29FE
    595e:	90 91 ff 29 	lds	r25, 0x29FF
    5962:	a0 91 00 2a 	lds	r26, 0x2A00
    5966:	b0 91 01 2a 	lds	r27, 0x2A01
    596a:	80 93 cb 28 	sts	0x28CB, r24
    596e:	90 93 cc 28 	sts	0x28CC, r25
    5972:	a0 93 cd 28 	sts	0x28CD, r26
    5976:	b0 93 ce 28 	sts	0x28CE, r27
}
    597a:	2c 96       	adiw	r28, 0x0c	; 12
    597c:	cd bf       	out	0x3d, r28	; 61
    597e:	de bf       	out	0x3e, r29	; 62
    5980:	df 91       	pop	r29
    5982:	cf 91       	pop	r28
    5984:	1f 91       	pop	r17
    5986:	0f 91       	pop	r16
    5988:	ff 90       	pop	r15
    598a:	ef 90       	pop	r14
    598c:	df 90       	pop	r13
    598e:	cf 90       	pop	r12
    5990:	bf 90       	pop	r11
    5992:	af 90       	pop	r10
    5994:	9f 90       	pop	r9
    5996:	8f 90       	pop	r8
    5998:	7f 90       	pop	r7
    599a:	6f 90       	pop	r6
    599c:	5f 90       	pop	r5
    599e:	4f 90       	pop	r4
    59a0:	08 95       	ret

000059a2 <PID_ugaoni>:

void PID_ugaoni(void)
{	
    59a2:	4f 92       	push	r4
    59a4:	5f 92       	push	r5
    59a6:	6f 92       	push	r6
    59a8:	7f 92       	push	r7
    59aa:	8f 92       	push	r8
    59ac:	9f 92       	push	r9
    59ae:	af 92       	push	r10
    59b0:	bf 92       	push	r11
    59b2:	cf 92       	push	r12
    59b4:	df 92       	push	r13
    59b6:	ef 92       	push	r14
    59b8:	ff 92       	push	r15
    59ba:	0f 93       	push	r16
    59bc:	1f 93       	push	r17
    59be:	cf 93       	push	r28
    59c0:	df 93       	push	r29
    59c2:	cd b7       	in	r28, 0x3d	; 61
    59c4:	de b7       	in	r29, 0x3e	; 62
    59c6:	2c 97       	sbiw	r28, 0x0c	; 12
    59c8:	cd bf       	out	0x3d, r28	; 61
    59ca:	de bf       	out	0x3e, r29	; 62
	teta_greska = teta_cilj - teta;
    59cc:	80 91 cc 24 	lds	r24, 0x24CC
    59d0:	90 91 cd 24 	lds	r25, 0x24CD
    59d4:	a0 91 ce 24 	lds	r26, 0x24CE
    59d8:	b0 91 cf 24 	lds	r27, 0x24CF
    59dc:	40 91 83 32 	lds	r20, 0x3283
    59e0:	50 91 84 32 	lds	r21, 0x3284
    59e4:	60 91 85 32 	lds	r22, 0x3285
    59e8:	70 91 86 32 	lds	r23, 0x3286
    59ec:	84 1b       	sub	r24, r20
    59ee:	95 0b       	sbc	r25, r21
    59f0:	a6 0b       	sbc	r26, r22
    59f2:	b7 0b       	sbc	r27, r23
    59f4:	80 93 74 2e 	sts	0x2E74, r24
    59f8:	90 93 75 2e 	sts	0x2E75, r25
    59fc:	a0 93 76 2e 	sts	0x2E76, r26
    5a00:	b0 93 77 2e 	sts	0x2E77, r27
	
	dif_error_ugao = teta_greska - teta_greska_prethodno; // D dejstvo
    5a04:	80 91 74 2e 	lds	r24, 0x2E74
    5a08:	90 91 75 2e 	lds	r25, 0x2E75
    5a0c:	a0 91 76 2e 	lds	r26, 0x2E76
    5a10:	b0 91 77 2e 	lds	r27, 0x2E77
    5a14:	40 91 ee 2d 	lds	r20, 0x2DEE
    5a18:	50 91 ef 2d 	lds	r21, 0x2DEF
    5a1c:	60 91 f0 2d 	lds	r22, 0x2DF0
    5a20:	70 91 f1 2d 	lds	r23, 0x2DF1
    5a24:	84 1b       	sub	r24, r20
    5a26:	95 0b       	sbc	r25, r21
    5a28:	a6 0b       	sbc	r26, r22
    5a2a:	b7 0b       	sbc	r27, r23
    5a2c:	80 93 3b 2e 	sts	0x2E3B, r24
    5a30:	90 93 3c 2e 	sts	0x2E3C, r25
    5a34:	a0 93 3d 2e 	sts	0x2E3D, r26
    5a38:	b0 93 3e 2e 	sts	0x2E3E, r27
	teta_greska_prethodno = teta_greska; //D dejstvo
    5a3c:	80 91 74 2e 	lds	r24, 0x2E74
    5a40:	90 91 75 2e 	lds	r25, 0x2E75
    5a44:	a0 91 76 2e 	lds	r26, 0x2E76
    5a48:	b0 91 77 2e 	lds	r27, 0x2E77
    5a4c:	80 93 ee 2d 	sts	0x2DEE, r24
    5a50:	90 93 ef 2d 	sts	0x2DEF, r25
    5a54:	a0 93 f0 2d 	sts	0x2DF0, r26
    5a58:	b0 93 f1 2d 	sts	0x2DF1, r27
	
	//korigovanje greske, da bi se roobot uvek okretao u blizem smeru
	if(teta_greska < -krug180)
    5a5c:	40 91 cf 28 	lds	r20, 0x28CF
    5a60:	50 91 d0 28 	lds	r21, 0x28D0
    5a64:	60 91 d1 28 	lds	r22, 0x28D1
    5a68:	70 91 d2 28 	lds	r23, 0x28D2
    5a6c:	80 91 74 2e 	lds	r24, 0x2E74
    5a70:	90 91 75 2e 	lds	r25, 0x2E75
    5a74:	a0 91 76 2e 	lds	r26, 0x2E76
    5a78:	b0 91 77 2e 	lds	r27, 0x2E77
    5a7c:	70 95       	com	r23
    5a7e:	60 95       	com	r22
    5a80:	50 95       	com	r21
    5a82:	41 95       	neg	r20
    5a84:	5f 4f       	sbci	r21, 0xFF	; 255
    5a86:	6f 4f       	sbci	r22, 0xFF	; 255
    5a88:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8a:	84 17       	cp	r24, r20
    5a8c:	95 07       	cpc	r25, r21
    5a8e:	a6 07       	cpc	r26, r22
    5a90:	b7 07       	cpc	r27, r23
    5a92:	ec f4       	brge	.+58     	; 0x5ace <PID_ugaoni+0x12c>
		teta_greska += krug360;
    5a94:	40 91 74 2e 	lds	r20, 0x2E74
    5a98:	50 91 75 2e 	lds	r21, 0x2E75
    5a9c:	60 91 76 2e 	lds	r22, 0x2E76
    5aa0:	70 91 77 2e 	lds	r23, 0x2E77
    5aa4:	80 91 75 32 	lds	r24, 0x3275
    5aa8:	90 91 76 32 	lds	r25, 0x3276
    5aac:	a0 91 77 32 	lds	r26, 0x3277
    5ab0:	b0 91 78 32 	lds	r27, 0x3278
    5ab4:	84 0f       	add	r24, r20
    5ab6:	95 1f       	adc	r25, r21
    5ab8:	a6 1f       	adc	r26, r22
    5aba:	b7 1f       	adc	r27, r23
    5abc:	80 93 74 2e 	sts	0x2E74, r24
    5ac0:	90 93 75 2e 	sts	0x2E75, r25
    5ac4:	a0 93 76 2e 	sts	0x2E76, r26
    5ac8:	b0 93 77 2e 	sts	0x2E77, r27
    5acc:	31 c0       	rjmp	.+98     	; 0x5b30 <PID_ugaoni+0x18e>
	else if(teta_greska > krug180)
    5ace:	40 91 74 2e 	lds	r20, 0x2E74
    5ad2:	50 91 75 2e 	lds	r21, 0x2E75
    5ad6:	60 91 76 2e 	lds	r22, 0x2E76
    5ada:	70 91 77 2e 	lds	r23, 0x2E77
    5ade:	80 91 cf 28 	lds	r24, 0x28CF
    5ae2:	90 91 d0 28 	lds	r25, 0x28D0
    5ae6:	a0 91 d1 28 	lds	r26, 0x28D1
    5aea:	b0 91 d2 28 	lds	r27, 0x28D2
    5aee:	84 17       	cp	r24, r20
    5af0:	95 07       	cpc	r25, r21
    5af2:	a6 07       	cpc	r26, r22
    5af4:	b7 07       	cpc	r27, r23
    5af6:	e4 f4       	brge	.+56     	; 0x5b30 <PID_ugaoni+0x18e>
		teta_greska -= krug360;
    5af8:	80 91 74 2e 	lds	r24, 0x2E74
    5afc:	90 91 75 2e 	lds	r25, 0x2E75
    5b00:	a0 91 76 2e 	lds	r26, 0x2E76
    5b04:	b0 91 77 2e 	lds	r27, 0x2E77
    5b08:	40 91 75 32 	lds	r20, 0x3275
    5b0c:	50 91 76 32 	lds	r21, 0x3276
    5b10:	60 91 77 32 	lds	r22, 0x3277
    5b14:	70 91 78 32 	lds	r23, 0x3278
    5b18:	84 1b       	sub	r24, r20
    5b1a:	95 0b       	sbc	r25, r21
    5b1c:	a6 0b       	sbc	r26, r22
    5b1e:	b7 0b       	sbc	r27, r23
    5b20:	80 93 74 2e 	sts	0x2E74, r24
    5b24:	90 93 75 2e 	sts	0x2E75, r25
    5b28:	a0 93 76 2e 	sts	0x2E76, r26
    5b2c:	b0 93 77 2e 	sts	0x2E77, r27
		
	teta_greska_sum += teta_greska;
    5b30:	40 91 27 2e 	lds	r20, 0x2E27
    5b34:	50 91 28 2e 	lds	r21, 0x2E28
    5b38:	60 91 29 2e 	lds	r22, 0x2E29
    5b3c:	70 91 2a 2e 	lds	r23, 0x2E2A
    5b40:	80 91 74 2e 	lds	r24, 0x2E74
    5b44:	90 91 75 2e 	lds	r25, 0x2E75
    5b48:	a0 91 76 2e 	lds	r26, 0x2E76
    5b4c:	b0 91 77 2e 	lds	r27, 0x2E77
    5b50:	84 0f       	add	r24, r20
    5b52:	95 1f       	adc	r25, r21
    5b54:	a6 1f       	adc	r26, r22
    5b56:	b7 1f       	adc	r27, r23
    5b58:	80 93 27 2e 	sts	0x2E27, r24
    5b5c:	90 93 28 2e 	sts	0x2E28, r25
    5b60:	a0 93 29 2e 	sts	0x2E29, r26
    5b64:	b0 93 2a 2e 	sts	0x2E2A, r27
	
	//anti wind-up
	if(teta_greska_sum > 200)
    5b68:	80 91 27 2e 	lds	r24, 0x2E27
    5b6c:	90 91 28 2e 	lds	r25, 0x2E28
    5b70:	a0 91 29 2e 	lds	r26, 0x2E29
    5b74:	b0 91 2a 2e 	lds	r27, 0x2E2A
    5b78:	89 3c       	cpi	r24, 0xC9	; 201
    5b7a:	91 05       	cpc	r25, r1
    5b7c:	a1 05       	cpc	r26, r1
    5b7e:	b1 05       	cpc	r27, r1
    5b80:	6c f0       	brlt	.+26     	; 0x5b9c <PID_ugaoni+0x1fa>
		teta_greska_sum = 200;
    5b82:	88 ec       	ldi	r24, 0xC8	; 200
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	a0 e0       	ldi	r26, 0x00	; 0
    5b88:	b0 e0       	ldi	r27, 0x00	; 0
    5b8a:	80 93 27 2e 	sts	0x2E27, r24
    5b8e:	90 93 28 2e 	sts	0x2E28, r25
    5b92:	a0 93 29 2e 	sts	0x2E29, r26
    5b96:	b0 93 2a 2e 	sts	0x2E2A, r27
    5b9a:	19 c0       	rjmp	.+50     	; 0x5bce <PID_ugaoni+0x22c>
	else if(teta_greska_sum < -200)
    5b9c:	80 91 27 2e 	lds	r24, 0x2E27
    5ba0:	90 91 28 2e 	lds	r25, 0x2E28
    5ba4:	a0 91 29 2e 	lds	r26, 0x2E29
    5ba8:	b0 91 2a 2e 	lds	r27, 0x2E2A
    5bac:	88 33       	cpi	r24, 0x38	; 56
    5bae:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb0:	af 4f       	sbci	r26, 0xFF	; 255
    5bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    5bb4:	64 f4       	brge	.+24     	; 0x5bce <PID_ugaoni+0x22c>
		teta_greska_sum = -200;
    5bb6:	88 e3       	ldi	r24, 0x38	; 56
    5bb8:	9f ef       	ldi	r25, 0xFF	; 255
    5bba:	af ef       	ldi	r26, 0xFF	; 255
    5bbc:	bf ef       	ldi	r27, 0xFF	; 255
    5bbe:	80 93 27 2e 	sts	0x2E27, r24
    5bc2:	90 93 28 2e 	sts	0x2E28, r25
    5bc6:	a0 93 29 2e 	sts	0x2E29, r26
    5bca:	b0 93 2a 2e 	sts	0x2E2A, r27
	
	//podesavanje pravca robota dok ne stigne u blizinu cilja
	if(rastojanje_cilj_temp > metar/10)  /// bilo /10 ? 
    5bce:	60 91 d3 24 	lds	r22, 0x24D3
    5bd2:	70 91 d4 24 	lds	r23, 0x24D4
    5bd6:	80 91 d5 24 	lds	r24, 0x24D5
    5bda:	90 91 d6 24 	lds	r25, 0x24D6
    5bde:	c0 90 12 2e 	lds	r12, 0x2E12
    5be2:	d0 90 13 2e 	lds	r13, 0x2E13
    5be6:	e0 90 14 2e 	lds	r14, 0x2E14
    5bea:	f0 90 15 2e 	lds	r15, 0x2E15
    5bee:	2a e0       	ldi	r18, 0x0A	; 10
    5bf0:	30 e0       	ldi	r19, 0x00	; 0
    5bf2:	40 e0       	ldi	r20, 0x00	; 0
    5bf4:	50 e0       	ldi	r21, 0x00	; 0
    5bf6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
    5bfa:	2c 15       	cp	r18, r12
    5bfc:	3d 05       	cpc	r19, r13
    5bfe:	4e 05       	cpc	r20, r14
    5c00:	5f 05       	cpc	r21, r15
    5c02:	0c f0       	brlt	.+2      	; 0x5c06 <PID_ugaoni+0x264>
    5c04:	59 c0       	rjmp	.+178    	; 0x5cb8 <PID_ugaoni+0x316>
	{
		if(labs(teta_greska) > rezervni_ugao)	//okrecemo se u mestu kad treba
    5c06:	40 91 74 2e 	lds	r20, 0x2E74
    5c0a:	50 91 75 2e 	lds	r21, 0x2E75
    5c0e:	60 91 76 2e 	lds	r22, 0x2E76
    5c12:	70 91 77 2e 	lds	r23, 0x2E77
    5c16:	20 91 2f 2e 	lds	r18, 0x2E2F
    5c1a:	30 91 30 2e 	lds	r19, 0x2E30
    5c1e:	db 01       	movw	r26, r22
    5c20:	ca 01       	movw	r24, r20
    5c22:	77 23       	and	r23, r23
    5c24:	3c f4       	brge	.+14     	; 0x5c34 <PID_ugaoni+0x292>
    5c26:	88 27       	eor	r24, r24
    5c28:	99 27       	eor	r25, r25
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	84 1b       	sub	r24, r20
    5c2e:	95 0b       	sbc	r25, r21
    5c30:	a6 0b       	sbc	r26, r22
    5c32:	b7 0b       	sbc	r27, r23
    5c34:	a9 01       	movw	r20, r18
    5c36:	66 27       	eor	r22, r22
    5c38:	57 fd       	sbrc	r21, 7
    5c3a:	60 95       	com	r22
    5c3c:	76 2f       	mov	r23, r22
    5c3e:	48 17       	cp	r20, r24
    5c40:	59 07       	cpc	r21, r25
    5c42:	6a 07       	cpc	r22, r26
    5c44:	7b 07       	cpc	r23, r27
    5c46:	ac f4       	brge	.+42     	; 0x5c72 <PID_ugaoni+0x2d0>
		{
			modifikovana_zeljena_pravolinijska_brzina = 0;	//zaustavlja se robot za okretanje u mestu
    5c48:	10 92 b2 24 	sts	0x24B2, r1
    5c4c:	10 92 b3 24 	sts	0x24B3, r1
			rezervni_ugao = krug45;
    5c50:	80 91 c8 24 	lds	r24, 0x24C8
    5c54:	90 91 c9 24 	lds	r25, 0x24C9
    5c58:	a0 91 ca 24 	lds	r26, 0x24CA
    5c5c:	b0 91 cb 24 	lds	r27, 0x24CB
    5c60:	80 93 2f 2e 	sts	0x2E2F, r24
    5c64:	90 93 30 2e 	sts	0x2E30, r25
			vreme_cekanja_tete = 0;
    5c68:	10 92 64 29 	sts	0x2964, r1
    5c6c:	10 92 65 29 	sts	0x2965, r1
    5c70:	23 c0       	rjmp	.+70     	; 0x5cb8 <PID_ugaoni+0x316>
		}
		else if(vreme_cekanja_tete >= 300)
    5c72:	80 91 64 29 	lds	r24, 0x2964
    5c76:	90 91 65 29 	lds	r25, 0x2965
    5c7a:	8c 32       	cpi	r24, 0x2C	; 44
    5c7c:	91 40       	sbci	r25, 0x01	; 1
    5c7e:	e0 f0       	brcs	.+56     	; 0x5cb8 <PID_ugaoni+0x316>
		{
			vreme_cekanja_tete = 0;
    5c80:	10 92 64 29 	sts	0x2964, r1
    5c84:	10 92 65 29 	sts	0x2965, r1
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
    5c88:	80 91 7f 32 	lds	r24, 0x327F
    5c8c:	90 91 80 32 	lds	r25, 0x3280
    5c90:	80 93 b2 24 	sts	0x24B2, r24
    5c94:	90 93 b3 24 	sts	0x24B3, r25
			Kp_teta=Kp_teta_pravolinijski;
    5c98:	80 91 fc 2d 	lds	r24, 0x2DFC
    5c9c:	90 91 fd 2d 	lds	r25, 0x2DFD
    5ca0:	a0 91 fe 2d 	lds	r26, 0x2DFE
    5ca4:	b0 91 ff 2d 	lds	r27, 0x2DFF
    5ca8:	80 93 89 32 	sts	0x3289, r24
    5cac:	90 93 8a 32 	sts	0x328A, r25
    5cb0:	a0 93 8b 32 	sts	0x328B, r26
    5cb4:	b0 93 8c 32 	sts	0x328C, r27
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5cb8:	60 91 74 2e 	lds	r22, 0x2E74
    5cbc:	70 91 75 2e 	lds	r23, 0x2E75
    5cc0:	80 91 76 2e 	lds	r24, 0x2E76
    5cc4:	90 91 77 2e 	lds	r25, 0x2E77
    5cc8:	80 90 89 32 	lds	r8, 0x3289
    5ccc:	90 90 8a 32 	lds	r9, 0x328A
    5cd0:	a0 90 8b 32 	lds	r10, 0x328B
    5cd4:	b0 90 8c 32 	lds	r11, 0x328C
				(float)(dif_error_ugao * Kd_teta) +
    5cd8:	20 91 3b 2e 	lds	r18, 0x2E3B
    5cdc:	30 91 3c 2e 	lds	r19, 0x2E3C
    5ce0:	40 91 3d 2e 	lds	r20, 0x2E3D
    5ce4:	50 91 3e 2e 	lds	r21, 0x2E3E
    5ce8:	29 83       	std	Y+1, r18	; 0x01
    5cea:	3a 83       	std	Y+2, r19	; 0x02
    5cec:	4b 83       	std	Y+3, r20	; 0x03
    5cee:	5c 83       	std	Y+4, r21	; 0x04
    5cf0:	40 90 a2 24 	lds	r4, 0x24A2
    5cf4:	50 90 a3 24 	lds	r5, 0x24A3
    5cf8:	60 90 a4 24 	lds	r6, 0x24A4
    5cfc:	70 90 a5 24 	lds	r7, 0x24A5
				(float)(teta_greska_sum * Ki_teta)) / 
    5d00:	c0 90 27 2e 	lds	r12, 0x2E27
    5d04:	d0 90 28 2e 	lds	r13, 0x2E28
    5d08:	e0 90 29 2e 	lds	r14, 0x2E29
    5d0c:	f0 90 2a 2e 	lds	r15, 0x2E2A
    5d10:	20 91 a8 24 	lds	r18, 0x24A8
    5d14:	30 91 a9 24 	lds	r19, 0x24A9
    5d18:	40 91 aa 24 	lds	r20, 0x24AA
    5d1c:	50 91 ab 24 	lds	r21, 0x24AB
    5d20:	2d 83       	std	Y+5, r18	; 0x05
    5d22:	3e 83       	std	Y+6, r19	; 0x06
    5d24:	4f 83       	std	Y+7, r20	; 0x07
    5d26:	58 87       	std	Y+8, r21	; 0x08
				(krug90 / zeljena_brzina_okretanja);
    5d28:	20 91 7e 2e 	lds	r18, 0x2E7E
    5d2c:	30 91 7f 2e 	lds	r19, 0x2E7F
    5d30:	40 91 80 2e 	lds	r20, 0x2E80
    5d34:	50 91 81 2e 	lds	r21, 0x2E81
    5d38:	29 87       	std	Y+9, r18	; 0x09
    5d3a:	3a 87       	std	Y+10, r19	; 0x0a
    5d3c:	4b 87       	std	Y+11, r20	; 0x0b
    5d3e:	5c 87       	std	Y+12, r21	; 0x0c
    5d40:	00 91 61 2e 	lds	r16, 0x2E61
    5d44:	10 91 62 2e 	lds	r17, 0x2E62
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d48:	a6 d7       	rcall	.+3916   	; 0x6c96 <__floatsisf>
    5d4a:	a5 01       	movw	r20, r10
    5d4c:	94 01       	movw	r18, r8
    5d4e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    5d52:	4b 01       	movw	r8, r22
    5d54:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
    5d56:	69 81       	ldd	r22, Y+1	; 0x01
    5d58:	7a 81       	ldd	r23, Y+2	; 0x02
    5d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d5e:	9b d7       	rcall	.+3894   	; 0x6c96 <__floatsisf>
    5d60:	a3 01       	movw	r20, r6
    5d62:	92 01       	movw	r18, r4
    5d64:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    5d68:	9b 01       	movw	r18, r22
    5d6a:	ac 01       	movw	r20, r24
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d6c:	c5 01       	movw	r24, r10
    5d6e:	b4 01       	movw	r22, r8
    5d70:	2a d6       	rcall	.+3156   	; 0x69c6 <__addsf3>
    5d72:	4b 01       	movw	r8, r22
    5d74:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5d76:	c7 01       	movw	r24, r14
    5d78:	b6 01       	movw	r22, r12
    5d7a:	8d d7       	rcall	.+3866   	; 0x6c96 <__floatsisf>
    5d7c:	2d 81       	ldd	r18, Y+5	; 0x05
    5d7e:	3e 81       	ldd	r19, Y+6	; 0x06
    5d80:	4f 81       	ldd	r20, Y+7	; 0x07
    5d82:	58 85       	ldd	r21, Y+8	; 0x08
    5d84:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__mulsf3>
    5d88:	9b 01       	movw	r18, r22
    5d8a:	ac 01       	movw	r20, r24
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
    5d8c:	c5 01       	movw	r24, r10
    5d8e:	b4 01       	movw	r22, r8
    5d90:	1a d6       	rcall	.+3124   	; 0x69c6 <__addsf3>
    5d92:	6b 01       	movw	r12, r22
    5d94:	7c 01       	movw	r14, r24
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
    5d96:	98 01       	movw	r18, r16
    5d98:	44 27       	eor	r20, r20
    5d9a:	37 fd       	sbrc	r19, 7
    5d9c:	40 95       	com	r20
    5d9e:	54 2f       	mov	r21, r20
    5da0:	69 85       	ldd	r22, Y+9	; 0x09
    5da2:	7a 85       	ldd	r23, Y+10	; 0x0a
    5da4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5da6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5da8:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <__divmodsi4>
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5dac:	ca 01       	movw	r24, r20
    5dae:	b9 01       	movw	r22, r18
    5db0:	72 d7       	rcall	.+3812   	; 0x6c96 <__floatsisf>
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	c7 01       	movw	r24, r14
    5db8:	b6 01       	movw	r22, r12
    5dba:	d2 d6       	rcall	.+3492   	; 0x6b60 <__divsf3>
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5dbc:	39 d7       	rcall	.+3698   	; 0x6c30 <__fixsfsi>
    5dbe:	60 93 54 2e 	sts	0x2E54, r22
    5dc2:	70 93 55 2e 	sts	0x2E55, r23
    5dc6:	80 93 56 2e 	sts	0x2E56, r24
    5dca:	90 93 57 2e 	sts	0x2E57, r25
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
	
	if(PID_teta < -zeljena_brzina_okretanja)
    5dce:	40 91 61 2e 	lds	r20, 0x2E61
    5dd2:	50 91 62 2e 	lds	r21, 0x2E62
    5dd6:	80 91 54 2e 	lds	r24, 0x2E54
    5dda:	90 91 55 2e 	lds	r25, 0x2E55
    5dde:	a0 91 56 2e 	lds	r26, 0x2E56
    5de2:	b0 91 57 2e 	lds	r27, 0x2E57
    5de6:	51 95       	neg	r21
    5de8:	41 95       	neg	r20
    5dea:	51 09       	sbc	r21, r1
    5dec:	66 27       	eor	r22, r22
    5dee:	57 fd       	sbrc	r21, 7
    5df0:	60 95       	com	r22
    5df2:	76 2f       	mov	r23, r22
    5df4:	84 17       	cp	r24, r20
    5df6:	95 07       	cpc	r25, r21
    5df8:	a6 07       	cpc	r26, r22
    5dfa:	b7 07       	cpc	r27, r23
    5dfc:	9c f4       	brge	.+38     	; 0x5e24 <PID_ugaoni+0x482>
		PID_teta = -zeljena_brzina_okretanja;
    5dfe:	80 91 61 2e 	lds	r24, 0x2E61
    5e02:	90 91 62 2e 	lds	r25, 0x2E62
    5e06:	91 95       	neg	r25
    5e08:	81 95       	neg	r24
    5e0a:	91 09       	sbc	r25, r1
    5e0c:	aa 27       	eor	r26, r26
    5e0e:	97 fd       	sbrc	r25, 7
    5e10:	a0 95       	com	r26
    5e12:	ba 2f       	mov	r27, r26
    5e14:	80 93 54 2e 	sts	0x2E54, r24
    5e18:	90 93 55 2e 	sts	0x2E55, r25
    5e1c:	a0 93 56 2e 	sts	0x2E56, r26
    5e20:	b0 93 57 2e 	sts	0x2E57, r27
	if(PID_teta > zeljena_brzina_okretanja)
    5e24:	40 91 61 2e 	lds	r20, 0x2E61
    5e28:	50 91 62 2e 	lds	r21, 0x2E62
    5e2c:	80 91 54 2e 	lds	r24, 0x2E54
    5e30:	90 91 55 2e 	lds	r25, 0x2E55
    5e34:	a0 91 56 2e 	lds	r26, 0x2E56
    5e38:	b0 91 57 2e 	lds	r27, 0x2E57
    5e3c:	66 27       	eor	r22, r22
    5e3e:	57 fd       	sbrc	r21, 7
    5e40:	60 95       	com	r22
    5e42:	76 2f       	mov	r23, r22
    5e44:	48 17       	cp	r20, r24
    5e46:	59 07       	cpc	r21, r25
    5e48:	6a 07       	cpc	r22, r26
    5e4a:	7b 07       	cpc	r23, r27
    5e4c:	84 f4       	brge	.+32     	; 0x5e6e <PID_ugaoni+0x4cc>
		PID_teta = zeljena_brzina_okretanja;
    5e4e:	80 91 61 2e 	lds	r24, 0x2E61
    5e52:	90 91 62 2e 	lds	r25, 0x2E62
    5e56:	aa 27       	eor	r26, r26
    5e58:	97 fd       	sbrc	r25, 7
    5e5a:	a0 95       	com	r26
    5e5c:	ba 2f       	mov	r27, r26
    5e5e:	80 93 54 2e 	sts	0x2E54, r24
    5e62:	90 93 55 2e 	sts	0x2E55, r25
    5e66:	a0 93 56 2e 	sts	0x2E56, r26
    5e6a:	b0 93 57 2e 	sts	0x2E57, r27
}
    5e6e:	2c 96       	adiw	r28, 0x0c	; 12
    5e70:	cd bf       	out	0x3d, r28	; 61
    5e72:	de bf       	out	0x3e, r29	; 62
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	1f 91       	pop	r17
    5e7a:	0f 91       	pop	r16
    5e7c:	ff 90       	pop	r15
    5e7e:	ef 90       	pop	r14
    5e80:	df 90       	pop	r13
    5e82:	cf 90       	pop	r12
    5e84:	bf 90       	pop	r11
    5e86:	af 90       	pop	r10
    5e88:	9f 90       	pop	r9
    5e8a:	8f 90       	pop	r8
    5e8c:	7f 90       	pop	r7
    5e8e:	6f 90       	pop	r6
    5e90:	5f 90       	pop	r5
    5e92:	4f 90       	pop	r4
    5e94:	08 95       	ret

00005e96 <PID_brzinski>:

void PID_brzinski(void)
{
    5e96:	4f 92       	push	r4
    5e98:	5f 92       	push	r5
    5e9a:	6f 92       	push	r6
    5e9c:	7f 92       	push	r7
    5e9e:	8f 92       	push	r8
    5ea0:	9f 92       	push	r9
    5ea2:	af 92       	push	r10
    5ea4:	bf 92       	push	r11
    5ea6:	cf 92       	push	r12
    5ea8:	df 92       	push	r13
    5eaa:	ef 92       	push	r14
    5eac:	ff 92       	push	r15
    5eae:	0f 93       	push	r16
    5eb0:	1f 93       	push	r17
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
	//////////////PID//////////////////
	//ako nema stop signala, postavlja se izlaz
	
	if((stop_PID_levi == 0) && (set_direct_out == 0))
    5eb6:	80 91 f2 2d 	lds	r24, 0x2DF2
    5eba:	81 11       	cpse	r24, r1
    5ebc:	1a c0       	rjmp	.+52     	; 0x5ef2 <PID_brzinski+0x5c>
    5ebe:	80 91 81 32 	lds	r24, 0x3281
    5ec2:	81 11       	cpse	r24, r1
    5ec4:	16 c0       	rjmp	.+44     	; 0x5ef2 <PID_brzinski+0x5c>
		PID_brzina_L = (PID_pozicija - PID_teta);
    5ec6:	40 91 fe 29 	lds	r20, 0x29FE
    5eca:	50 91 ff 29 	lds	r21, 0x29FF
    5ece:	60 91 00 2a 	lds	r22, 0x2A00
    5ed2:	70 91 01 2a 	lds	r23, 0x2A01
    5ed6:	80 91 54 2e 	lds	r24, 0x2E54
    5eda:	90 91 55 2e 	lds	r25, 0x2E55
    5ede:	a0 91 56 2e 	lds	r26, 0x2E56
    5ee2:	b0 91 57 2e 	lds	r27, 0x2E57
    5ee6:	48 1b       	sub	r20, r24
    5ee8:	59 0b       	sbc	r21, r25
    5eea:	40 93 7b 2e 	sts	0x2E7B, r20
    5eee:	50 93 7c 2e 	sts	0x2E7C, r21
	if((stop_PID_desni == 0) && (set_direct_out == 0))
    5ef2:	80 91 f4 29 	lds	r24, 0x29F4
    5ef6:	81 11       	cpse	r24, r1
    5ef8:	1a c0       	rjmp	.+52     	; 0x5f2e <PID_brzinski+0x98>
    5efa:	80 91 81 32 	lds	r24, 0x3281
    5efe:	81 11       	cpse	r24, r1
    5f00:	16 c0       	rjmp	.+44     	; 0x5f2e <PID_brzinski+0x98>
		PID_brzina_R = (PID_pozicija + PID_teta); //+
    5f02:	80 91 fe 29 	lds	r24, 0x29FE
    5f06:	90 91 ff 29 	lds	r25, 0x29FF
    5f0a:	a0 91 00 2a 	lds	r26, 0x2A00
    5f0e:	b0 91 01 2a 	lds	r27, 0x2A01
    5f12:	40 91 54 2e 	lds	r20, 0x2E54
    5f16:	50 91 55 2e 	lds	r21, 0x2E55
    5f1a:	60 91 56 2e 	lds	r22, 0x2E56
    5f1e:	70 91 57 2e 	lds	r23, 0x2E57
    5f22:	84 0f       	add	r24, r20
    5f24:	95 1f       	adc	r25, r21
    5f26:	80 93 79 2e 	sts	0x2E79, r24
    5f2a:	90 93 7a 2e 	sts	0x2E7A, r25
	
	//Ogranicenje brzinskog PID-a
	if(PID_brzina_L > max_brzina_motora)
    5f2e:	20 91 7b 2e 	lds	r18, 0x2E7B
    5f32:	30 91 7c 2e 	lds	r19, 0x2E7C
    5f36:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f3a:	90 91 10 2e 	lds	r25, 0x2E10
    5f3e:	82 17       	cp	r24, r18
    5f40:	93 07       	cpc	r25, r19
    5f42:	44 f4       	brge	.+16     	; 0x5f54 <PID_brzinski+0xbe>
		PID_brzina_L = max_brzina_motora;
    5f44:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f48:	90 91 10 2e 	lds	r25, 0x2E10
    5f4c:	80 93 7b 2e 	sts	0x2E7B, r24
    5f50:	90 93 7c 2e 	sts	0x2E7C, r25
	if(PID_brzina_L < -max_brzina_motora)
    5f54:	20 91 0f 2e 	lds	r18, 0x2E0F
    5f58:	30 91 10 2e 	lds	r19, 0x2E10
    5f5c:	80 91 7b 2e 	lds	r24, 0x2E7B
    5f60:	90 91 7c 2e 	lds	r25, 0x2E7C
    5f64:	31 95       	neg	r19
    5f66:	21 95       	neg	r18
    5f68:	31 09       	sbc	r19, r1
    5f6a:	82 17       	cp	r24, r18
    5f6c:	93 07       	cpc	r25, r19
    5f6e:	5c f4       	brge	.+22     	; 0x5f86 <PID_brzinski+0xf0>
		PID_brzina_L = -max_brzina_motora;
    5f70:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f74:	90 91 10 2e 	lds	r25, 0x2E10
    5f78:	91 95       	neg	r25
    5f7a:	81 95       	neg	r24
    5f7c:	91 09       	sbc	r25, r1
    5f7e:	80 93 7b 2e 	sts	0x2E7B, r24
    5f82:	90 93 7c 2e 	sts	0x2E7C, r25
	if(PID_brzina_R > max_brzina_motora)
    5f86:	20 91 79 2e 	lds	r18, 0x2E79
    5f8a:	30 91 7a 2e 	lds	r19, 0x2E7A
    5f8e:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f92:	90 91 10 2e 	lds	r25, 0x2E10
    5f96:	82 17       	cp	r24, r18
    5f98:	93 07       	cpc	r25, r19
    5f9a:	44 f4       	brge	.+16     	; 0x5fac <PID_brzinski+0x116>
		PID_brzina_R = max_brzina_motora;
    5f9c:	80 91 0f 2e 	lds	r24, 0x2E0F
    5fa0:	90 91 10 2e 	lds	r25, 0x2E10
    5fa4:	80 93 79 2e 	sts	0x2E79, r24
    5fa8:	90 93 7a 2e 	sts	0x2E7A, r25
	if(PID_brzina_R < -max_brzina_motora)
    5fac:	20 91 0f 2e 	lds	r18, 0x2E0F
    5fb0:	30 91 10 2e 	lds	r19, 0x2E10
    5fb4:	80 91 79 2e 	lds	r24, 0x2E79
    5fb8:	90 91 7a 2e 	lds	r25, 0x2E7A
    5fbc:	31 95       	neg	r19
    5fbe:	21 95       	neg	r18
    5fc0:	31 09       	sbc	r19, r1
    5fc2:	82 17       	cp	r24, r18
    5fc4:	93 07       	cpc	r25, r19
    5fc6:	5c f4       	brge	.+22     	; 0x5fde <PID_brzinski+0x148>
		PID_brzina_R = -max_brzina_motora;
    5fc8:	80 91 0f 2e 	lds	r24, 0x2E0F
    5fcc:	90 91 10 2e 	lds	r25, 0x2E10
    5fd0:	91 95       	neg	r25
    5fd2:	81 95       	neg	r24
    5fd4:	91 09       	sbc	r25, r1
    5fd6:	80 93 79 2e 	sts	0x2E79, r24
    5fda:	90 93 7a 2e 	sts	0x2E7A, r25
	
	Pe_brzina_L = PID_brzina_L;
    5fde:	80 91 7b 2e 	lds	r24, 0x2E7B
    5fe2:	90 91 7c 2e 	lds	r25, 0x2E7C
    5fe6:	80 93 82 2e 	sts	0x2E82, r24
    5fea:	90 93 83 2e 	sts	0x2E83, r25
	Pe_brzina_R = PID_brzina_R;
    5fee:	80 91 79 2e 	lds	r24, 0x2E79
    5ff2:	90 91 7a 2e 	lds	r25, 0x2E7A
    5ff6:	80 93 06 2e 	sts	0x2E06, r24
    5ffa:	90 93 07 2e 	sts	0x2E07, r25
	Ie_brzina_L += Pe_brzina_L;
    5ffe:	20 91 88 2e 	lds	r18, 0x2E88
    6002:	30 91 89 2e 	lds	r19, 0x2E89
    6006:	80 91 82 2e 	lds	r24, 0x2E82
    600a:	90 91 83 2e 	lds	r25, 0x2E83
    600e:	82 0f       	add	r24, r18
    6010:	93 1f       	adc	r25, r19
    6012:	80 93 88 2e 	sts	0x2E88, r24
    6016:	90 93 89 2e 	sts	0x2E89, r25
	Ie_brzina_R += Pe_brzina_R;
    601a:	20 91 c2 24 	lds	r18, 0x24C2
    601e:	30 91 c3 24 	lds	r19, 0x24C3
    6022:	80 91 06 2e 	lds	r24, 0x2E06
    6026:	90 91 07 2e 	lds	r25, 0x2E07
    602a:	82 0f       	add	r24, r18
    602c:	93 1f       	adc	r25, r19
    602e:	80 93 c2 24 	sts	0x24C2, r24
    6032:	90 93 c3 24 	sts	0x24C3, r25
	De_brzina_L = PID_brzina_pret_L - PID_brzina_L;
    6036:	80 91 a6 24 	lds	r24, 0x24A6
    603a:	90 91 a7 24 	lds	r25, 0x24A7
    603e:	20 91 7b 2e 	lds	r18, 0x2E7B
    6042:	30 91 7c 2e 	lds	r19, 0x2E7C
    6046:	82 1b       	sub	r24, r18
    6048:	93 0b       	sbc	r25, r19
    604a:	80 93 6e 2e 	sts	0x2E6E, r24
    604e:	90 93 6f 2e 	sts	0x2E6F, r25
	De_brzina_R = PID_brzina_pret_R - PID_brzina_R;
    6052:	80 91 2b 2e 	lds	r24, 0x2E2B
    6056:	90 91 2c 2e 	lds	r25, 0x2E2C
    605a:	20 91 79 2e 	lds	r18, 0x2E79
    605e:	30 91 7a 2e 	lds	r19, 0x2E7A
    6062:	82 1b       	sub	r24, r18
    6064:	93 0b       	sbc	r25, r19
    6066:	80 93 c9 28 	sts	0x28C9, r24
    606a:	90 93 ca 28 	sts	0x28CA, r25
	
	PID_brzina_pret_L = PID_brzina_L;
    606e:	80 91 7b 2e 	lds	r24, 0x2E7B
    6072:	90 91 7c 2e 	lds	r25, 0x2E7C
    6076:	80 93 a6 24 	sts	0x24A6, r24
    607a:	90 93 a7 24 	sts	0x24A7, r25
	PID_brzina_pret_R = PID_brzina_R;
    607e:	80 91 79 2e 	lds	r24, 0x2E79
    6082:	90 91 7a 2e 	lds	r25, 0x2E7A
    6086:	80 93 2b 2e 	sts	0x2E2B, r24
    608a:	90 93 2c 2e 	sts	0x2E2C, r25
	
	//anti wind-up
	if(Ie_brzina_L > 200) //300
    608e:	80 91 88 2e 	lds	r24, 0x2E88
    6092:	90 91 89 2e 	lds	r25, 0x2E89
    6096:	89 3c       	cpi	r24, 0xC9	; 201
    6098:	91 05       	cpc	r25, r1
    609a:	34 f0       	brlt	.+12     	; 0x60a8 <PID_brzinski+0x212>
		Ie_brzina_L = 200;
    609c:	88 ec       	ldi	r24, 0xC8	; 200
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	80 93 88 2e 	sts	0x2E88, r24
    60a4:	90 93 89 2e 	sts	0x2E89, r25
	if(Ie_brzina_L < -200)
    60a8:	80 91 88 2e 	lds	r24, 0x2E88
    60ac:	90 91 89 2e 	lds	r25, 0x2E89
    60b0:	88 33       	cpi	r24, 0x38	; 56
    60b2:	9f 4f       	sbci	r25, 0xFF	; 255
    60b4:	34 f4       	brge	.+12     	; 0x60c2 <PID_brzinski+0x22c>
		Ie_brzina_L = -200;
    60b6:	88 e3       	ldi	r24, 0x38	; 56
    60b8:	9f ef       	ldi	r25, 0xFF	; 255
    60ba:	80 93 88 2e 	sts	0x2E88, r24
    60be:	90 93 89 2e 	sts	0x2E89, r25
	if(Ie_brzina_R > 200)
    60c2:	80 91 c2 24 	lds	r24, 0x24C2
    60c6:	90 91 c3 24 	lds	r25, 0x24C3
    60ca:	89 3c       	cpi	r24, 0xC9	; 201
    60cc:	91 05       	cpc	r25, r1
    60ce:	34 f0       	brlt	.+12     	; 0x60dc <PID_brzinski+0x246>
		Ie_brzina_R = 200;
    60d0:	88 ec       	ldi	r24, 0xC8	; 200
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	80 93 c2 24 	sts	0x24C2, r24
    60d8:	90 93 c3 24 	sts	0x24C3, r25
	if(Ie_brzina_R < -200)
    60dc:	80 91 c2 24 	lds	r24, 0x24C2
    60e0:	90 91 c3 24 	lds	r25, 0x24C3
    60e4:	88 33       	cpi	r24, 0x38	; 56
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	34 f4       	brge	.+12     	; 0x60f6 <PID_brzinski+0x260>
		Ie_brzina_R = -200;
    60ea:	88 e3       	ldi	r24, 0x38	; 56
    60ec:	9f ef       	ldi	r25, 0xFF	; 255
    60ee:	80 93 c2 24 	sts	0x24C2, r24
    60f2:	90 93 c3 24 	sts	0x24C3, r25

	PID_ukupni_L = (float)(Pe_brzina_L) * Kp_brzina + (float)(Ie_brzina_L) * Ki_brzina + (float)(De_brzina_L) * Kd_brzina; // znak - je zbog smera kretanja
    60f6:	60 91 82 2e 	lds	r22, 0x2E82
    60fa:	70 91 83 2e 	lds	r23, 0x2E83
    60fe:	c0 90 d3 28 	lds	r12, 0x28D3
    6102:	d0 90 d4 28 	lds	r13, 0x28D4
    6106:	e0 90 d5 28 	lds	r14, 0x28D5
    610a:	f0 90 d6 28 	lds	r15, 0x28D6
    610e:	00 91 88 2e 	lds	r16, 0x2E88
    6112:	10 91 89 2e 	lds	r17, 0x2E89
    6116:	40 90 b8 24 	lds	r4, 0x24B8
    611a:	50 90 b9 24 	lds	r5, 0x24B9
    611e:	60 90 ba 24 	lds	r6, 0x24BA
    6122:	70 90 bb 24 	lds	r7, 0x24BB
    6126:	c0 91 6e 2e 	lds	r28, 0x2E6E
    612a:	d0 91 6f 2e 	lds	r29, 0x2E6F
    612e:	80 90 50 2e 	lds	r8, 0x2E50
    6132:	90 90 51 2e 	lds	r9, 0x2E51
    6136:	a0 90 52 2e 	lds	r10, 0x2E52
    613a:	b0 90 53 2e 	lds	r11, 0x2E53
    613e:	88 27       	eor	r24, r24
    6140:	77 fd       	sbrc	r23, 7
    6142:	80 95       	com	r24
    6144:	98 2f       	mov	r25, r24
    6146:	a7 d5       	rcall	.+2894   	; 0x6c96 <__floatsisf>
    6148:	a7 01       	movw	r20, r14
    614a:	96 01       	movw	r18, r12
    614c:	bd d6       	rcall	.+3450   	; 0x6ec8 <__mulsf3>
    614e:	6b 01       	movw	r12, r22
    6150:	7c 01       	movw	r14, r24
    6152:	b8 01       	movw	r22, r16
    6154:	88 27       	eor	r24, r24
    6156:	77 fd       	sbrc	r23, 7
    6158:	80 95       	com	r24
    615a:	98 2f       	mov	r25, r24
    615c:	9c d5       	rcall	.+2872   	; 0x6c96 <__floatsisf>
    615e:	a3 01       	movw	r20, r6
    6160:	92 01       	movw	r18, r4
    6162:	b2 d6       	rcall	.+3428   	; 0x6ec8 <__mulsf3>
    6164:	9b 01       	movw	r18, r22
    6166:	ac 01       	movw	r20, r24
    6168:	c7 01       	movw	r24, r14
    616a:	b6 01       	movw	r22, r12
    616c:	2c d4       	rcall	.+2136   	; 0x69c6 <__addsf3>
    616e:	6b 01       	movw	r12, r22
    6170:	7c 01       	movw	r14, r24
    6172:	be 01       	movw	r22, r28
    6174:	88 27       	eor	r24, r24
    6176:	77 fd       	sbrc	r23, 7
    6178:	80 95       	com	r24
    617a:	98 2f       	mov	r25, r24
    617c:	8c d5       	rcall	.+2840   	; 0x6c96 <__floatsisf>
    617e:	a5 01       	movw	r20, r10
    6180:	94 01       	movw	r18, r8
    6182:	a2 d6       	rcall	.+3396   	; 0x6ec8 <__mulsf3>
    6184:	9b 01       	movw	r18, r22
    6186:	ac 01       	movw	r20, r24
    6188:	c7 01       	movw	r24, r14
    618a:	b6 01       	movw	r22, r12
    618c:	1c d4       	rcall	.+2104   	; 0x69c6 <__addsf3>
    618e:	50 d5       	rcall	.+2720   	; 0x6c30 <__fixsfsi>
    6190:	60 93 d9 28 	sts	0x28D9, r22
    6194:	70 93 da 28 	sts	0x28DA, r23
    6198:	80 93 db 28 	sts	0x28DB, r24
    619c:	90 93 dc 28 	sts	0x28DC, r25
	PID_ukupni_R = (float)(Pe_brzina_R) * Kp_brzina + (float)(Ie_brzina_R) * Ki_brzina + (float)(De_brzina_R) * Kd_brzina;
    61a0:	60 91 06 2e 	lds	r22, 0x2E06
    61a4:	70 91 07 2e 	lds	r23, 0x2E07
    61a8:	c0 90 d3 28 	lds	r12, 0x28D3
    61ac:	d0 90 d4 28 	lds	r13, 0x28D4
    61b0:	e0 90 d5 28 	lds	r14, 0x28D5
    61b4:	f0 90 d6 28 	lds	r15, 0x28D6
    61b8:	00 91 c2 24 	lds	r16, 0x24C2
    61bc:	10 91 c3 24 	lds	r17, 0x24C3
    61c0:	40 90 b8 24 	lds	r4, 0x24B8
    61c4:	50 90 b9 24 	lds	r5, 0x24B9
    61c8:	60 90 ba 24 	lds	r6, 0x24BA
    61cc:	70 90 bb 24 	lds	r7, 0x24BB
    61d0:	c0 91 c9 28 	lds	r28, 0x28C9
    61d4:	d0 91 ca 28 	lds	r29, 0x28CA
    61d8:	80 90 50 2e 	lds	r8, 0x2E50
    61dc:	90 90 51 2e 	lds	r9, 0x2E51
    61e0:	a0 90 52 2e 	lds	r10, 0x2E52
    61e4:	b0 90 53 2e 	lds	r11, 0x2E53
    61e8:	88 27       	eor	r24, r24
    61ea:	77 fd       	sbrc	r23, 7
    61ec:	80 95       	com	r24
    61ee:	98 2f       	mov	r25, r24
    61f0:	52 d5       	rcall	.+2724   	; 0x6c96 <__floatsisf>
    61f2:	a7 01       	movw	r20, r14
    61f4:	96 01       	movw	r18, r12
    61f6:	68 d6       	rcall	.+3280   	; 0x6ec8 <__mulsf3>
    61f8:	6b 01       	movw	r12, r22
    61fa:	7c 01       	movw	r14, r24
    61fc:	b8 01       	movw	r22, r16
    61fe:	88 27       	eor	r24, r24
    6200:	77 fd       	sbrc	r23, 7
    6202:	80 95       	com	r24
    6204:	98 2f       	mov	r25, r24
    6206:	47 d5       	rcall	.+2702   	; 0x6c96 <__floatsisf>
    6208:	a3 01       	movw	r20, r6
    620a:	92 01       	movw	r18, r4
    620c:	5d d6       	rcall	.+3258   	; 0x6ec8 <__mulsf3>
    620e:	9b 01       	movw	r18, r22
    6210:	ac 01       	movw	r20, r24
    6212:	c7 01       	movw	r24, r14
    6214:	b6 01       	movw	r22, r12
    6216:	d7 d3       	rcall	.+1966   	; 0x69c6 <__addsf3>
    6218:	6b 01       	movw	r12, r22
    621a:	7c 01       	movw	r14, r24
    621c:	be 01       	movw	r22, r28
    621e:	88 27       	eor	r24, r24
    6220:	77 fd       	sbrc	r23, 7
    6222:	80 95       	com	r24
    6224:	98 2f       	mov	r25, r24
    6226:	37 d5       	rcall	.+2670   	; 0x6c96 <__floatsisf>
    6228:	a5 01       	movw	r20, r10
    622a:	94 01       	movw	r18, r8
    622c:	4d d6       	rcall	.+3226   	; 0x6ec8 <__mulsf3>
    622e:	9b 01       	movw	r18, r22
    6230:	ac 01       	movw	r20, r24
    6232:	c7 01       	movw	r24, r14
    6234:	b6 01       	movw	r22, r12
    6236:	c7 d3       	rcall	.+1934   	; 0x69c6 <__addsf3>
    6238:	fb d4       	rcall	.+2550   	; 0x6c30 <__fixsfsi>
    623a:	60 93 84 2e 	sts	0x2E84, r22
    623e:	70 93 85 2e 	sts	0x2E85, r23
    6242:	80 93 86 2e 	sts	0x2E86, r24
    6246:	90 93 87 2e 	sts	0x2E87, r25
	
	//preskaliranje - ne mora da se radi posto su max_brzina_motora i PWM_perioda slicne velicine
	//PID_ukupni_L = (PID_ukupni_L * PWM_perioda) / max_brzina_motora; 
	
	//Ogranicenje PID izlaza
	if(PID_ukupni_L > PWM_perioda)
    624a:	40 91 5e 2e 	lds	r20, 0x2E5E
    624e:	50 91 5f 2e 	lds	r21, 0x2E5F
    6252:	80 91 d9 28 	lds	r24, 0x28D9
    6256:	90 91 da 28 	lds	r25, 0x28DA
    625a:	a0 91 db 28 	lds	r26, 0x28DB
    625e:	b0 91 dc 28 	lds	r27, 0x28DC
    6262:	66 27       	eor	r22, r22
    6264:	57 fd       	sbrc	r21, 7
    6266:	60 95       	com	r22
    6268:	76 2f       	mov	r23, r22
    626a:	48 17       	cp	r20, r24
    626c:	59 07       	cpc	r21, r25
    626e:	6a 07       	cpc	r22, r26
    6270:	7b 07       	cpc	r23, r27
    6272:	84 f4       	brge	.+32     	; 0x6294 <PID_brzinski+0x3fe>
		PID_ukupni_L = PWM_perioda;
    6274:	80 91 5e 2e 	lds	r24, 0x2E5E
    6278:	90 91 5f 2e 	lds	r25, 0x2E5F
    627c:	aa 27       	eor	r26, r26
    627e:	97 fd       	sbrc	r25, 7
    6280:	a0 95       	com	r26
    6282:	ba 2f       	mov	r27, r26
    6284:	80 93 d9 28 	sts	0x28D9, r24
    6288:	90 93 da 28 	sts	0x28DA, r25
    628c:	a0 93 db 28 	sts	0x28DB, r26
    6290:	b0 93 dc 28 	sts	0x28DC, r27
	if(PID_ukupni_L < -PWM_perioda)
    6294:	40 91 5e 2e 	lds	r20, 0x2E5E
    6298:	50 91 5f 2e 	lds	r21, 0x2E5F
    629c:	80 91 d9 28 	lds	r24, 0x28D9
    62a0:	90 91 da 28 	lds	r25, 0x28DA
    62a4:	a0 91 db 28 	lds	r26, 0x28DB
    62a8:	b0 91 dc 28 	lds	r27, 0x28DC
    62ac:	51 95       	neg	r21
    62ae:	41 95       	neg	r20
    62b0:	51 09       	sbc	r21, r1
    62b2:	66 27       	eor	r22, r22
    62b4:	57 fd       	sbrc	r21, 7
    62b6:	60 95       	com	r22
    62b8:	76 2f       	mov	r23, r22
    62ba:	84 17       	cp	r24, r20
    62bc:	95 07       	cpc	r25, r21
    62be:	a6 07       	cpc	r26, r22
    62c0:	b7 07       	cpc	r27, r23
    62c2:	9c f4       	brge	.+38     	; 0x62ea <PID_brzinski+0x454>
		PID_ukupni_L = -PWM_perioda;
    62c4:	80 91 5e 2e 	lds	r24, 0x2E5E
    62c8:	90 91 5f 2e 	lds	r25, 0x2E5F
    62cc:	91 95       	neg	r25
    62ce:	81 95       	neg	r24
    62d0:	91 09       	sbc	r25, r1
    62d2:	aa 27       	eor	r26, r26
    62d4:	97 fd       	sbrc	r25, 7
    62d6:	a0 95       	com	r26
    62d8:	ba 2f       	mov	r27, r26
    62da:	80 93 d9 28 	sts	0x28D9, r24
    62de:	90 93 da 28 	sts	0x28DA, r25
    62e2:	a0 93 db 28 	sts	0x28DB, r26
    62e6:	b0 93 dc 28 	sts	0x28DC, r27
		
	if(PID_ukupni_R > PWM_perioda)
    62ea:	40 91 5e 2e 	lds	r20, 0x2E5E
    62ee:	50 91 5f 2e 	lds	r21, 0x2E5F
    62f2:	80 91 84 2e 	lds	r24, 0x2E84
    62f6:	90 91 85 2e 	lds	r25, 0x2E85
    62fa:	a0 91 86 2e 	lds	r26, 0x2E86
    62fe:	b0 91 87 2e 	lds	r27, 0x2E87
    6302:	66 27       	eor	r22, r22
    6304:	57 fd       	sbrc	r21, 7
    6306:	60 95       	com	r22
    6308:	76 2f       	mov	r23, r22
    630a:	48 17       	cp	r20, r24
    630c:	59 07       	cpc	r21, r25
    630e:	6a 07       	cpc	r22, r26
    6310:	7b 07       	cpc	r23, r27
    6312:	84 f4       	brge	.+32     	; 0x6334 <PID_brzinski+0x49e>
		PID_ukupni_R = PWM_perioda;
    6314:	80 91 5e 2e 	lds	r24, 0x2E5E
    6318:	90 91 5f 2e 	lds	r25, 0x2E5F
    631c:	aa 27       	eor	r26, r26
    631e:	97 fd       	sbrc	r25, 7
    6320:	a0 95       	com	r26
    6322:	ba 2f       	mov	r27, r26
    6324:	80 93 84 2e 	sts	0x2E84, r24
    6328:	90 93 85 2e 	sts	0x2E85, r25
    632c:	a0 93 86 2e 	sts	0x2E86, r26
    6330:	b0 93 87 2e 	sts	0x2E87, r27
	if(PID_ukupni_R < -PWM_perioda)
    6334:	40 91 5e 2e 	lds	r20, 0x2E5E
    6338:	50 91 5f 2e 	lds	r21, 0x2E5F
    633c:	80 91 84 2e 	lds	r24, 0x2E84
    6340:	90 91 85 2e 	lds	r25, 0x2E85
    6344:	a0 91 86 2e 	lds	r26, 0x2E86
    6348:	b0 91 87 2e 	lds	r27, 0x2E87
    634c:	51 95       	neg	r21
    634e:	41 95       	neg	r20
    6350:	51 09       	sbc	r21, r1
    6352:	66 27       	eor	r22, r22
    6354:	57 fd       	sbrc	r21, 7
    6356:	60 95       	com	r22
    6358:	76 2f       	mov	r23, r22
    635a:	84 17       	cp	r24, r20
    635c:	95 07       	cpc	r25, r21
    635e:	a6 07       	cpc	r26, r22
    6360:	b7 07       	cpc	r27, r23
    6362:	9c f4       	brge	.+38     	; 0x638a <PID_brzinski+0x4f4>
		PID_ukupni_R = -PWM_perioda;
    6364:	80 91 5e 2e 	lds	r24, 0x2E5E
    6368:	90 91 5f 2e 	lds	r25, 0x2E5F
    636c:	91 95       	neg	r25
    636e:	81 95       	neg	r24
    6370:	91 09       	sbc	r25, r1
    6372:	aa 27       	eor	r26, r26
    6374:	97 fd       	sbrc	r25, 7
    6376:	a0 95       	com	r26
    6378:	ba 2f       	mov	r27, r26
    637a:	80 93 84 2e 	sts	0x2E84, r24
    637e:	90 93 85 2e 	sts	0x2E85, r25
    6382:	a0 93 86 2e 	sts	0x2E86, r26
    6386:	b0 93 87 2e 	sts	0x2E87, r27
		
	//levi motor
	if (PID_ukupni_L > 3)/*if (PID_ukupni_L > 5)*/	//smer 1
    638a:	80 91 d9 28 	lds	r24, 0x28D9
    638e:	90 91 da 28 	lds	r25, 0x28DA
    6392:	a0 91 db 28 	lds	r26, 0x28DB
    6396:	b0 91 dc 28 	lds	r27, 0x28DC
    639a:	04 97       	sbiw	r24, 0x04	; 4
    639c:	a1 05       	cpc	r26, r1
    639e:	b1 05       	cpc	r27, r1
    63a0:	9c f0       	brlt	.+38     	; 0x63c8 <PID_brzinski+0x532>
	{
		PORT_ClearPins(&PORTH, 0b00010000);	//IN_A2=0
    63a2:	e0 ee       	ldi	r30, 0xE0	; 224
    63a4:	f6 e0       	ldi	r31, 0x06	; 6
    63a6:	80 e1       	ldi	r24, 0x10	; 16
    63a8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b10000000);	//IN_B2=1
    63aa:	80 e8       	ldi	r24, 0x80	; 128
    63ac:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = PID_ukupni_L;
    63ae:	80 91 d9 28 	lds	r24, 0x28D9
    63b2:	90 91 da 28 	lds	r25, 0x28DA
    63b6:	a0 91 db 28 	lds	r26, 0x28DB
    63ba:	b0 91 dc 28 	lds	r27, 0x28DC
    63be:	e0 e4       	ldi	r30, 0x40	; 64
    63c0:	fb e0       	ldi	r31, 0x0B	; 11
    63c2:	82 af       	std	Z+58, r24	; 0x3a
    63c4:	93 af       	std	Z+59, r25	; 0x3b
    63c6:	27 c0       	rjmp	.+78     	; 0x6416 <PID_brzinski+0x580>
	}
	else if (PID_ukupni_L < -3)	//smer 2
    63c8:	80 91 d9 28 	lds	r24, 0x28D9
    63cc:	90 91 da 28 	lds	r25, 0x28DA
    63d0:	a0 91 db 28 	lds	r26, 0x28DB
    63d4:	b0 91 dc 28 	lds	r27, 0x28DC
    63d8:	8d 3f       	cpi	r24, 0xFD	; 253
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	af 4f       	sbci	r26, 0xFF	; 255
    63de:	bf 4f       	sbci	r27, 0xFF	; 255
    63e0:	b4 f4       	brge	.+44     	; 0x640e <PID_brzinski+0x578>
	{
		PORT_ClearPins(&PORTH, 0b10000000);	//IN_B2=0
    63e2:	e0 ee       	ldi	r30, 0xE0	; 224
    63e4:	f6 e0       	ldi	r31, 0x06	; 6
    63e6:	80 e8       	ldi	r24, 0x80	; 128
    63e8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00010000);	//IN_A2=1,
    63ea:	80 e1       	ldi	r24, 0x10	; 16
    63ec:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = -PID_ukupni_L;
    63ee:	80 91 d9 28 	lds	r24, 0x28D9
    63f2:	90 91 da 28 	lds	r25, 0x28DA
    63f6:	a0 91 db 28 	lds	r26, 0x28DB
    63fa:	b0 91 dc 28 	lds	r27, 0x28DC
    63fe:	91 95       	neg	r25
    6400:	81 95       	neg	r24
    6402:	91 09       	sbc	r25, r1
    6404:	e0 e4       	ldi	r30, 0x40	; 64
    6406:	fb e0       	ldi	r31, 0x0B	; 11
    6408:	82 af       	std	Z+58, r24	; 0x3a
    640a:	93 af       	std	Z+59, r25	; 0x3b
    640c:	04 c0       	rjmp	.+8      	; 0x6416 <PID_brzinski+0x580>
	}
	else	//kocenje
		PORT_ClearPins(&PORTH, 0b10010000);	//IN_A2=0, IN_B2=0	
    640e:	80 e9       	ldi	r24, 0x90	; 144
    6410:	e0 ee       	ldi	r30, 0xE0	; 224
    6412:	f6 e0       	ldi	r31, 0x06	; 6
    6414:	86 83       	std	Z+6, r24	; 0x06
	//desni motor
	if (PID_ukupni_R > 3) //smer 1
    6416:	80 91 84 2e 	lds	r24, 0x2E84
    641a:	90 91 85 2e 	lds	r25, 0x2E85
    641e:	a0 91 86 2e 	lds	r26, 0x2E86
    6422:	b0 91 87 2e 	lds	r27, 0x2E87
    6426:	04 97       	sbiw	r24, 0x04	; 4
    6428:	a1 05       	cpc	r26, r1
    642a:	b1 05       	cpc	r27, r1
    642c:	9c f0       	brlt	.+38     	; 0x6454 <PID_brzinski+0x5be>
	{
		PORT_ClearPins(&PORTH, 0b00001000);	//IN_B1=0
    642e:	e0 ee       	ldi	r30, 0xE0	; 224
    6430:	f6 e0       	ldi	r31, 0x06	; 6
    6432:	88 e0       	ldi	r24, 0x08	; 8
    6434:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00000001);	//IN_A1=1
    6436:	81 e0       	ldi	r24, 0x01	; 1
    6438:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = PID_ukupni_R;
    643a:	80 91 84 2e 	lds	r24, 0x2E84
    643e:	90 91 85 2e 	lds	r25, 0x2E85
    6442:	a0 91 86 2e 	lds	r26, 0x2E86
    6446:	b0 91 87 2e 	lds	r27, 0x2E87
    644a:	e0 e4       	ldi	r30, 0x40	; 64
    644c:	fb e0       	ldi	r31, 0x0B	; 11
    644e:	80 af       	std	Z+56, r24	; 0x38
    6450:	91 af       	std	Z+57, r25	; 0x39
    6452:	27 c0       	rjmp	.+78     	; 0x64a2 <PID_brzinski+0x60c>
	}
	else if (PID_ukupni_R < -3)	//smer 2
    6454:	80 91 84 2e 	lds	r24, 0x2E84
    6458:	90 91 85 2e 	lds	r25, 0x2E85
    645c:	a0 91 86 2e 	lds	r26, 0x2E86
    6460:	b0 91 87 2e 	lds	r27, 0x2E87
    6464:	8d 3f       	cpi	r24, 0xFD	; 253
    6466:	9f 4f       	sbci	r25, 0xFF	; 255
    6468:	af 4f       	sbci	r26, 0xFF	; 255
    646a:	bf 4f       	sbci	r27, 0xFF	; 255
    646c:	b4 f4       	brge	.+44     	; 0x649a <PID_brzinski+0x604>
	{
		PORT_ClearPins(&PORTH, 0b00000001);	//IN_A1=0
    646e:	e0 ee       	ldi	r30, 0xE0	; 224
    6470:	f6 e0       	ldi	r31, 0x06	; 6
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00001000);	//IN_B1=1
    6476:	88 e0       	ldi	r24, 0x08	; 8
    6478:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = -PID_ukupni_R;
    647a:	80 91 84 2e 	lds	r24, 0x2E84
    647e:	90 91 85 2e 	lds	r25, 0x2E85
    6482:	a0 91 86 2e 	lds	r26, 0x2E86
    6486:	b0 91 87 2e 	lds	r27, 0x2E87
    648a:	91 95       	neg	r25
    648c:	81 95       	neg	r24
    648e:	91 09       	sbc	r25, r1
    6490:	e0 e4       	ldi	r30, 0x40	; 64
    6492:	fb e0       	ldi	r31, 0x0B	; 11
    6494:	80 af       	std	Z+56, r24	; 0x38
    6496:	91 af       	std	Z+57, r25	; 0x39
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <PID_brzinski+0x60c>
	}
	else //kocenje
		PORT_ClearPins(&PORTH, 0b00001001);	//IN_A1=0, IN_B1=0
    649a:	89 e0       	ldi	r24, 0x09	; 9
    649c:	e0 ee       	ldi	r30, 0xE0	; 224
    649e:	f6 e0       	ldi	r31, 0x06	; 6
    64a0:	86 83       	std	Z+6, r24	; 0x06
		
}
    64a2:	df 91       	pop	r29
    64a4:	cf 91       	pop	r28
    64a6:	1f 91       	pop	r17
    64a8:	0f 91       	pop	r16
    64aa:	ff 90       	pop	r15
    64ac:	ef 90       	pop	r14
    64ae:	df 90       	pop	r13
    64b0:	cf 90       	pop	r12
    64b2:	bf 90       	pop	r11
    64b4:	af 90       	pop	r10
    64b6:	9f 90       	pop	r9
    64b8:	8f 90       	pop	r8
    64ba:	7f 90       	pop	r7
    64bc:	6f 90       	pop	r6
    64be:	5f 90       	pop	r5
    64c0:	4f 90       	pop	r4
    64c2:	08 95       	ret

000064c4 <PORT_ConfigureInterrupt0>:
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
	port->INT1MASK = pinMask;
    64c4:	fc 01       	movw	r30, r24
    64c6:	81 85       	ldd	r24, Z+9	; 0x09
    64c8:	8c 7f       	andi	r24, 0xFC	; 252
    64ca:	68 2b       	or	r22, r24
    64cc:	61 87       	std	Z+9, r22	; 0x09
    64ce:	42 87       	std	Z+10, r20	; 0x0a
    64d0:	08 95       	ret

000064d2 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    64d2:	ef 92       	push	r14
    64d4:	0f 93       	push	r16
	// Build pin control register value
	// N.B. Look in iox126a1.h for description of bit and group masks
	uint8_t temp = (uint8_t) opc |
    64d6:	0e 29       	or	r16, r14
    64d8:	44 23       	and	r20, r20
    64da:	11 f0       	breq	.+4      	; 0x64e0 <PORT_ConfigurePins+0xe>
    64dc:	30 e8       	ldi	r19, 0x80	; 128
    64de:	01 c0       	rjmp	.+2      	; 0x64e2 <PORT_ConfigurePins+0x10>
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	03 2b       	or	r16, r19
    64e4:	22 23       	and	r18, r18
    64e6:	11 f0       	breq	.+4      	; 0x64ec <PORT_ConfigurePins+0x1a>
    64e8:	20 e4       	ldi	r18, 0x40	; 64
    64ea:	01 c0       	rjmp	.+2      	; 0x64ee <PORT_ConfigurePins+0x1c>
    64ec:	20 e0       	ldi	r18, 0x00	; 0
    64ee:	02 2b       	or	r16, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	// Configure the pins in one atomic operation. 

	// Save status register. 
	uint8_t sreg = SREG;
    64f0:	2f b7       	in	r18, 0x3f	; 63

	// Disable the global interrupt flag
	cli();	
    64f2:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    64f4:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    64f8:	fc 01       	movw	r30, r24
    64fa:	00 8b       	std	Z+16, r16	; 0x10

	// Restore status register. 
	SREG = sreg;
    64fc:	2f bf       	out	0x3f, r18	; 63
}
    64fe:	0f 91       	pop	r16
    6500:	ef 90       	pop	r14
    6502:	08 95       	ret

00006504 <TC1_ConfigClockSource>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    6504:	fc 01       	movw	r30, r24
    6506:	20 81       	ld	r18, Z
    6508:	20 7f       	andi	r18, 0xF0	; 240
    650a:	62 2b       	or	r22, r18
    650c:	60 83       	st	Z, r22
    650e:	08 95       	ret

00006510 <TC1_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    6510:	fc 01       	movw	r30, r24
    6512:	26 81       	ldd	r18, Z+6	; 0x06
    6514:	2c 7f       	andi	r18, 0xFC	; 252
    6516:	62 2b       	or	r22, r18
    6518:	66 83       	std	Z+6, r22	; 0x06
    651a:	08 95       	ret

0000651c <nuliraj_poziciju_robota>:
	uint16_t res = (uint16_t)(deg*(250/180));	//250 cycles for 180 degree turn
	if(res <= 0)
		res = 125;								//125 cycles for 0 degree turn
	else if(res > 250)
		res = 250;
	TCF0.CCA = res;
    651c:	10 92 ae 24 	sts	0x24AE, r1
    6520:	10 92 af 24 	sts	0x24AF, r1
    6524:	10 92 b0 24 	sts	0x24B0, r1
    6528:	10 92 b1 24 	sts	0x24B1, r1
    652c:	10 92 23 2e 	sts	0x2E23, r1
    6530:	10 92 24 2e 	sts	0x2E24, r1
    6534:	10 92 25 2e 	sts	0x2E25, r1
    6538:	10 92 26 2e 	sts	0x2E26, r1
    653c:	10 92 0b 2e 	sts	0x2E0B, r1
    6540:	10 92 0c 2e 	sts	0x2E0C, r1
    6544:	10 92 0d 2e 	sts	0x2E0D, r1
    6548:	10 92 0e 2e 	sts	0x2E0E, r1
    654c:	10 92 02 2a 	sts	0x2A02, r1
    6550:	10 92 03 2a 	sts	0x2A03, r1
    6554:	10 92 04 2a 	sts	0x2A04, r1
    6558:	10 92 05 2a 	sts	0x2A05, r1
    655c:	10 92 00 20 	sts	0x2000, r1
    6560:	10 92 01 20 	sts	0x2001, r1
    6564:	10 92 02 20 	sts	0x2002, r1
    6568:	10 92 03 20 	sts	0x2003, r1
    656c:	10 92 cc 24 	sts	0x24CC, r1
    6570:	10 92 cd 24 	sts	0x24CD, r1
    6574:	10 92 ce 24 	sts	0x24CE, r1
    6578:	10 92 cf 24 	sts	0x24CF, r1
    657c:	10 92 83 32 	sts	0x3283, r1
    6580:	10 92 84 32 	sts	0x3284, r1
    6584:	10 92 85 32 	sts	0x3285, r1
    6588:	10 92 86 32 	sts	0x3286, r1
    658c:	82 e0       	ldi	r24, 0x02	; 2
    658e:	80 93 78 2e 	sts	0x2E78, r24
    6592:	80 93 5e 29 	sts	0x295E, r24
    6596:	e0 e0       	ldi	r30, 0x00	; 0
    6598:	f9 e0       	ldi	r31, 0x09	; 9
    659a:	10 a2       	std	Z+32, r1	; 0x20
    659c:	11 a2       	std	Z+33, r1	; 0x21
    659e:	e0 e4       	ldi	r30, 0x40	; 64
    65a0:	f9 e0       	ldi	r31, 0x09	; 9
    65a2:	10 a2       	std	Z+32, r1	; 0x20
    65a4:	11 a2       	std	Z+33, r1	; 0x21
    65a6:	10 92 7d 32 	sts	0x327D, r1
    65aa:	10 92 7e 32 	sts	0x327E, r1
    65ae:	10 92 1e 2e 	sts	0x2E1E, r1
    65b2:	10 92 1f 2e 	sts	0x2E1F, r1
    65b6:	10 92 20 2e 	sts	0x2E20, r1
    65ba:	10 92 21 2e 	sts	0x2E21, r1
    65be:	10 92 ee 29 	sts	0x29EE, r1
    65c2:	10 92 ef 29 	sts	0x29EF, r1
    65c6:	10 92 f0 29 	sts	0x29F0, r1
    65ca:	10 92 f1 29 	sts	0x29F1, r1
    65ce:	10 92 2d 2e 	sts	0x2E2D, r1
    65d2:	10 92 2e 2e 	sts	0x2E2E, r1
    65d6:	08 95       	ret

000065d8 <zadaj_teta>:
    65d8:	0f 93       	push	r16
    65da:	1f 93       	push	r17
    65dc:	cf 93       	push	r28
    65de:	8b 01       	movw	r16, r22
    65e0:	9c 01       	movw	r18, r24
    65e2:	c4 2f       	mov	r28, r20
    65e4:	60 91 75 32 	lds	r22, 0x3275
    65e8:	70 91 76 32 	lds	r23, 0x3276
    65ec:	80 91 77 32 	lds	r24, 0x3277
    65f0:	90 91 78 32 	lds	r25, 0x3278
    65f4:	a9 01       	movw	r20, r18
    65f6:	98 01       	movw	r18, r16
    65f8:	3b d5       	rcall	.+2678   	; 0x7070 <__mulsi3>
    65fa:	28 e6       	ldi	r18, 0x68	; 104
    65fc:	31 e0       	ldi	r19, 0x01	; 1
    65fe:	40 e0       	ldi	r20, 0x00	; 0
    6600:	50 e0       	ldi	r21, 0x00	; 0
    6602:	7a d5       	rcall	.+2804   	; 0x70f8 <__divmodsi4>
    6604:	20 93 00 20 	sts	0x2000, r18
    6608:	30 93 01 20 	sts	0x2001, r19
    660c:	40 93 02 20 	sts	0x2002, r20
    6610:	50 93 03 20 	sts	0x2003, r21
    6614:	c0 93 5e 29 	sts	0x295E, r28
    6618:	cf 91       	pop	r28
    661a:	1f 91       	pop	r17
    661c:	0f 91       	pop	r16
    661e:	08 95       	ret

00006620 <idi_pravo>:
    6620:	8f 92       	push	r8
    6622:	9f 92       	push	r9
    6624:	af 92       	push	r10
    6626:	bf 92       	push	r11
    6628:	ef 92       	push	r14
    662a:	ff 92       	push	r15
    662c:	0f 93       	push	r16
    662e:	1f 93       	push	r17
    6630:	49 01       	movw	r8, r18
    6632:	5a 01       	movw	r10, r20
    6634:	a0 91 00 2e 	lds	r26, 0x2E00
    6638:	b0 91 01 2e 	lds	r27, 0x2E01
    663c:	9b 01       	movw	r18, r22
    663e:	ac 01       	movw	r20, r24
    6640:	76 d5       	rcall	.+2796   	; 0x712e <__muluhisi3>
    6642:	60 93 ae 24 	sts	0x24AE, r22
    6646:	70 93 af 24 	sts	0x24AF, r23
    664a:	80 93 b0 24 	sts	0x24B0, r24
    664e:	90 93 b1 24 	sts	0x24B1, r25
    6652:	a0 91 00 2e 	lds	r26, 0x2E00
    6656:	b0 91 01 2e 	lds	r27, 0x2E01
    665a:	a5 01       	movw	r20, r10
    665c:	94 01       	movw	r18, r8
    665e:	67 d5       	rcall	.+2766   	; 0x712e <__muluhisi3>
    6660:	60 93 0b 2e 	sts	0x2E0B, r22
    6664:	70 93 0c 2e 	sts	0x2E0C, r23
    6668:	80 93 0d 2e 	sts	0x2E0D, r24
    666c:	90 93 0e 2e 	sts	0x2E0E, r25
    6670:	60 91 75 32 	lds	r22, 0x3275
    6674:	70 91 76 32 	lds	r23, 0x3276
    6678:	80 91 77 32 	lds	r24, 0x3277
    667c:	90 91 78 32 	lds	r25, 0x3278
    6680:	a8 01       	movw	r20, r16
    6682:	97 01       	movw	r18, r14
    6684:	f5 d4       	rcall	.+2538   	; 0x7070 <__mulsi3>
    6686:	28 e6       	ldi	r18, 0x68	; 104
    6688:	31 e0       	ldi	r19, 0x01	; 1
    668a:	40 e0       	ldi	r20, 0x00	; 0
    668c:	50 e0       	ldi	r21, 0x00	; 0
    668e:	12 d5       	rcall	.+2596   	; 0x70b4 <__udivmodsi4>
    6690:	20 93 00 20 	sts	0x2000, r18
    6694:	30 93 01 20 	sts	0x2001, r19
    6698:	40 93 02 20 	sts	0x2002, r20
    669c:	50 93 03 20 	sts	0x2003, r21
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	80 93 5e 29 	sts	0x295E, r24
    66a6:	1f 91       	pop	r17
    66a8:	0f 91       	pop	r16
    66aa:	ff 90       	pop	r15
    66ac:	ef 90       	pop	r14
    66ae:	bf 90       	pop	r11
    66b0:	af 90       	pop	r10
    66b2:	9f 90       	pop	r9
    66b4:	8f 90       	pop	r8
    66b6:	08 95       	ret

000066b8 <__vector_110>:
}

ISR(TCF0_CCA_vect)
{
    66b8:	1f 92       	push	r1
    66ba:	0f 92       	push	r0
    66bc:	0f b6       	in	r0, 0x3f	; 63
    66be:	0f 92       	push	r0
    66c0:	11 24       	eor	r1, r1
    66c2:	08 b6       	in	r0, 0x38	; 56
    66c4:	0f 92       	push	r0
    66c6:	18 be       	out	0x38, r1	; 56
    66c8:	0b b6       	in	r0, 0x3b	; 59
    66ca:	0f 92       	push	r0
    66cc:	1b be       	out	0x3b, r1	; 59
    66ce:	8f 93       	push	r24
    66d0:	ef 93       	push	r30
    66d2:	ff 93       	push	r31
	PORTF.OUT |= (1 << 0);
    66d4:	e0 ea       	ldi	r30, 0xA0	; 160
    66d6:	f6 e0       	ldi	r31, 0x06	; 6
    66d8:	84 81       	ldd	r24, Z+4	; 0x04
    66da:	81 60       	ori	r24, 0x01	; 1
    66dc:	84 83       	std	Z+4, r24	; 0x04
}
    66de:	ff 91       	pop	r31
    66e0:	ef 91       	pop	r30
    66e2:	8f 91       	pop	r24
    66e4:	0f 90       	pop	r0
    66e6:	0b be       	out	0x3b, r0	; 59
    66e8:	0f 90       	pop	r0
    66ea:	08 be       	out	0x38, r0	; 56
    66ec:	0f 90       	pop	r0
    66ee:	0f be       	out	0x3f, r0	; 63
    66f0:	0f 90       	pop	r0
    66f2:	1f 90       	pop	r1
    66f4:	18 95       	reti

000066f6 <__vector_108>:

ISR(TCF0_OVF_vect)
{
    66f6:	1f 92       	push	r1
    66f8:	0f 92       	push	r0
    66fa:	0f b6       	in	r0, 0x3f	; 63
    66fc:	0f 92       	push	r0
    66fe:	11 24       	eor	r1, r1
    6700:	08 b6       	in	r0, 0x38	; 56
    6702:	0f 92       	push	r0
    6704:	18 be       	out	0x38, r1	; 56
    6706:	0b b6       	in	r0, 0x3b	; 59
    6708:	0f 92       	push	r0
    670a:	1b be       	out	0x3b, r1	; 59
    670c:	8f 93       	push	r24
    670e:	ef 93       	push	r30
    6710:	ff 93       	push	r31
	PORTF.OUT &= ~(1 << 0);
    6712:	e0 ea       	ldi	r30, 0xA0	; 160
    6714:	f6 e0       	ldi	r31, 0x06	; 6
    6716:	84 81       	ldd	r24, Z+4	; 0x04
    6718:	8e 7f       	andi	r24, 0xFE	; 254
    671a:	84 83       	std	Z+4, r24	; 0x04
}
    671c:	ff 91       	pop	r31
    671e:	ef 91       	pop	r30
    6720:	8f 91       	pop	r24
    6722:	0f 90       	pop	r0
    6724:	0b be       	out	0x3b, r0	; 59
    6726:	0f 90       	pop	r0
    6728:	08 be       	out	0x38, r0	; 56
    672a:	0f 90       	pop	r0
    672c:	0f be       	out	0x3f, r0	; 63
    672e:	0f 90       	pop	r0
    6730:	1f 90       	pop	r1
    6732:	18 95       	reti

00006734 <demo_1>:

 void demo_1(void)
 {
    6734:	ef 92       	push	r14
    6736:	ff 92       	push	r15
    6738:	0f 93       	push	r16
    673a:	1f 93       	push	r17
	switch(step1)
    673c:	80 91 09 20 	lds	r24, 0x2009
    6740:	81 30       	cpi	r24, 0x01	; 1
    6742:	31 f1       	breq	.+76     	; 0x6790 <demo_1+0x5c>
    6744:	20 f0       	brcs	.+8      	; 0x674e <demo_1+0x1a>
    6746:	82 30       	cpi	r24, 0x02	; 2
    6748:	09 f0       	breq	.+2      	; 0x674c <demo_1+0x18>
    674a:	69 c0       	rjmp	.+210    	; 0x681e <demo_1+0xea>
    674c:	49 c0       	rjmp	.+146    	; 0x67e0 <demo_1+0xac>
	{
		case 0:
			if(flag1 == 0)
    674e:	80 91 0a 20 	lds	r24, 0x200A
    6752:	81 11       	cpse	r24, r1
    6754:	13 c0       	rjmp	.+38     	; 0x677c <demo_1+0x48>
			{
			
				stigao_flag = 0;
    6756:	10 92 06 20 	sts	0x2006, r1
				flag1 = 1;
    675a:	81 e0       	ldi	r24, 0x01	; 1
    675c:	80 93 0a 20 	sts	0x200A, r24
				//idi_pravo(500,0,0);
				idi_pravo(500,0,180);
    6760:	14 eb       	ldi	r17, 0xB4	; 180
    6762:	e1 2e       	mov	r14, r17
    6764:	f1 2c       	mov	r15, r1
    6766:	00 e0       	ldi	r16, 0x00	; 0
    6768:	10 e0       	ldi	r17, 0x00	; 0
    676a:	20 e0       	ldi	r18, 0x00	; 0
    676c:	30 e0       	ldi	r19, 0x00	; 0
    676e:	a9 01       	movw	r20, r18
    6770:	64 ef       	ldi	r22, 0xF4	; 244
    6772:	71 e0       	ldi	r23, 0x01	; 1
    6774:	80 e0       	ldi	r24, 0x00	; 0
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	53 df       	rcall	.-346    	; 0x6620 <idi_pravo>
    677a:	51 c0       	rjmp	.+162    	; 0x681e <demo_1+0xea>
			
				//sendChar('0');
			}
			else if(stigao_flag == 1)
    677c:	80 91 06 20 	lds	r24, 0x2006
    6780:	81 30       	cpi	r24, 0x01	; 1
    6782:	09 f0       	breq	.+2      	; 0x6786 <demo_1+0x52>
    6784:	4c c0       	rjmp	.+152    	; 0x681e <demo_1+0xea>
			{
				step1++;
    6786:	80 93 09 20 	sts	0x2009, r24
				flag1 = 0;
    678a:	10 92 0a 20 	sts	0x200A, r1
    678e:	47 c0       	rjmp	.+142    	; 0x681e <demo_1+0xea>
			}
			break;
		
		case 1:
			if(sys_time>3333)
    6790:	80 91 c4 24 	lds	r24, 0x24C4
    6794:	90 91 c5 24 	lds	r25, 0x24C5
    6798:	86 30       	cpi	r24, 0x06	; 6
    679a:	9d 40       	sbci	r25, 0x0D	; 13
    679c:	08 f4       	brcc	.+2      	; 0x67a0 <demo_1+0x6c>
    679e:	3f c0       	rjmp	.+126    	; 0x681e <demo_1+0xea>
			{
				if(flag1 == 0)
    67a0:	80 91 0a 20 	lds	r24, 0x200A
    67a4:	81 11       	cpse	r24, r1
    67a6:	12 c0       	rjmp	.+36     	; 0x67cc <demo_1+0x98>
				{
					stigao_flag = 0;
    67a8:	10 92 06 20 	sts	0x2006, r1
					flag1 = 1;
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	80 93 0a 20 	sts	0x200A, r24
					//idi_pravo(500,0,0);
					idi_pravo(0,0,180);
    67b2:	14 eb       	ldi	r17, 0xB4	; 180
    67b4:	e1 2e       	mov	r14, r17
    67b6:	f1 2c       	mov	r15, r1
    67b8:	00 e0       	ldi	r16, 0x00	; 0
    67ba:	10 e0       	ldi	r17, 0x00	; 0
    67bc:	20 e0       	ldi	r18, 0x00	; 0
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	a9 01       	movw	r20, r18
    67c2:	60 e0       	ldi	r22, 0x00	; 0
    67c4:	70 e0       	ldi	r23, 0x00	; 0
    67c6:	cb 01       	movw	r24, r22
    67c8:	2b df       	rcall	.-426    	; 0x6620 <idi_pravo>
    67ca:	29 c0       	rjmp	.+82     	; 0x681e <demo_1+0xea>
			
					//sendChar('0');
				}
				else if(stigao_flag == 1)
    67cc:	80 91 06 20 	lds	r24, 0x2006
    67d0:	81 30       	cpi	r24, 0x01	; 1
    67d2:	29 f5       	brne	.+74     	; 0x681e <demo_1+0xea>
				{
					step1++;
    67d4:	82 e0       	ldi	r24, 0x02	; 2
    67d6:	80 93 09 20 	sts	0x2009, r24
					flag1 = 0;
    67da:	10 92 0a 20 	sts	0x200A, r1
    67de:	1f c0       	rjmp	.+62     	; 0x681e <demo_1+0xea>
				}
			}
			break;
		
 		case 2:
 			if(sys_time>6666)
    67e0:	80 91 c4 24 	lds	r24, 0x24C4
    67e4:	90 91 c5 24 	lds	r25, 0x24C5
    67e8:	8b 30       	cpi	r24, 0x0B	; 11
    67ea:	9a 41       	sbci	r25, 0x1A	; 26
    67ec:	c0 f0       	brcs	.+48     	; 0x681e <demo_1+0xea>
 			{
 				if(flag1 == 0)
    67ee:	80 91 0a 20 	lds	r24, 0x200A
    67f2:	81 11       	cpse	r24, r1
    67f4:	0b c0       	rjmp	.+22     	; 0x680c <demo_1+0xd8>
 				{
 					stigao_flag = 0;
    67f6:	10 92 06 20 	sts	0x2006, r1
 					flag1 = 1;
    67fa:	81 e0       	ldi	r24, 0x01	; 1
    67fc:	80 93 0a 20 	sts	0x200A, r24
 					//idi_pravo(500,0,0);
 					zadaj_teta(0,0);
    6800:	40 e0       	ldi	r20, 0x00	; 0
    6802:	60 e0       	ldi	r22, 0x00	; 0
    6804:	70 e0       	ldi	r23, 0x00	; 0
    6806:	cb 01       	movw	r24, r22
    6808:	e7 de       	rcall	.-562    	; 0x65d8 <zadaj_teta>
    680a:	09 c0       	rjmp	.+18     	; 0x681e <demo_1+0xea>
 				
 					//sendChar('0');
 				}
 				else if(stigao_flag == 1)
    680c:	80 91 06 20 	lds	r24, 0x2006
    6810:	81 30       	cpi	r24, 0x01	; 1
    6812:	29 f4       	brne	.+10     	; 0x681e <demo_1+0xea>
 				{
 					step1++;
    6814:	83 e0       	ldi	r24, 0x03	; 3
    6816:	80 93 09 20 	sts	0x2009, r24
 					flag1 = 0;
    681a:	10 92 0a 20 	sts	0x200A, r1
		
		default:
		break;
		
 	}
 }
    681e:	1f 91       	pop	r17
    6820:	0f 91       	pop	r16
    6822:	ff 90       	pop	r15
    6824:	ef 90       	pop	r14
    6826:	08 95       	ret

00006828 <USART_InterruptDriver_Initialize>:
	uint8_t tempHead = usart_data->buffer.RX_Head;
	uint8_t tempTail = usart_data->buffer.RX_Tail;

	// There are data left in the buffer unless Head and Tail are equal.  
	return (tempHead != tempTail);
}
    6828:	fc 01       	movw	r30, r24
    682a:	60 83       	st	Z, r22
    682c:	71 83       	std	Z+1, r23	; 0x01
    682e:	42 83       	std	Z+2, r20	; 0x02
    6830:	ec 57       	subi	r30, 0x7C	; 124
    6832:	fe 4f       	sbci	r31, 0xFE	; 254
    6834:	10 82       	st	Z, r1
    6836:	fc 01       	movw	r30, r24
    6838:	ed 57       	subi	r30, 0x7D	; 125
    683a:	fe 4f       	sbci	r31, 0xFE	; 254
    683c:	10 82       	st	Z, r1
    683e:	fc 01       	movw	r30, r24
    6840:	ea 57       	subi	r30, 0x7A	; 122
    6842:	fe 4f       	sbci	r31, 0xFE	; 254
    6844:	10 82       	st	Z, r1
    6846:	fc 01       	movw	r30, r24
    6848:	eb 57       	subi	r30, 0x7B	; 123
    684a:	fe 4f       	sbci	r31, 0xFE	; 254
    684c:	10 82       	st	Z, r1
    684e:	08 95       	ret

00006850 <USART_TXBuffer_FreeSpace>:
    6850:	fc 01       	movw	r30, r24
    6852:	eb 57       	subi	r30, 0x7B	; 123
    6854:	fe 4f       	sbci	r31, 0xFE	; 254
    6856:	20 81       	ld	r18, Z
    6858:	fc 01       	movw	r30, r24
    685a:	ea 57       	subi	r30, 0x7A	; 122
    685c:	fe 4f       	sbci	r31, 0xFE	; 254
    685e:	90 81       	ld	r25, Z
    6860:	2f 5f       	subi	r18, 0xFF	; 255
    6862:	81 e0       	ldi	r24, 0x01	; 1
    6864:	29 13       	cpse	r18, r25
    6866:	01 c0       	rjmp	.+2      	; 0x686a <USART_TXBuffer_FreeSpace+0x1a>
    6868:	80 e0       	ldi	r24, 0x00	; 0
    686a:	08 95       	ret

0000686c <USART_TXBuffer_PutByte>:
    686c:	1f 93       	push	r17
    686e:	cf 93       	push	r28
    6870:	df 93       	push	r29
    6872:	ec 01       	movw	r28, r24
    6874:	16 2f       	mov	r17, r22
    6876:	ec df       	rcall	.-40     	; 0x6850 <USART_TXBuffer_FreeSpace>
    6878:	88 23       	and	r24, r24
    687a:	99 f0       	breq	.+38     	; 0x68a2 <USART_TXBuffer_PutByte+0x36>
    687c:	fe 01       	movw	r30, r28
    687e:	eb 57       	subi	r30, 0x7B	; 123
    6880:	fe 4f       	sbci	r31, 0xFE	; 254
    6882:	90 81       	ld	r25, Z
    6884:	de 01       	movw	r26, r28
    6886:	a9 0f       	add	r26, r25
    6888:	b1 1d       	adc	r27, r1
    688a:	ad 57       	subi	r26, 0x7D	; 125
    688c:	bf 4f       	sbci	r27, 0xFF	; 255
    688e:	1c 93       	st	X, r17
    6890:	9f 5f       	subi	r25, 0xFF	; 255
    6892:	90 83       	st	Z, r25
    6894:	e8 81       	ld	r30, Y
    6896:	f9 81       	ldd	r31, Y+1	; 0x01
    6898:	93 81       	ldd	r25, Z+3	; 0x03
    689a:	9c 7f       	andi	r25, 0xFC	; 252
    689c:	2a 81       	ldd	r18, Y+2	; 0x02
    689e:	92 2b       	or	r25, r18
    68a0:	93 83       	std	Z+3, r25	; 0x03
    68a2:	df 91       	pop	r29
    68a4:	cf 91       	pop	r28
    68a6:	1f 91       	pop	r17
    68a8:	08 95       	ret

000068aa <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    68aa:	fc 01       	movw	r30, r24
    68ac:	ec 57       	subi	r30, 0x7C	; 124
    68ae:	fe 4f       	sbci	r31, 0xFE	; 254
    68b0:	20 81       	ld	r18, Z
    68b2:	dc 01       	movw	r26, r24
    68b4:	a2 0f       	add	r26, r18
    68b6:	b1 1d       	adc	r27, r1
    68b8:	13 96       	adiw	r26, 0x03	; 3
    68ba:	8c 91       	ld	r24, X

	// Advance buffer tail.  
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    68bc:	90 81       	ld	r25, Z
    68be:	9f 5f       	subi	r25, 0xFF	; 255
    68c0:	9f 77       	andi	r25, 0x7F	; 127
    68c2:	90 83       	st	Z, r25

	return ans;
}
    68c4:	08 95       	ret

000068c6 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	// Advance buffer head.  
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    68c6:	fc 01       	movw	r30, r24
    68c8:	ed 57       	subi	r30, 0x7D	; 125
    68ca:	fe 4f       	sbci	r31, 0xFE	; 254
    68cc:	20 81       	ld	r18, Z
    68ce:	2f 5f       	subi	r18, 0xFF	; 255
    68d0:	2f 77       	andi	r18, 0x7F	; 127

	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    68d2:	fc 01       	movw	r30, r24
    68d4:	ec 57       	subi	r30, 0x7C	; 124
    68d6:	fe 4f       	sbci	r31, 0xFE	; 254
    68d8:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    68da:	dc 01       	movw	r26, r24
    68dc:	ed 91       	ld	r30, X+
    68de:	fc 91       	ld	r31, X
    68e0:	11 97       	sbiw	r26, 0x01	; 1
    68e2:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    68e4:	23 17       	cp	r18, r19
    68e6:	59 f0       	breq	.+22     	; 0x68fe <USART_RXComplete+0x38>
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    68e8:	fc 01       	movw	r30, r24
    68ea:	ed 57       	subi	r30, 0x7D	; 125
    68ec:	fe 4f       	sbci	r31, 0xFE	; 254
    68ee:	30 81       	ld	r19, Z
    68f0:	a3 0f       	add	r26, r19
    68f2:	b1 1d       	adc	r27, r1
    68f4:	13 96       	adiw	r26, 0x03	; 3
    68f6:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    68f8:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	08 95       	ret
	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
    68fe:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    6900:	08 95       	ret

00006902 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	// Check if all data is transmitted. 
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    6906:	fc 01       	movw	r30, r24
    6908:	ea 57       	subi	r30, 0x7A	; 122
    690a:	fe 4f       	sbci	r31, 0xFE	; 254
    690c:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    690e:	fc 01       	movw	r30, r24
    6910:	eb 57       	subi	r30, 0x7B	; 123
    6912:	fe 4f       	sbci	r31, 0xFE	; 254
    6914:	30 81       	ld	r19, Z
    6916:	32 13       	cpse	r19, r18
    6918:	07 c0       	rjmp	.+14     	; 0x6928 <USART_DataRegEmpty+0x26>
	    // Disable DRE interrupts.
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    691a:	dc 01       	movw	r26, r24
    691c:	ed 91       	ld	r30, X+
    691e:	fc 91       	ld	r31, X
    6920:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    6922:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    6924:	83 83       	std	Z+3, r24	; 0x03
    6926:	11 c0       	rjmp	.+34     	; 0x694a <USART_DataRegEmpty+0x48>

	}else{
		// Start transmitting. 
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    6928:	fc 01       	movw	r30, r24
    692a:	ea 57       	subi	r30, 0x7A	; 122
    692c:	fe 4f       	sbci	r31, 0xFE	; 254
    692e:	20 81       	ld	r18, Z
    6930:	dc 01       	movw	r26, r24
    6932:	a2 0f       	add	r26, r18
    6934:	b1 1d       	adc	r27, r1
    6936:	ad 57       	subi	r26, 0x7D	; 125
    6938:	bf 4f       	sbci	r27, 0xFF	; 255
    693a:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    693c:	ec 01       	movw	r28, r24
    693e:	a8 81       	ld	r26, Y
    6940:	b9 81       	ldd	r27, Y+1	; 0x01
    6942:	2c 93       	st	X, r18

		// Advance buffer tail. 
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    6944:	80 81       	ld	r24, Z
    6946:	8f 5f       	subi	r24, 0xFF	; 255
    6948:	80 83       	st	Z, r24
	}
}
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	08 95       	ret

00006950 <main>:
int main(void)
{
	int msg_counter = 0;
	int servo_counter = 0;
	//char servo_flag = 0;
	Podesi_Oscilator();					//podesavanje oscilatora
    6950:	0e 94 45 03 	call	0x68a	; 0x68a <Podesi_Oscilator>
	Podesi_Parametre_Robota();			//podesavanje broja impulsa u krugu
    6954:	0e 94 ae 01 	call	0x35c	; 0x35c <Podesi_Parametre_Robota>
	Podesi_PID_Pojacanja();				//podesavanje pojacanja PID regulatora
    6958:	0e 94 48 02 	call	0x490	; 0x490 <Podesi_PID_Pojacanja>
	PodesiADC();						//podesavanje AD konvertora
    695c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <PodesiADC>
	Podesi_Tajmere();					//podesavanje tajmera
    6960:	0e 94 d7 03 	call	0x7ae	; 0x7ae <Podesi_Tajmere>
	Podesi_QDEC();						//podesavanje kvadraturnih dekodera
    6964:	0e 94 c7 02 	call	0x58e	; 0x58e <Podesi_QDEC>
	Podesi_PWM();						//podesavanje PWM signala za motore i servoe
    6968:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Podesi_PWM>
	Podesi_Interapt();					//podesavanje interapt prioriteta
    696c:	0e 94 35 03 	call	0x66a	; 0x66a <Podesi_Interapt>
	Podesi_Pinove();					//podesavanje I/O pinova
    6970:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Podesi_Pinove>
	Podesi_USART_Komunikaciju();		//podesavanje komunikacije
    6974:	0e 94 57 03 	call	0x6ae	; 0x6ae <Podesi_USART_Komunikaciju>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6978:	2f e7       	ldi	r18, 0x7F	; 127
    697a:	8f e4       	ldi	r24, 0x4F	; 79
    697c:	92 e1       	ldi	r25, 0x12	; 18
    697e:	21 50       	subi	r18, 0x01	; 1
    6980:	80 40       	sbci	r24, 0x00	; 0
    6982:	90 40       	sbci	r25, 0x00	; 0
    6984:	e1 f7       	brne	.-8      	; 0x697e <main+0x2e>
    6986:	00 c0       	rjmp	.+0      	; 0x6988 <main+0x38>
    6988:	00 00       	nop
	//inicijalizuj_bluetooth();
	//inicijalizuj_servo_tajmer_20ms();
	//pomeri_servo_1(0);
	//sendChar('k');
	_delay_ms(3000);					//cekanje da se stabilizuje sistem
	nuliraj_poziciju_robota();
    698a:	c8 dd       	rcall	.-1136   	; 0x651c <nuliraj_poziciju_robota>
	//idi_pravo(500,0,0);
	//CheckInputMotorControl();
	//zadaj_X_Y_teta(500,0,0,1);
	while(1)
	{
		demo_1();
    698c:	d3 de       	rcall	.-602    	; 0x6734 <demo_1>
		//Racunanje trenutne pozicije
		if (Rac_tren_poz_sample_counter >= 3){		//9ms   3
    698e:	80 91 08 20 	lds	r24, 0x2008
    6992:	83 30       	cpi	r24, 0x03	; 3
    6994:	20 f0       	brcs	.+8      	; 0x699e <main+0x4e>
			Rac_tren_poz_sample_counter = 0;
    6996:	10 92 08 20 	sts	0x2008, r1
			Racunanje_trenutne_pozicije();
    699a:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <Racunanje_trenutne_pozicije>
		}
		
		//Korekcija pravca i distance prema cilju
		if(Pracenje_Pravca_sample_counter >= 30){	//90ms   30
    699e:	80 91 04 20 	lds	r24, 0x2004
    69a2:	8e 31       	cpi	r24, 0x1E	; 30
    69a4:	20 f0       	brcs	.+8      	; 0x69ae <main+0x5e>
			msg_counter++;
			servo_counter++;
			Pracenje_Pravca_sample_counter = 0;
    69a6:	10 92 04 20 	sts	0x2004, r1
			Pracenje_pravca();
    69aa:	0e 94 05 28 	call	0x500a	; 0x500a <Pracenje_pravca>
		}
		
		//PID regulacija
		if(PID_pozicioni_sample_counter >= 3){		//9ms    3
    69ae:	80 91 05 20 	lds	r24, 0x2005
    69b2:	83 30       	cpi	r24, 0x03	; 3
    69b4:	58 f3       	brcs	.-42     	; 0x698c <main+0x3c>
			PID_pozicioni_sample_counter = 0;
    69b6:	10 92 05 20 	sts	0x2005, r1
			PID_ugaoni();
    69ba:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <PID_ugaoni>
			PID_pravolinijski();
    69be:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <PID_pravolinijski>
    69c2:	e4 cf       	rjmp	.-56     	; 0x698c <main+0x3c>

000069c4 <__subsf3>:
    69c4:	50 58       	subi	r21, 0x80	; 128

000069c6 <__addsf3>:
    69c6:	bb 27       	eor	r27, r27
    69c8:	aa 27       	eor	r26, r26
    69ca:	0e d0       	rcall	.+28     	; 0x69e8 <__addsf3x>
    69cc:	27 c2       	rjmp	.+1102   	; 0x6e1c <__fp_round>
    69ce:	f0 d1       	rcall	.+992    	; 0x6db0 <__fp_pscA>
    69d0:	30 f0       	brcs	.+12     	; 0x69de <__addsf3+0x18>
    69d2:	f5 d1       	rcall	.+1002   	; 0x6dbe <__fp_pscB>
    69d4:	20 f0       	brcs	.+8      	; 0x69de <__addsf3+0x18>
    69d6:	31 f4       	brne	.+12     	; 0x69e4 <__addsf3+0x1e>
    69d8:	9f 3f       	cpi	r25, 0xFF	; 255
    69da:	11 f4       	brne	.+4      	; 0x69e0 <__addsf3+0x1a>
    69dc:	1e f4       	brtc	.+6      	; 0x69e4 <__addsf3+0x1e>
    69de:	c0 c1       	rjmp	.+896    	; 0x6d60 <__fp_nan>
    69e0:	0e f4       	brtc	.+2      	; 0x69e4 <__addsf3+0x1e>
    69e2:	e0 95       	com	r30
    69e4:	e7 fb       	bst	r30, 7
    69e6:	b6 c1       	rjmp	.+876    	; 0x6d54 <__fp_inf>

000069e8 <__addsf3x>:
    69e8:	e9 2f       	mov	r30, r25
    69ea:	3a d2       	rcall	.+1140   	; 0x6e60 <__fp_split3>
    69ec:	80 f3       	brcs	.-32     	; 0x69ce <__addsf3+0x8>
    69ee:	ba 17       	cp	r27, r26
    69f0:	62 07       	cpc	r22, r18
    69f2:	73 07       	cpc	r23, r19
    69f4:	84 07       	cpc	r24, r20
    69f6:	95 07       	cpc	r25, r21
    69f8:	18 f0       	brcs	.+6      	; 0x6a00 <__addsf3x+0x18>
    69fa:	71 f4       	brne	.+28     	; 0x6a18 <__addsf3x+0x30>
    69fc:	9e f5       	brtc	.+102    	; 0x6a64 <__addsf3x+0x7c>
    69fe:	52 c2       	rjmp	.+1188   	; 0x6ea4 <__fp_zero>
    6a00:	0e f4       	brtc	.+2      	; 0x6a04 <__addsf3x+0x1c>
    6a02:	e0 95       	com	r30
    6a04:	0b 2e       	mov	r0, r27
    6a06:	ba 2f       	mov	r27, r26
    6a08:	a0 2d       	mov	r26, r0
    6a0a:	0b 01       	movw	r0, r22
    6a0c:	b9 01       	movw	r22, r18
    6a0e:	90 01       	movw	r18, r0
    6a10:	0c 01       	movw	r0, r24
    6a12:	ca 01       	movw	r24, r20
    6a14:	a0 01       	movw	r20, r0
    6a16:	11 24       	eor	r1, r1
    6a18:	ff 27       	eor	r31, r31
    6a1a:	59 1b       	sub	r21, r25
    6a1c:	99 f0       	breq	.+38     	; 0x6a44 <__addsf3x+0x5c>
    6a1e:	59 3f       	cpi	r21, 0xF9	; 249
    6a20:	50 f4       	brcc	.+20     	; 0x6a36 <__addsf3x+0x4e>
    6a22:	50 3e       	cpi	r21, 0xE0	; 224
    6a24:	68 f1       	brcs	.+90     	; 0x6a80 <__addsf3x+0x98>
    6a26:	1a 16       	cp	r1, r26
    6a28:	f0 40       	sbci	r31, 0x00	; 0
    6a2a:	a2 2f       	mov	r26, r18
    6a2c:	23 2f       	mov	r18, r19
    6a2e:	34 2f       	mov	r19, r20
    6a30:	44 27       	eor	r20, r20
    6a32:	58 5f       	subi	r21, 0xF8	; 248
    6a34:	f3 cf       	rjmp	.-26     	; 0x6a1c <__addsf3x+0x34>
    6a36:	46 95       	lsr	r20
    6a38:	37 95       	ror	r19
    6a3a:	27 95       	ror	r18
    6a3c:	a7 95       	ror	r26
    6a3e:	f0 40       	sbci	r31, 0x00	; 0
    6a40:	53 95       	inc	r21
    6a42:	c9 f7       	brne	.-14     	; 0x6a36 <__addsf3x+0x4e>
    6a44:	7e f4       	brtc	.+30     	; 0x6a64 <__addsf3x+0x7c>
    6a46:	1f 16       	cp	r1, r31
    6a48:	ba 0b       	sbc	r27, r26
    6a4a:	62 0b       	sbc	r22, r18
    6a4c:	73 0b       	sbc	r23, r19
    6a4e:	84 0b       	sbc	r24, r20
    6a50:	ba f0       	brmi	.+46     	; 0x6a80 <__addsf3x+0x98>
    6a52:	91 50       	subi	r25, 0x01	; 1
    6a54:	a1 f0       	breq	.+40     	; 0x6a7e <__addsf3x+0x96>
    6a56:	ff 0f       	add	r31, r31
    6a58:	bb 1f       	adc	r27, r27
    6a5a:	66 1f       	adc	r22, r22
    6a5c:	77 1f       	adc	r23, r23
    6a5e:	88 1f       	adc	r24, r24
    6a60:	c2 f7       	brpl	.-16     	; 0x6a52 <__addsf3x+0x6a>
    6a62:	0e c0       	rjmp	.+28     	; 0x6a80 <__addsf3x+0x98>
    6a64:	ba 0f       	add	r27, r26
    6a66:	62 1f       	adc	r22, r18
    6a68:	73 1f       	adc	r23, r19
    6a6a:	84 1f       	adc	r24, r20
    6a6c:	48 f4       	brcc	.+18     	; 0x6a80 <__addsf3x+0x98>
    6a6e:	87 95       	ror	r24
    6a70:	77 95       	ror	r23
    6a72:	67 95       	ror	r22
    6a74:	b7 95       	ror	r27
    6a76:	f7 95       	ror	r31
    6a78:	9e 3f       	cpi	r25, 0xFE	; 254
    6a7a:	08 f0       	brcs	.+2      	; 0x6a7e <__addsf3x+0x96>
    6a7c:	b3 cf       	rjmp	.-154    	; 0x69e4 <__addsf3+0x1e>
    6a7e:	93 95       	inc	r25
    6a80:	88 0f       	add	r24, r24
    6a82:	08 f0       	brcs	.+2      	; 0x6a86 <__addsf3x+0x9e>
    6a84:	99 27       	eor	r25, r25
    6a86:	ee 0f       	add	r30, r30
    6a88:	97 95       	ror	r25
    6a8a:	87 95       	ror	r24
    6a8c:	08 95       	ret
    6a8e:	90 d1       	rcall	.+800    	; 0x6db0 <__fp_pscA>
    6a90:	58 f0       	brcs	.+22     	; 0x6aa8 <__addsf3x+0xc0>
    6a92:	80 e8       	ldi	r24, 0x80	; 128
    6a94:	91 e0       	ldi	r25, 0x01	; 1
    6a96:	09 f4       	brne	.+2      	; 0x6a9a <__addsf3x+0xb2>
    6a98:	9e ef       	ldi	r25, 0xFE	; 254
    6a9a:	91 d1       	rcall	.+802    	; 0x6dbe <__fp_pscB>
    6a9c:	28 f0       	brcs	.+10     	; 0x6aa8 <__addsf3x+0xc0>
    6a9e:	40 e8       	ldi	r20, 0x80	; 128
    6aa0:	51 e0       	ldi	r21, 0x01	; 1
    6aa2:	59 f4       	brne	.+22     	; 0x6aba <atan2+0xe>
    6aa4:	5e ef       	ldi	r21, 0xFE	; 254
    6aa6:	09 c0       	rjmp	.+18     	; 0x6aba <atan2+0xe>
    6aa8:	5b c1       	rjmp	.+694    	; 0x6d60 <__fp_nan>
    6aaa:	fc c1       	rjmp	.+1016   	; 0x6ea4 <__fp_zero>

00006aac <atan2>:
    6aac:	e9 2f       	mov	r30, r25
    6aae:	e0 78       	andi	r30, 0x80	; 128
    6ab0:	d7 d1       	rcall	.+942    	; 0x6e60 <__fp_split3>
    6ab2:	68 f3       	brcs	.-38     	; 0x6a8e <__addsf3x+0xa6>
    6ab4:	09 2e       	mov	r0, r25
    6ab6:	05 2a       	or	r0, r21
    6ab8:	c1 f3       	breq	.-16     	; 0x6aaa <__addsf3x+0xc2>
    6aba:	26 17       	cp	r18, r22
    6abc:	37 07       	cpc	r19, r23
    6abe:	48 07       	cpc	r20, r24
    6ac0:	59 07       	cpc	r21, r25
    6ac2:	38 f0       	brcs	.+14     	; 0x6ad2 <atan2+0x26>
    6ac4:	0e 2e       	mov	r0, r30
    6ac6:	07 f8       	bld	r0, 7
    6ac8:	e0 25       	eor	r30, r0
    6aca:	69 f0       	breq	.+26     	; 0x6ae6 <atan2+0x3a>
    6acc:	e0 25       	eor	r30, r0
    6ace:	e0 64       	ori	r30, 0x40	; 64
    6ad0:	0a c0       	rjmp	.+20     	; 0x6ae6 <atan2+0x3a>
    6ad2:	ef 63       	ori	r30, 0x3F	; 63
    6ad4:	07 f8       	bld	r0, 7
    6ad6:	00 94       	com	r0
    6ad8:	07 fa       	bst	r0, 7
    6ada:	db 01       	movw	r26, r22
    6adc:	b9 01       	movw	r22, r18
    6ade:	9d 01       	movw	r18, r26
    6ae0:	dc 01       	movw	r26, r24
    6ae2:	ca 01       	movw	r24, r20
    6ae4:	ad 01       	movw	r20, r26
    6ae6:	ef 93       	push	r30
    6ae8:	4a d0       	rcall	.+148    	; 0x6b7e <__divsf3_pse>
    6aea:	98 d1       	rcall	.+816    	; 0x6e1c <__fp_round>
    6aec:	0a d0       	rcall	.+20     	; 0x6b02 <atan>
    6aee:	5f 91       	pop	r21
    6af0:	55 23       	and	r21, r21
    6af2:	31 f0       	breq	.+12     	; 0x6b00 <atan2+0x54>
    6af4:	2b ed       	ldi	r18, 0xDB	; 219
    6af6:	3f e0       	ldi	r19, 0x0F	; 15
    6af8:	49 e4       	ldi	r20, 0x49	; 73
    6afa:	50 fd       	sbrc	r21, 0
    6afc:	49 ec       	ldi	r20, 0xC9	; 201
    6afe:	63 cf       	rjmp	.-314    	; 0x69c6 <__addsf3>
    6b00:	08 95       	ret

00006b02 <atan>:
    6b02:	df 93       	push	r29
    6b04:	dd 27       	eor	r29, r29
    6b06:	b9 2f       	mov	r27, r25
    6b08:	bf 77       	andi	r27, 0x7F	; 127
    6b0a:	40 e8       	ldi	r20, 0x80	; 128
    6b0c:	5f e3       	ldi	r21, 0x3F	; 63
    6b0e:	16 16       	cp	r1, r22
    6b10:	17 06       	cpc	r1, r23
    6b12:	48 07       	cpc	r20, r24
    6b14:	5b 07       	cpc	r21, r27
    6b16:	10 f4       	brcc	.+4      	; 0x6b1c <atan+0x1a>
    6b18:	d9 2f       	mov	r29, r25
    6b1a:	cf d1       	rcall	.+926    	; 0x6eba <inverse>
    6b1c:	9f 93       	push	r25
    6b1e:	8f 93       	push	r24
    6b20:	7f 93       	push	r23
    6b22:	6f 93       	push	r22
    6b24:	7c d2       	rcall	.+1272   	; 0x701e <square>
    6b26:	e4 ef       	ldi	r30, 0xF4	; 244
    6b28:	f1 e0       	ldi	r31, 0x01	; 1
    6b2a:	1d d1       	rcall	.+570    	; 0x6d66 <__fp_powser>
    6b2c:	77 d1       	rcall	.+750    	; 0x6e1c <__fp_round>
    6b2e:	2f 91       	pop	r18
    6b30:	3f 91       	pop	r19
    6b32:	4f 91       	pop	r20
    6b34:	5f 91       	pop	r21
    6b36:	d4 d1       	rcall	.+936    	; 0x6ee0 <__mulsf3x>
    6b38:	dd 23       	and	r29, r29
    6b3a:	49 f0       	breq	.+18     	; 0x6b4e <atan+0x4c>
    6b3c:	90 58       	subi	r25, 0x80	; 128
    6b3e:	a2 ea       	ldi	r26, 0xA2	; 162
    6b40:	2a ed       	ldi	r18, 0xDA	; 218
    6b42:	3f e0       	ldi	r19, 0x0F	; 15
    6b44:	49 ec       	ldi	r20, 0xC9	; 201
    6b46:	5f e3       	ldi	r21, 0x3F	; 63
    6b48:	d0 78       	andi	r29, 0x80	; 128
    6b4a:	5d 27       	eor	r21, r29
    6b4c:	4d df       	rcall	.-358    	; 0x69e8 <__addsf3x>
    6b4e:	df 91       	pop	r29
    6b50:	65 c1       	rjmp	.+714    	; 0x6e1c <__fp_round>

00006b52 <__cmpsf2>:
    6b52:	dc d0       	rcall	.+440    	; 0x6d0c <__fp_cmp>
    6b54:	08 f4       	brcc	.+2      	; 0x6b58 <__cmpsf2+0x6>
    6b56:	81 e0       	ldi	r24, 0x01	; 1
    6b58:	08 95       	ret

00006b5a <cos>:
    6b5a:	39 d1       	rcall	.+626    	; 0x6dce <__fp_rempio2>
    6b5c:	e3 95       	inc	r30
    6b5e:	6f c1       	rjmp	.+734    	; 0x6e3e <__fp_sinus>

00006b60 <__divsf3>:
    6b60:	0c d0       	rcall	.+24     	; 0x6b7a <__divsf3x>
    6b62:	5c c1       	rjmp	.+696    	; 0x6e1c <__fp_round>
    6b64:	2c d1       	rcall	.+600    	; 0x6dbe <__fp_pscB>
    6b66:	40 f0       	brcs	.+16     	; 0x6b78 <__divsf3+0x18>
    6b68:	23 d1       	rcall	.+582    	; 0x6db0 <__fp_pscA>
    6b6a:	30 f0       	brcs	.+12     	; 0x6b78 <__divsf3+0x18>
    6b6c:	21 f4       	brne	.+8      	; 0x6b76 <__divsf3+0x16>
    6b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    6b70:	19 f0       	breq	.+6      	; 0x6b78 <__divsf3+0x18>
    6b72:	f0 c0       	rjmp	.+480    	; 0x6d54 <__fp_inf>
    6b74:	51 11       	cpse	r21, r1
    6b76:	97 c1       	rjmp	.+814    	; 0x6ea6 <__fp_szero>
    6b78:	f3 c0       	rjmp	.+486    	; 0x6d60 <__fp_nan>

00006b7a <__divsf3x>:
    6b7a:	72 d1       	rcall	.+740    	; 0x6e60 <__fp_split3>
    6b7c:	98 f3       	brcs	.-26     	; 0x6b64 <__divsf3+0x4>

00006b7e <__divsf3_pse>:
    6b7e:	99 23       	and	r25, r25
    6b80:	c9 f3       	breq	.-14     	; 0x6b74 <__divsf3+0x14>
    6b82:	55 23       	and	r21, r21
    6b84:	b1 f3       	breq	.-20     	; 0x6b72 <__divsf3+0x12>
    6b86:	95 1b       	sub	r25, r21
    6b88:	55 0b       	sbc	r21, r21
    6b8a:	bb 27       	eor	r27, r27
    6b8c:	aa 27       	eor	r26, r26
    6b8e:	62 17       	cp	r22, r18
    6b90:	73 07       	cpc	r23, r19
    6b92:	84 07       	cpc	r24, r20
    6b94:	38 f0       	brcs	.+14     	; 0x6ba4 <__divsf3_pse+0x26>
    6b96:	9f 5f       	subi	r25, 0xFF	; 255
    6b98:	5f 4f       	sbci	r21, 0xFF	; 255
    6b9a:	22 0f       	add	r18, r18
    6b9c:	33 1f       	adc	r19, r19
    6b9e:	44 1f       	adc	r20, r20
    6ba0:	aa 1f       	adc	r26, r26
    6ba2:	a9 f3       	breq	.-22     	; 0x6b8e <__divsf3_pse+0x10>
    6ba4:	33 d0       	rcall	.+102    	; 0x6c0c <__divsf3_pse+0x8e>
    6ba6:	0e 2e       	mov	r0, r30
    6ba8:	3a f0       	brmi	.+14     	; 0x6bb8 <__divsf3_pse+0x3a>
    6baa:	e0 e8       	ldi	r30, 0x80	; 128
    6bac:	30 d0       	rcall	.+96     	; 0x6c0e <__divsf3_pse+0x90>
    6bae:	91 50       	subi	r25, 0x01	; 1
    6bb0:	50 40       	sbci	r21, 0x00	; 0
    6bb2:	e6 95       	lsr	r30
    6bb4:	00 1c       	adc	r0, r0
    6bb6:	ca f7       	brpl	.-14     	; 0x6baa <__divsf3_pse+0x2c>
    6bb8:	29 d0       	rcall	.+82     	; 0x6c0c <__divsf3_pse+0x8e>
    6bba:	fe 2f       	mov	r31, r30
    6bbc:	27 d0       	rcall	.+78     	; 0x6c0c <__divsf3_pse+0x8e>
    6bbe:	66 0f       	add	r22, r22
    6bc0:	77 1f       	adc	r23, r23
    6bc2:	88 1f       	adc	r24, r24
    6bc4:	bb 1f       	adc	r27, r27
    6bc6:	26 17       	cp	r18, r22
    6bc8:	37 07       	cpc	r19, r23
    6bca:	48 07       	cpc	r20, r24
    6bcc:	ab 07       	cpc	r26, r27
    6bce:	b0 e8       	ldi	r27, 0x80	; 128
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <__divsf3_pse+0x56>
    6bd2:	bb 0b       	sbc	r27, r27
    6bd4:	80 2d       	mov	r24, r0
    6bd6:	bf 01       	movw	r22, r30
    6bd8:	ff 27       	eor	r31, r31
    6bda:	93 58       	subi	r25, 0x83	; 131
    6bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    6bde:	2a f0       	brmi	.+10     	; 0x6bea <__divsf3_pse+0x6c>
    6be0:	9e 3f       	cpi	r25, 0xFE	; 254
    6be2:	51 05       	cpc	r21, r1
    6be4:	68 f0       	brcs	.+26     	; 0x6c00 <__divsf3_pse+0x82>
    6be6:	b6 c0       	rjmp	.+364    	; 0x6d54 <__fp_inf>
    6be8:	5e c1       	rjmp	.+700    	; 0x6ea6 <__fp_szero>
    6bea:	5f 3f       	cpi	r21, 0xFF	; 255
    6bec:	ec f3       	brlt	.-6      	; 0x6be8 <__divsf3_pse+0x6a>
    6bee:	98 3e       	cpi	r25, 0xE8	; 232
    6bf0:	dc f3       	brlt	.-10     	; 0x6be8 <__divsf3_pse+0x6a>
    6bf2:	86 95       	lsr	r24
    6bf4:	77 95       	ror	r23
    6bf6:	67 95       	ror	r22
    6bf8:	b7 95       	ror	r27
    6bfa:	f7 95       	ror	r31
    6bfc:	9f 5f       	subi	r25, 0xFF	; 255
    6bfe:	c9 f7       	brne	.-14     	; 0x6bf2 <__divsf3_pse+0x74>
    6c00:	88 0f       	add	r24, r24
    6c02:	91 1d       	adc	r25, r1
    6c04:	96 95       	lsr	r25
    6c06:	87 95       	ror	r24
    6c08:	97 f9       	bld	r25, 7
    6c0a:	08 95       	ret
    6c0c:	e1 e0       	ldi	r30, 0x01	; 1
    6c0e:	66 0f       	add	r22, r22
    6c10:	77 1f       	adc	r23, r23
    6c12:	88 1f       	adc	r24, r24
    6c14:	bb 1f       	adc	r27, r27
    6c16:	62 17       	cp	r22, r18
    6c18:	73 07       	cpc	r23, r19
    6c1a:	84 07       	cpc	r24, r20
    6c1c:	ba 07       	cpc	r27, r26
    6c1e:	20 f0       	brcs	.+8      	; 0x6c28 <__divsf3_pse+0xaa>
    6c20:	62 1b       	sub	r22, r18
    6c22:	73 0b       	sbc	r23, r19
    6c24:	84 0b       	sbc	r24, r20
    6c26:	ba 0b       	sbc	r27, r26
    6c28:	ee 1f       	adc	r30, r30
    6c2a:	88 f7       	brcc	.-30     	; 0x6c0e <__divsf3_pse+0x90>
    6c2c:	e0 95       	com	r30
    6c2e:	08 95       	ret

00006c30 <__fixsfsi>:
    6c30:	04 d0       	rcall	.+8      	; 0x6c3a <__fixunssfsi>
    6c32:	68 94       	set
    6c34:	b1 11       	cpse	r27, r1
    6c36:	37 c1       	rjmp	.+622    	; 0x6ea6 <__fp_szero>
    6c38:	08 95       	ret

00006c3a <__fixunssfsi>:
    6c3a:	1a d1       	rcall	.+564    	; 0x6e70 <__fp_splitA>
    6c3c:	88 f0       	brcs	.+34     	; 0x6c60 <__fixunssfsi+0x26>
    6c3e:	9f 57       	subi	r25, 0x7F	; 127
    6c40:	90 f0       	brcs	.+36     	; 0x6c66 <__fixunssfsi+0x2c>
    6c42:	b9 2f       	mov	r27, r25
    6c44:	99 27       	eor	r25, r25
    6c46:	b7 51       	subi	r27, 0x17	; 23
    6c48:	a0 f0       	brcs	.+40     	; 0x6c72 <__fixunssfsi+0x38>
    6c4a:	d1 f0       	breq	.+52     	; 0x6c80 <__fixunssfsi+0x46>
    6c4c:	66 0f       	add	r22, r22
    6c4e:	77 1f       	adc	r23, r23
    6c50:	88 1f       	adc	r24, r24
    6c52:	99 1f       	adc	r25, r25
    6c54:	1a f0       	brmi	.+6      	; 0x6c5c <__fixunssfsi+0x22>
    6c56:	ba 95       	dec	r27
    6c58:	c9 f7       	brne	.-14     	; 0x6c4c <__fixunssfsi+0x12>
    6c5a:	12 c0       	rjmp	.+36     	; 0x6c80 <__fixunssfsi+0x46>
    6c5c:	b1 30       	cpi	r27, 0x01	; 1
    6c5e:	81 f0       	breq	.+32     	; 0x6c80 <__fixunssfsi+0x46>
    6c60:	21 d1       	rcall	.+578    	; 0x6ea4 <__fp_zero>
    6c62:	b1 e0       	ldi	r27, 0x01	; 1
    6c64:	08 95       	ret
    6c66:	1e c1       	rjmp	.+572    	; 0x6ea4 <__fp_zero>
    6c68:	67 2f       	mov	r22, r23
    6c6a:	78 2f       	mov	r23, r24
    6c6c:	88 27       	eor	r24, r24
    6c6e:	b8 5f       	subi	r27, 0xF8	; 248
    6c70:	39 f0       	breq	.+14     	; 0x6c80 <__fixunssfsi+0x46>
    6c72:	b9 3f       	cpi	r27, 0xF9	; 249
    6c74:	cc f3       	brlt	.-14     	; 0x6c68 <__fixunssfsi+0x2e>
    6c76:	86 95       	lsr	r24
    6c78:	77 95       	ror	r23
    6c7a:	67 95       	ror	r22
    6c7c:	b3 95       	inc	r27
    6c7e:	d9 f7       	brne	.-10     	; 0x6c76 <__fixunssfsi+0x3c>
    6c80:	3e f4       	brtc	.+14     	; 0x6c90 <__fixunssfsi+0x56>
    6c82:	90 95       	com	r25
    6c84:	80 95       	com	r24
    6c86:	70 95       	com	r23
    6c88:	61 95       	neg	r22
    6c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c90:	08 95       	ret

00006c92 <__floatunsisf>:
    6c92:	e8 94       	clt
    6c94:	09 c0       	rjmp	.+18     	; 0x6ca8 <__floatsisf+0x12>

00006c96 <__floatsisf>:
    6c96:	97 fb       	bst	r25, 7
    6c98:	3e f4       	brtc	.+14     	; 0x6ca8 <__floatsisf+0x12>
    6c9a:	90 95       	com	r25
    6c9c:	80 95       	com	r24
    6c9e:	70 95       	com	r23
    6ca0:	61 95       	neg	r22
    6ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ca8:	99 23       	and	r25, r25
    6caa:	a9 f0       	breq	.+42     	; 0x6cd6 <__floatsisf+0x40>
    6cac:	f9 2f       	mov	r31, r25
    6cae:	96 e9       	ldi	r25, 0x96	; 150
    6cb0:	bb 27       	eor	r27, r27
    6cb2:	93 95       	inc	r25
    6cb4:	f6 95       	lsr	r31
    6cb6:	87 95       	ror	r24
    6cb8:	77 95       	ror	r23
    6cba:	67 95       	ror	r22
    6cbc:	b7 95       	ror	r27
    6cbe:	f1 11       	cpse	r31, r1
    6cc0:	f8 cf       	rjmp	.-16     	; 0x6cb2 <__floatsisf+0x1c>
    6cc2:	fa f4       	brpl	.+62     	; 0x6d02 <__floatsisf+0x6c>
    6cc4:	bb 0f       	add	r27, r27
    6cc6:	11 f4       	brne	.+4      	; 0x6ccc <__floatsisf+0x36>
    6cc8:	60 ff       	sbrs	r22, 0
    6cca:	1b c0       	rjmp	.+54     	; 0x6d02 <__floatsisf+0x6c>
    6ccc:	6f 5f       	subi	r22, 0xFF	; 255
    6cce:	7f 4f       	sbci	r23, 0xFF	; 255
    6cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    6cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd4:	16 c0       	rjmp	.+44     	; 0x6d02 <__floatsisf+0x6c>
    6cd6:	88 23       	and	r24, r24
    6cd8:	11 f0       	breq	.+4      	; 0x6cde <__floatsisf+0x48>
    6cda:	96 e9       	ldi	r25, 0x96	; 150
    6cdc:	11 c0       	rjmp	.+34     	; 0x6d00 <__floatsisf+0x6a>
    6cde:	77 23       	and	r23, r23
    6ce0:	21 f0       	breq	.+8      	; 0x6cea <__floatsisf+0x54>
    6ce2:	9e e8       	ldi	r25, 0x8E	; 142
    6ce4:	87 2f       	mov	r24, r23
    6ce6:	76 2f       	mov	r23, r22
    6ce8:	05 c0       	rjmp	.+10     	; 0x6cf4 <__floatsisf+0x5e>
    6cea:	66 23       	and	r22, r22
    6cec:	71 f0       	breq	.+28     	; 0x6d0a <__floatsisf+0x74>
    6cee:	96 e8       	ldi	r25, 0x86	; 134
    6cf0:	86 2f       	mov	r24, r22
    6cf2:	70 e0       	ldi	r23, 0x00	; 0
    6cf4:	60 e0       	ldi	r22, 0x00	; 0
    6cf6:	2a f0       	brmi	.+10     	; 0x6d02 <__floatsisf+0x6c>
    6cf8:	9a 95       	dec	r25
    6cfa:	66 0f       	add	r22, r22
    6cfc:	77 1f       	adc	r23, r23
    6cfe:	88 1f       	adc	r24, r24
    6d00:	da f7       	brpl	.-10     	; 0x6cf8 <__floatsisf+0x62>
    6d02:	88 0f       	add	r24, r24
    6d04:	96 95       	lsr	r25
    6d06:	87 95       	ror	r24
    6d08:	97 f9       	bld	r25, 7
    6d0a:	08 95       	ret

00006d0c <__fp_cmp>:
    6d0c:	99 0f       	add	r25, r25
    6d0e:	00 08       	sbc	r0, r0
    6d10:	55 0f       	add	r21, r21
    6d12:	aa 0b       	sbc	r26, r26
    6d14:	e0 e8       	ldi	r30, 0x80	; 128
    6d16:	fe ef       	ldi	r31, 0xFE	; 254
    6d18:	16 16       	cp	r1, r22
    6d1a:	17 06       	cpc	r1, r23
    6d1c:	e8 07       	cpc	r30, r24
    6d1e:	f9 07       	cpc	r31, r25
    6d20:	c0 f0       	brcs	.+48     	; 0x6d52 <__fp_cmp+0x46>
    6d22:	12 16       	cp	r1, r18
    6d24:	13 06       	cpc	r1, r19
    6d26:	e4 07       	cpc	r30, r20
    6d28:	f5 07       	cpc	r31, r21
    6d2a:	98 f0       	brcs	.+38     	; 0x6d52 <__fp_cmp+0x46>
    6d2c:	62 1b       	sub	r22, r18
    6d2e:	73 0b       	sbc	r23, r19
    6d30:	84 0b       	sbc	r24, r20
    6d32:	95 0b       	sbc	r25, r21
    6d34:	39 f4       	brne	.+14     	; 0x6d44 <__fp_cmp+0x38>
    6d36:	0a 26       	eor	r0, r26
    6d38:	61 f0       	breq	.+24     	; 0x6d52 <__fp_cmp+0x46>
    6d3a:	23 2b       	or	r18, r19
    6d3c:	24 2b       	or	r18, r20
    6d3e:	25 2b       	or	r18, r21
    6d40:	21 f4       	brne	.+8      	; 0x6d4a <__fp_cmp+0x3e>
    6d42:	08 95       	ret
    6d44:	0a 26       	eor	r0, r26
    6d46:	09 f4       	brne	.+2      	; 0x6d4a <__fp_cmp+0x3e>
    6d48:	a1 40       	sbci	r26, 0x01	; 1
    6d4a:	a6 95       	lsr	r26
    6d4c:	8f ef       	ldi	r24, 0xFF	; 255
    6d4e:	81 1d       	adc	r24, r1
    6d50:	81 1d       	adc	r24, r1
    6d52:	08 95       	ret

00006d54 <__fp_inf>:
    6d54:	97 f9       	bld	r25, 7
    6d56:	9f 67       	ori	r25, 0x7F	; 127
    6d58:	80 e8       	ldi	r24, 0x80	; 128
    6d5a:	70 e0       	ldi	r23, 0x00	; 0
    6d5c:	60 e0       	ldi	r22, 0x00	; 0
    6d5e:	08 95       	ret

00006d60 <__fp_nan>:
    6d60:	9f ef       	ldi	r25, 0xFF	; 255
    6d62:	80 ec       	ldi	r24, 0xC0	; 192
    6d64:	08 95       	ret

00006d66 <__fp_powser>:
    6d66:	df 93       	push	r29
    6d68:	cf 93       	push	r28
    6d6a:	1f 93       	push	r17
    6d6c:	0f 93       	push	r16
    6d6e:	ff 92       	push	r15
    6d70:	ef 92       	push	r14
    6d72:	df 92       	push	r13
    6d74:	7b 01       	movw	r14, r22
    6d76:	8c 01       	movw	r16, r24
    6d78:	68 94       	set
    6d7a:	05 c0       	rjmp	.+10     	; 0x6d86 <__fp_powser+0x20>
    6d7c:	da 2e       	mov	r13, r26
    6d7e:	ef 01       	movw	r28, r30
    6d80:	af d0       	rcall	.+350    	; 0x6ee0 <__mulsf3x>
    6d82:	fe 01       	movw	r30, r28
    6d84:	e8 94       	clt
    6d86:	a5 91       	lpm	r26, Z+
    6d88:	25 91       	lpm	r18, Z+
    6d8a:	35 91       	lpm	r19, Z+
    6d8c:	45 91       	lpm	r20, Z+
    6d8e:	55 91       	lpm	r21, Z+
    6d90:	ae f3       	brts	.-22     	; 0x6d7c <__fp_powser+0x16>
    6d92:	ef 01       	movw	r28, r30
    6d94:	29 de       	rcall	.-942    	; 0x69e8 <__addsf3x>
    6d96:	fe 01       	movw	r30, r28
    6d98:	97 01       	movw	r18, r14
    6d9a:	a8 01       	movw	r20, r16
    6d9c:	da 94       	dec	r13
    6d9e:	79 f7       	brne	.-34     	; 0x6d7e <__fp_powser+0x18>
    6da0:	df 90       	pop	r13
    6da2:	ef 90       	pop	r14
    6da4:	ff 90       	pop	r15
    6da6:	0f 91       	pop	r16
    6da8:	1f 91       	pop	r17
    6daa:	cf 91       	pop	r28
    6dac:	df 91       	pop	r29
    6dae:	08 95       	ret

00006db0 <__fp_pscA>:
    6db0:	00 24       	eor	r0, r0
    6db2:	0a 94       	dec	r0
    6db4:	16 16       	cp	r1, r22
    6db6:	17 06       	cpc	r1, r23
    6db8:	18 06       	cpc	r1, r24
    6dba:	09 06       	cpc	r0, r25
    6dbc:	08 95       	ret

00006dbe <__fp_pscB>:
    6dbe:	00 24       	eor	r0, r0
    6dc0:	0a 94       	dec	r0
    6dc2:	12 16       	cp	r1, r18
    6dc4:	13 06       	cpc	r1, r19
    6dc6:	14 06       	cpc	r1, r20
    6dc8:	05 06       	cpc	r0, r21
    6dca:	08 95       	ret
    6dcc:	c9 cf       	rjmp	.-110    	; 0x6d60 <__fp_nan>

00006dce <__fp_rempio2>:
    6dce:	50 d0       	rcall	.+160    	; 0x6e70 <__fp_splitA>
    6dd0:	e8 f3       	brcs	.-6      	; 0x6dcc <__fp_pscB+0xe>
    6dd2:	e8 94       	clt
    6dd4:	e0 e0       	ldi	r30, 0x00	; 0
    6dd6:	bb 27       	eor	r27, r27
    6dd8:	9f 57       	subi	r25, 0x7F	; 127
    6dda:	f0 f0       	brcs	.+60     	; 0x6e18 <__fp_rempio2+0x4a>
    6ddc:	2a ed       	ldi	r18, 0xDA	; 218
    6dde:	3f e0       	ldi	r19, 0x0F	; 15
    6de0:	49 ec       	ldi	r20, 0xC9	; 201
    6de2:	06 c0       	rjmp	.+12     	; 0x6df0 <__fp_rempio2+0x22>
    6de4:	ee 0f       	add	r30, r30
    6de6:	bb 0f       	add	r27, r27
    6de8:	66 1f       	adc	r22, r22
    6dea:	77 1f       	adc	r23, r23
    6dec:	88 1f       	adc	r24, r24
    6dee:	28 f0       	brcs	.+10     	; 0x6dfa <__fp_rempio2+0x2c>
    6df0:	b2 3a       	cpi	r27, 0xA2	; 162
    6df2:	62 07       	cpc	r22, r18
    6df4:	73 07       	cpc	r23, r19
    6df6:	84 07       	cpc	r24, r20
    6df8:	28 f0       	brcs	.+10     	; 0x6e04 <__fp_rempio2+0x36>
    6dfa:	b2 5a       	subi	r27, 0xA2	; 162
    6dfc:	62 0b       	sbc	r22, r18
    6dfe:	73 0b       	sbc	r23, r19
    6e00:	84 0b       	sbc	r24, r20
    6e02:	e3 95       	inc	r30
    6e04:	9a 95       	dec	r25
    6e06:	72 f7       	brpl	.-36     	; 0x6de4 <__fp_rempio2+0x16>
    6e08:	80 38       	cpi	r24, 0x80	; 128
    6e0a:	30 f4       	brcc	.+12     	; 0x6e18 <__fp_rempio2+0x4a>
    6e0c:	9a 95       	dec	r25
    6e0e:	bb 0f       	add	r27, r27
    6e10:	66 1f       	adc	r22, r22
    6e12:	77 1f       	adc	r23, r23
    6e14:	88 1f       	adc	r24, r24
    6e16:	d2 f7       	brpl	.-12     	; 0x6e0c <__fp_rempio2+0x3e>
    6e18:	90 48       	sbci	r25, 0x80	; 128
    6e1a:	06 c1       	rjmp	.+524    	; 0x7028 <__fp_mpack_finite>

00006e1c <__fp_round>:
    6e1c:	09 2e       	mov	r0, r25
    6e1e:	03 94       	inc	r0
    6e20:	00 0c       	add	r0, r0
    6e22:	11 f4       	brne	.+4      	; 0x6e28 <__fp_round+0xc>
    6e24:	88 23       	and	r24, r24
    6e26:	52 f0       	brmi	.+20     	; 0x6e3c <__fp_round+0x20>
    6e28:	bb 0f       	add	r27, r27
    6e2a:	40 f4       	brcc	.+16     	; 0x6e3c <__fp_round+0x20>
    6e2c:	bf 2b       	or	r27, r31
    6e2e:	11 f4       	brne	.+4      	; 0x6e34 <__fp_round+0x18>
    6e30:	60 ff       	sbrs	r22, 0
    6e32:	04 c0       	rjmp	.+8      	; 0x6e3c <__fp_round+0x20>
    6e34:	6f 5f       	subi	r22, 0xFF	; 255
    6e36:	7f 4f       	sbci	r23, 0xFF	; 255
    6e38:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3c:	08 95       	ret

00006e3e <__fp_sinus>:
    6e3e:	ef 93       	push	r30
    6e40:	e0 ff       	sbrs	r30, 0
    6e42:	06 c0       	rjmp	.+12     	; 0x6e50 <__fp_sinus+0x12>
    6e44:	a2 ea       	ldi	r26, 0xA2	; 162
    6e46:	2a ed       	ldi	r18, 0xDA	; 218
    6e48:	3f e0       	ldi	r19, 0x0F	; 15
    6e4a:	49 ec       	ldi	r20, 0xC9	; 201
    6e4c:	5f eb       	ldi	r21, 0xBF	; 191
    6e4e:	cc dd       	rcall	.-1128   	; 0x69e8 <__addsf3x>
    6e50:	e5 df       	rcall	.-54     	; 0x6e1c <__fp_round>
    6e52:	0f 90       	pop	r0
    6e54:	03 94       	inc	r0
    6e56:	01 fc       	sbrc	r0, 1
    6e58:	90 58       	subi	r25, 0x80	; 128
    6e5a:	e1 e2       	ldi	r30, 0x21	; 33
    6e5c:	f2 e0       	ldi	r31, 0x02	; 2
    6e5e:	f7 c0       	rjmp	.+494    	; 0x704e <__fp_powsodd>

00006e60 <__fp_split3>:
    6e60:	57 fd       	sbrc	r21, 7
    6e62:	90 58       	subi	r25, 0x80	; 128
    6e64:	44 0f       	add	r20, r20
    6e66:	55 1f       	adc	r21, r21
    6e68:	59 f0       	breq	.+22     	; 0x6e80 <__fp_splitA+0x10>
    6e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    6e6c:	71 f0       	breq	.+28     	; 0x6e8a <__fp_splitA+0x1a>
    6e6e:	47 95       	ror	r20

00006e70 <__fp_splitA>:
    6e70:	88 0f       	add	r24, r24
    6e72:	97 fb       	bst	r25, 7
    6e74:	99 1f       	adc	r25, r25
    6e76:	61 f0       	breq	.+24     	; 0x6e90 <__fp_splitA+0x20>
    6e78:	9f 3f       	cpi	r25, 0xFF	; 255
    6e7a:	79 f0       	breq	.+30     	; 0x6e9a <__fp_splitA+0x2a>
    6e7c:	87 95       	ror	r24
    6e7e:	08 95       	ret
    6e80:	12 16       	cp	r1, r18
    6e82:	13 06       	cpc	r1, r19
    6e84:	14 06       	cpc	r1, r20
    6e86:	55 1f       	adc	r21, r21
    6e88:	f2 cf       	rjmp	.-28     	; 0x6e6e <__fp_split3+0xe>
    6e8a:	46 95       	lsr	r20
    6e8c:	f1 df       	rcall	.-30     	; 0x6e70 <__fp_splitA>
    6e8e:	08 c0       	rjmp	.+16     	; 0x6ea0 <__fp_splitA+0x30>
    6e90:	16 16       	cp	r1, r22
    6e92:	17 06       	cpc	r1, r23
    6e94:	18 06       	cpc	r1, r24
    6e96:	99 1f       	adc	r25, r25
    6e98:	f1 cf       	rjmp	.-30     	; 0x6e7c <__fp_splitA+0xc>
    6e9a:	86 95       	lsr	r24
    6e9c:	71 05       	cpc	r23, r1
    6e9e:	61 05       	cpc	r22, r1
    6ea0:	08 94       	sec
    6ea2:	08 95       	ret

00006ea4 <__fp_zero>:
    6ea4:	e8 94       	clt

00006ea6 <__fp_szero>:
    6ea6:	bb 27       	eor	r27, r27
    6ea8:	66 27       	eor	r22, r22
    6eaa:	77 27       	eor	r23, r23
    6eac:	cb 01       	movw	r24, r22
    6eae:	97 f9       	bld	r25, 7
    6eb0:	08 95       	ret

00006eb2 <__gesf2>:
    6eb2:	2c df       	rcall	.-424    	; 0x6d0c <__fp_cmp>
    6eb4:	08 f4       	brcc	.+2      	; 0x6eb8 <__gesf2+0x6>
    6eb6:	8f ef       	ldi	r24, 0xFF	; 255
    6eb8:	08 95       	ret

00006eba <inverse>:
    6eba:	9b 01       	movw	r18, r22
    6ebc:	ac 01       	movw	r20, r24
    6ebe:	60 e0       	ldi	r22, 0x00	; 0
    6ec0:	70 e0       	ldi	r23, 0x00	; 0
    6ec2:	80 e8       	ldi	r24, 0x80	; 128
    6ec4:	9f e3       	ldi	r25, 0x3F	; 63
    6ec6:	4c ce       	rjmp	.-872    	; 0x6b60 <__divsf3>

00006ec8 <__mulsf3>:
    6ec8:	0b d0       	rcall	.+22     	; 0x6ee0 <__mulsf3x>
    6eca:	a8 cf       	rjmp	.-176    	; 0x6e1c <__fp_round>
    6ecc:	71 df       	rcall	.-286    	; 0x6db0 <__fp_pscA>
    6ece:	28 f0       	brcs	.+10     	; 0x6eda <__mulsf3+0x12>
    6ed0:	76 df       	rcall	.-276    	; 0x6dbe <__fp_pscB>
    6ed2:	18 f0       	brcs	.+6      	; 0x6eda <__mulsf3+0x12>
    6ed4:	95 23       	and	r25, r21
    6ed6:	09 f0       	breq	.+2      	; 0x6eda <__mulsf3+0x12>
    6ed8:	3d cf       	rjmp	.-390    	; 0x6d54 <__fp_inf>
    6eda:	42 cf       	rjmp	.-380    	; 0x6d60 <__fp_nan>
    6edc:	11 24       	eor	r1, r1
    6ede:	e3 cf       	rjmp	.-58     	; 0x6ea6 <__fp_szero>

00006ee0 <__mulsf3x>:
    6ee0:	bf df       	rcall	.-130    	; 0x6e60 <__fp_split3>
    6ee2:	a0 f3       	brcs	.-24     	; 0x6ecc <__mulsf3+0x4>

00006ee4 <__mulsf3_pse>:
    6ee4:	95 9f       	mul	r25, r21
    6ee6:	d1 f3       	breq	.-12     	; 0x6edc <__mulsf3+0x14>
    6ee8:	95 0f       	add	r25, r21
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	55 1f       	adc	r21, r21
    6eee:	62 9f       	mul	r22, r18
    6ef0:	f0 01       	movw	r30, r0
    6ef2:	72 9f       	mul	r23, r18
    6ef4:	bb 27       	eor	r27, r27
    6ef6:	f0 0d       	add	r31, r0
    6ef8:	b1 1d       	adc	r27, r1
    6efa:	63 9f       	mul	r22, r19
    6efc:	aa 27       	eor	r26, r26
    6efe:	f0 0d       	add	r31, r0
    6f00:	b1 1d       	adc	r27, r1
    6f02:	aa 1f       	adc	r26, r26
    6f04:	64 9f       	mul	r22, r20
    6f06:	66 27       	eor	r22, r22
    6f08:	b0 0d       	add	r27, r0
    6f0a:	a1 1d       	adc	r26, r1
    6f0c:	66 1f       	adc	r22, r22
    6f0e:	82 9f       	mul	r24, r18
    6f10:	22 27       	eor	r18, r18
    6f12:	b0 0d       	add	r27, r0
    6f14:	a1 1d       	adc	r26, r1
    6f16:	62 1f       	adc	r22, r18
    6f18:	73 9f       	mul	r23, r19
    6f1a:	b0 0d       	add	r27, r0
    6f1c:	a1 1d       	adc	r26, r1
    6f1e:	62 1f       	adc	r22, r18
    6f20:	83 9f       	mul	r24, r19
    6f22:	a0 0d       	add	r26, r0
    6f24:	61 1d       	adc	r22, r1
    6f26:	22 1f       	adc	r18, r18
    6f28:	74 9f       	mul	r23, r20
    6f2a:	33 27       	eor	r19, r19
    6f2c:	a0 0d       	add	r26, r0
    6f2e:	61 1d       	adc	r22, r1
    6f30:	23 1f       	adc	r18, r19
    6f32:	84 9f       	mul	r24, r20
    6f34:	60 0d       	add	r22, r0
    6f36:	21 1d       	adc	r18, r1
    6f38:	82 2f       	mov	r24, r18
    6f3a:	76 2f       	mov	r23, r22
    6f3c:	6a 2f       	mov	r22, r26
    6f3e:	11 24       	eor	r1, r1
    6f40:	9f 57       	subi	r25, 0x7F	; 127
    6f42:	50 40       	sbci	r21, 0x00	; 0
    6f44:	8a f0       	brmi	.+34     	; 0x6f68 <__mulsf3_pse+0x84>
    6f46:	e1 f0       	breq	.+56     	; 0x6f80 <__mulsf3_pse+0x9c>
    6f48:	88 23       	and	r24, r24
    6f4a:	4a f0       	brmi	.+18     	; 0x6f5e <__mulsf3_pse+0x7a>
    6f4c:	ee 0f       	add	r30, r30
    6f4e:	ff 1f       	adc	r31, r31
    6f50:	bb 1f       	adc	r27, r27
    6f52:	66 1f       	adc	r22, r22
    6f54:	77 1f       	adc	r23, r23
    6f56:	88 1f       	adc	r24, r24
    6f58:	91 50       	subi	r25, 0x01	; 1
    6f5a:	50 40       	sbci	r21, 0x00	; 0
    6f5c:	a9 f7       	brne	.-22     	; 0x6f48 <__mulsf3_pse+0x64>
    6f5e:	9e 3f       	cpi	r25, 0xFE	; 254
    6f60:	51 05       	cpc	r21, r1
    6f62:	70 f0       	brcs	.+28     	; 0x6f80 <__mulsf3_pse+0x9c>
    6f64:	f7 ce       	rjmp	.-530    	; 0x6d54 <__fp_inf>
    6f66:	9f cf       	rjmp	.-194    	; 0x6ea6 <__fp_szero>
    6f68:	5f 3f       	cpi	r21, 0xFF	; 255
    6f6a:	ec f3       	brlt	.-6      	; 0x6f66 <__mulsf3_pse+0x82>
    6f6c:	98 3e       	cpi	r25, 0xE8	; 232
    6f6e:	dc f3       	brlt	.-10     	; 0x6f66 <__mulsf3_pse+0x82>
    6f70:	86 95       	lsr	r24
    6f72:	77 95       	ror	r23
    6f74:	67 95       	ror	r22
    6f76:	b7 95       	ror	r27
    6f78:	f7 95       	ror	r31
    6f7a:	e7 95       	ror	r30
    6f7c:	9f 5f       	subi	r25, 0xFF	; 255
    6f7e:	c1 f7       	brne	.-16     	; 0x6f70 <__mulsf3_pse+0x8c>
    6f80:	fe 2b       	or	r31, r30
    6f82:	88 0f       	add	r24, r24
    6f84:	91 1d       	adc	r25, r1
    6f86:	96 95       	lsr	r25
    6f88:	87 95       	ror	r24
    6f8a:	97 f9       	bld	r25, 7
    6f8c:	08 95       	ret

00006f8e <sin>:
    6f8e:	9f 93       	push	r25
    6f90:	1e df       	rcall	.-452    	; 0x6dce <__fp_rempio2>
    6f92:	0f 90       	pop	r0
    6f94:	07 fc       	sbrc	r0, 7
    6f96:	ee 5f       	subi	r30, 0xFE	; 254
    6f98:	52 cf       	rjmp	.-348    	; 0x6e3e <__fp_sinus>
    6f9a:	11 f4       	brne	.+4      	; 0x6fa0 <sin+0x12>
    6f9c:	0e f4       	brtc	.+2      	; 0x6fa0 <sin+0x12>
    6f9e:	e0 ce       	rjmp	.-576    	; 0x6d60 <__fp_nan>
    6fa0:	41 c0       	rjmp	.+130    	; 0x7024 <__fp_mpack>

00006fa2 <sqrt>:
    6fa2:	66 df       	rcall	.-308    	; 0x6e70 <__fp_splitA>
    6fa4:	d0 f3       	brcs	.-12     	; 0x6f9a <sin+0xc>
    6fa6:	99 23       	and	r25, r25
    6fa8:	d9 f3       	breq	.-10     	; 0x6fa0 <sin+0x12>
    6faa:	ce f3       	brts	.-14     	; 0x6f9e <sin+0x10>
    6fac:	9f 57       	subi	r25, 0x7F	; 127
    6fae:	55 0b       	sbc	r21, r21
    6fb0:	87 ff       	sbrs	r24, 7
    6fb2:	46 d0       	rcall	.+140    	; 0x7040 <__fp_norm2>
    6fb4:	00 24       	eor	r0, r0
    6fb6:	a0 e6       	ldi	r26, 0x60	; 96
    6fb8:	40 ea       	ldi	r20, 0xA0	; 160
    6fba:	90 01       	movw	r18, r0
    6fbc:	80 58       	subi	r24, 0x80	; 128
    6fbe:	56 95       	lsr	r21
    6fc0:	97 95       	ror	r25
    6fc2:	28 f4       	brcc	.+10     	; 0x6fce <sqrt+0x2c>
    6fc4:	80 5c       	subi	r24, 0xC0	; 192
    6fc6:	66 0f       	add	r22, r22
    6fc8:	77 1f       	adc	r23, r23
    6fca:	88 1f       	adc	r24, r24
    6fcc:	20 f0       	brcs	.+8      	; 0x6fd6 <sqrt+0x34>
    6fce:	26 17       	cp	r18, r22
    6fd0:	37 07       	cpc	r19, r23
    6fd2:	48 07       	cpc	r20, r24
    6fd4:	30 f4       	brcc	.+12     	; 0x6fe2 <sqrt+0x40>
    6fd6:	62 1b       	sub	r22, r18
    6fd8:	73 0b       	sbc	r23, r19
    6fda:	84 0b       	sbc	r24, r20
    6fdc:	20 29       	or	r18, r0
    6fde:	31 29       	or	r19, r1
    6fe0:	4a 2b       	or	r20, r26
    6fe2:	a6 95       	lsr	r26
    6fe4:	17 94       	ror	r1
    6fe6:	07 94       	ror	r0
    6fe8:	20 25       	eor	r18, r0
    6fea:	31 25       	eor	r19, r1
    6fec:	4a 27       	eor	r20, r26
    6fee:	58 f7       	brcc	.-42     	; 0x6fc6 <sqrt+0x24>
    6ff0:	66 0f       	add	r22, r22
    6ff2:	77 1f       	adc	r23, r23
    6ff4:	88 1f       	adc	r24, r24
    6ff6:	20 f0       	brcs	.+8      	; 0x7000 <sqrt+0x5e>
    6ff8:	26 17       	cp	r18, r22
    6ffa:	37 07       	cpc	r19, r23
    6ffc:	48 07       	cpc	r20, r24
    6ffe:	30 f4       	brcc	.+12     	; 0x700c <sqrt+0x6a>
    7000:	62 0b       	sbc	r22, r18
    7002:	73 0b       	sbc	r23, r19
    7004:	84 0b       	sbc	r24, r20
    7006:	20 0d       	add	r18, r0
    7008:	31 1d       	adc	r19, r1
    700a:	41 1d       	adc	r20, r1
    700c:	a0 95       	com	r26
    700e:	81 f7       	brne	.-32     	; 0x6ff0 <sqrt+0x4e>
    7010:	b9 01       	movw	r22, r18
    7012:	84 2f       	mov	r24, r20
    7014:	91 58       	subi	r25, 0x81	; 129
    7016:	88 0f       	add	r24, r24
    7018:	96 95       	lsr	r25
    701a:	87 95       	ror	r24
    701c:	08 95       	ret

0000701e <square>:
    701e:	9b 01       	movw	r18, r22
    7020:	ac 01       	movw	r20, r24
    7022:	52 cf       	rjmp	.-348    	; 0x6ec8 <__mulsf3>

00007024 <__fp_mpack>:
    7024:	9f 3f       	cpi	r25, 0xFF	; 255
    7026:	31 f0       	breq	.+12     	; 0x7034 <__fp_mpack_finite+0xc>

00007028 <__fp_mpack_finite>:
    7028:	91 50       	subi	r25, 0x01	; 1
    702a:	20 f4       	brcc	.+8      	; 0x7034 <__fp_mpack_finite+0xc>
    702c:	87 95       	ror	r24
    702e:	77 95       	ror	r23
    7030:	67 95       	ror	r22
    7032:	b7 95       	ror	r27
    7034:	88 0f       	add	r24, r24
    7036:	91 1d       	adc	r25, r1
    7038:	96 95       	lsr	r25
    703a:	87 95       	ror	r24
    703c:	97 f9       	bld	r25, 7
    703e:	08 95       	ret

00007040 <__fp_norm2>:
    7040:	91 50       	subi	r25, 0x01	; 1
    7042:	50 40       	sbci	r21, 0x00	; 0
    7044:	66 0f       	add	r22, r22
    7046:	77 1f       	adc	r23, r23
    7048:	88 1f       	adc	r24, r24
    704a:	d2 f7       	brpl	.-12     	; 0x7040 <__fp_norm2>
    704c:	08 95       	ret

0000704e <__fp_powsodd>:
    704e:	9f 93       	push	r25
    7050:	8f 93       	push	r24
    7052:	7f 93       	push	r23
    7054:	6f 93       	push	r22
    7056:	ff 93       	push	r31
    7058:	ef 93       	push	r30
    705a:	9b 01       	movw	r18, r22
    705c:	ac 01       	movw	r20, r24
    705e:	34 df       	rcall	.-408    	; 0x6ec8 <__mulsf3>
    7060:	ef 91       	pop	r30
    7062:	ff 91       	pop	r31
    7064:	80 de       	rcall	.-768    	; 0x6d66 <__fp_powser>
    7066:	2f 91       	pop	r18
    7068:	3f 91       	pop	r19
    706a:	4f 91       	pop	r20
    706c:	5f 91       	pop	r21
    706e:	2c cf       	rjmp	.-424    	; 0x6ec8 <__mulsf3>

00007070 <__mulsi3>:
    7070:	db 01       	movw	r26, r22
    7072:	8f 93       	push	r24
    7074:	9f 93       	push	r25
    7076:	5b d0       	rcall	.+182    	; 0x712e <__muluhisi3>
    7078:	bf 91       	pop	r27
    707a:	af 91       	pop	r26
    707c:	a2 9f       	mul	r26, r18
    707e:	80 0d       	add	r24, r0
    7080:	91 1d       	adc	r25, r1
    7082:	a3 9f       	mul	r26, r19
    7084:	90 0d       	add	r25, r0
    7086:	b2 9f       	mul	r27, r18
    7088:	90 0d       	add	r25, r0
    708a:	11 24       	eor	r1, r1
    708c:	08 95       	ret

0000708e <__divmodhi4>:
    708e:	97 fb       	bst	r25, 7
    7090:	07 2e       	mov	r0, r23
    7092:	16 f4       	brtc	.+4      	; 0x7098 <__divmodhi4+0xa>
    7094:	00 94       	com	r0
    7096:	06 d0       	rcall	.+12     	; 0x70a4 <__divmodhi4_neg1>
    7098:	77 fd       	sbrc	r23, 7
    709a:	08 d0       	rcall	.+16     	; 0x70ac <__divmodhi4_neg2>
    709c:	58 d0       	rcall	.+176    	; 0x714e <__udivmodhi4>
    709e:	07 fc       	sbrc	r0, 7
    70a0:	05 d0       	rcall	.+10     	; 0x70ac <__divmodhi4_neg2>
    70a2:	3e f4       	brtc	.+14     	; 0x70b2 <__divmodhi4_exit>

000070a4 <__divmodhi4_neg1>:
    70a4:	90 95       	com	r25
    70a6:	81 95       	neg	r24
    70a8:	9f 4f       	sbci	r25, 0xFF	; 255
    70aa:	08 95       	ret

000070ac <__divmodhi4_neg2>:
    70ac:	70 95       	com	r23
    70ae:	61 95       	neg	r22
    70b0:	7f 4f       	sbci	r23, 0xFF	; 255

000070b2 <__divmodhi4_exit>:
    70b2:	08 95       	ret

000070b4 <__udivmodsi4>:
    70b4:	a1 e2       	ldi	r26, 0x21	; 33
    70b6:	1a 2e       	mov	r1, r26
    70b8:	aa 1b       	sub	r26, r26
    70ba:	bb 1b       	sub	r27, r27
    70bc:	fd 01       	movw	r30, r26
    70be:	0d c0       	rjmp	.+26     	; 0x70da <__udivmodsi4_ep>

000070c0 <__udivmodsi4_loop>:
    70c0:	aa 1f       	adc	r26, r26
    70c2:	bb 1f       	adc	r27, r27
    70c4:	ee 1f       	adc	r30, r30
    70c6:	ff 1f       	adc	r31, r31
    70c8:	a2 17       	cp	r26, r18
    70ca:	b3 07       	cpc	r27, r19
    70cc:	e4 07       	cpc	r30, r20
    70ce:	f5 07       	cpc	r31, r21
    70d0:	20 f0       	brcs	.+8      	; 0x70da <__udivmodsi4_ep>
    70d2:	a2 1b       	sub	r26, r18
    70d4:	b3 0b       	sbc	r27, r19
    70d6:	e4 0b       	sbc	r30, r20
    70d8:	f5 0b       	sbc	r31, r21

000070da <__udivmodsi4_ep>:
    70da:	66 1f       	adc	r22, r22
    70dc:	77 1f       	adc	r23, r23
    70de:	88 1f       	adc	r24, r24
    70e0:	99 1f       	adc	r25, r25
    70e2:	1a 94       	dec	r1
    70e4:	69 f7       	brne	.-38     	; 0x70c0 <__udivmodsi4_loop>
    70e6:	60 95       	com	r22
    70e8:	70 95       	com	r23
    70ea:	80 95       	com	r24
    70ec:	90 95       	com	r25
    70ee:	9b 01       	movw	r18, r22
    70f0:	ac 01       	movw	r20, r24
    70f2:	bd 01       	movw	r22, r26
    70f4:	cf 01       	movw	r24, r30
    70f6:	08 95       	ret

000070f8 <__divmodsi4>:
    70f8:	05 2e       	mov	r0, r21
    70fa:	97 fb       	bst	r25, 7
    70fc:	16 f4       	brtc	.+4      	; 0x7102 <__divmodsi4+0xa>
    70fe:	00 94       	com	r0
    7100:	06 d0       	rcall	.+12     	; 0x710e <__divmodsi4_neg1>
    7102:	57 fd       	sbrc	r21, 7
    7104:	0c d0       	rcall	.+24     	; 0x711e <__divmodsi4_neg2>
    7106:	d6 df       	rcall	.-84     	; 0x70b4 <__udivmodsi4>
    7108:	07 fc       	sbrc	r0, 7
    710a:	09 d0       	rcall	.+18     	; 0x711e <__divmodsi4_neg2>
    710c:	7e f4       	brtc	.+30     	; 0x712c <__divmodsi4_exit>

0000710e <__divmodsi4_neg1>:
    710e:	90 95       	com	r25
    7110:	80 95       	com	r24
    7112:	70 95       	com	r23
    7114:	61 95       	neg	r22
    7116:	7f 4f       	sbci	r23, 0xFF	; 255
    7118:	8f 4f       	sbci	r24, 0xFF	; 255
    711a:	9f 4f       	sbci	r25, 0xFF	; 255
    711c:	08 95       	ret

0000711e <__divmodsi4_neg2>:
    711e:	50 95       	com	r21
    7120:	40 95       	com	r20
    7122:	30 95       	com	r19
    7124:	21 95       	neg	r18
    7126:	3f 4f       	sbci	r19, 0xFF	; 255
    7128:	4f 4f       	sbci	r20, 0xFF	; 255
    712a:	5f 4f       	sbci	r21, 0xFF	; 255

0000712c <__divmodsi4_exit>:
    712c:	08 95       	ret

0000712e <__muluhisi3>:
    712e:	23 d0       	rcall	.+70     	; 0x7176 <__umulhisi3>
    7130:	a5 9f       	mul	r26, r21
    7132:	90 0d       	add	r25, r0
    7134:	b4 9f       	mul	r27, r20
    7136:	90 0d       	add	r25, r0
    7138:	a4 9f       	mul	r26, r20
    713a:	80 0d       	add	r24, r0
    713c:	91 1d       	adc	r25, r1
    713e:	11 24       	eor	r1, r1
    7140:	08 95       	ret

00007142 <__mulshisi3>:
    7142:	b7 ff       	sbrs	r27, 7
    7144:	f4 cf       	rjmp	.-24     	; 0x712e <__muluhisi3>

00007146 <__mulohisi3>:
    7146:	f3 df       	rcall	.-26     	; 0x712e <__muluhisi3>
    7148:	82 1b       	sub	r24, r18
    714a:	93 0b       	sbc	r25, r19
    714c:	08 95       	ret

0000714e <__udivmodhi4>:
    714e:	aa 1b       	sub	r26, r26
    7150:	bb 1b       	sub	r27, r27
    7152:	51 e1       	ldi	r21, 0x11	; 17
    7154:	07 c0       	rjmp	.+14     	; 0x7164 <__udivmodhi4_ep>

00007156 <__udivmodhi4_loop>:
    7156:	aa 1f       	adc	r26, r26
    7158:	bb 1f       	adc	r27, r27
    715a:	a6 17       	cp	r26, r22
    715c:	b7 07       	cpc	r27, r23
    715e:	10 f0       	brcs	.+4      	; 0x7164 <__udivmodhi4_ep>
    7160:	a6 1b       	sub	r26, r22
    7162:	b7 0b       	sbc	r27, r23

00007164 <__udivmodhi4_ep>:
    7164:	88 1f       	adc	r24, r24
    7166:	99 1f       	adc	r25, r25
    7168:	5a 95       	dec	r21
    716a:	a9 f7       	brne	.-22     	; 0x7156 <__udivmodhi4_loop>
    716c:	80 95       	com	r24
    716e:	90 95       	com	r25
    7170:	bc 01       	movw	r22, r24
    7172:	cd 01       	movw	r24, r26
    7174:	08 95       	ret

00007176 <__umulhisi3>:
    7176:	a2 9f       	mul	r26, r18
    7178:	b0 01       	movw	r22, r0
    717a:	b3 9f       	mul	r27, r19
    717c:	c0 01       	movw	r24, r0
    717e:	a3 9f       	mul	r26, r19
    7180:	01 d0       	rcall	.+2      	; 0x7184 <__umulhisi3+0xe>
    7182:	b2 9f       	mul	r27, r18
    7184:	70 0d       	add	r23, r0
    7186:	81 1d       	adc	r24, r1
    7188:	11 24       	eor	r1, r1
    718a:	91 1d       	adc	r25, r1
    718c:	08 95       	ret

0000718e <_exit>:
    718e:	f8 94       	cli

00007190 <__stop_program>:
    7190:	ff cf       	rjmp	.-2      	; 0x7190 <__stop_program>
